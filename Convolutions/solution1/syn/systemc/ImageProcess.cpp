// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ImageProcess.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ImageProcess::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ImageProcess::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> ImageProcess::ap_ST_fsm_state1 = "1";
const sc_lv<17> ImageProcess::ap_ST_fsm_state2 = "10";
const sc_lv<17> ImageProcess::ap_ST_fsm_state3 = "100";
const sc_lv<17> ImageProcess::ap_ST_fsm_state4 = "1000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state5 = "10000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state6 = "100000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> ImageProcess::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> ImageProcess::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ImageProcess::ap_const_boolean_1 = true;
const sc_lv<1> ImageProcess::ap_const_lv1_0 = "0";
const sc_lv<1> ImageProcess::ap_const_lv1_1 = "1";
const sc_lv<2> ImageProcess::ap_const_lv2_0 = "00";
const sc_lv<2> ImageProcess::ap_const_lv2_2 = "10";
const sc_lv<2> ImageProcess::ap_const_lv2_3 = "11";
const sc_lv<2> ImageProcess::ap_const_lv2_1 = "1";
const sc_lv<32> ImageProcess::ap_const_lv32_2 = "10";
const sc_lv<32> ImageProcess::ap_const_lv32_D = "1101";
const sc_lv<32> ImageProcess::ap_const_lv32_E = "1110";
const sc_lv<32> ImageProcess::ap_const_lv32_F = "1111";
const sc_lv<32> ImageProcess::ap_const_lv32_10 = "10000";
const int ImageProcess::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> ImageProcess::ap_const_lv32_1 = "1";
const sc_lv<32> ImageProcess::ap_const_lv32_3 = "11";
const sc_lv<32> ImageProcess::ap_const_lv32_4 = "100";
const sc_lv<32> ImageProcess::ap_const_lv32_5 = "101";
const sc_lv<32> ImageProcess::ap_const_lv32_7 = "111";
const sc_lv<32> ImageProcess::ap_const_lv32_8 = "1000";
const sc_lv<32> ImageProcess::ap_const_lv32_9 = "1001";
const sc_lv<32> ImageProcess::ap_const_lv32_A = "1010";
const sc_lv<32> ImageProcess::ap_const_lv32_B = "1011";
const sc_lv<32> ImageProcess::ap_const_lv32_C = "1100";
const bool ImageProcess::ap_const_boolean_0 = false;
const sc_lv<17> ImageProcess::ap_const_lv17_1 = "1";
const sc_lv<32> ImageProcess::ap_const_lv32_6 = "110";
const sc_lv<8> ImageProcess::ap_const_lv8_0 = "00000000";
const sc_lv<8> ImageProcess::ap_const_lv8_FF = "11111111";
const sc_lv<16> ImageProcess::ap_const_lv16_0 = "0000000000000000";
const sc_lv<9> ImageProcess::ap_const_lv9_0 = "000000000";
const sc_lv<17> ImageProcess::ap_const_lv17_12C01 = "10010110000000001";
const sc_lv<32> ImageProcess::ap_const_lv32_1F = "11111";
const sc_lv<31> ImageProcess::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> ImageProcess::ap_const_lv32_13F = "100111111";
const sc_lv<17> ImageProcess::ap_const_lv17_141 = "101000001";
const sc_lv<9> ImageProcess::ap_const_lv9_141 = "101000001";
const sc_lv<9> ImageProcess::ap_const_lv9_1 = "1";
const sc_lv<9> ImageProcess::ap_const_lv9_140 = "101000000";

ImageProcess::ImageProcess(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ImageProcess_CRTL_BUS_s_axi_U = new ImageProcess_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("ImageProcess_CRTL_BUS_s_axi_U");
    ImageProcess_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    ImageProcess_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    ImageProcess_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    ImageProcess_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    ImageProcess_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    ImageProcess_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    ImageProcess_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    ImageProcess_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    ImageProcess_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    ImageProcess_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    ImageProcess_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    ImageProcess_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    ImageProcess_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    ImageProcess_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    ImageProcess_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    ImageProcess_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    ImageProcess_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    ImageProcess_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    ImageProcess_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    ImageProcess_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    ImageProcess_CRTL_BUS_s_axi_U->ap_start(ap_start);
    ImageProcess_CRTL_BUS_s_axi_U->interrupt(interrupt);
    ImageProcess_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    ImageProcess_CRTL_BUS_s_axi_U->ap_done(ap_done);
    ImageProcess_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    ImageProcess_CRTL_BUS_s_axi_U->operation(operation);
    ImageProcess_KERNEL_BUS_s_axi_U = new ImageProcess_KERNEL_BUS_s_axi<C_S_AXI_KERNEL_BUS_ADDR_WIDTH,C_S_AXI_KERNEL_BUS_DATA_WIDTH>("ImageProcess_KERNEL_BUS_s_axi_U");
    ImageProcess_KERNEL_BUS_s_axi_U->AWVALID(s_axi_KERNEL_BUS_AWVALID);
    ImageProcess_KERNEL_BUS_s_axi_U->AWREADY(s_axi_KERNEL_BUS_AWREADY);
    ImageProcess_KERNEL_BUS_s_axi_U->AWADDR(s_axi_KERNEL_BUS_AWADDR);
    ImageProcess_KERNEL_BUS_s_axi_U->WVALID(s_axi_KERNEL_BUS_WVALID);
    ImageProcess_KERNEL_BUS_s_axi_U->WREADY(s_axi_KERNEL_BUS_WREADY);
    ImageProcess_KERNEL_BUS_s_axi_U->WDATA(s_axi_KERNEL_BUS_WDATA);
    ImageProcess_KERNEL_BUS_s_axi_U->WSTRB(s_axi_KERNEL_BUS_WSTRB);
    ImageProcess_KERNEL_BUS_s_axi_U->ARVALID(s_axi_KERNEL_BUS_ARVALID);
    ImageProcess_KERNEL_BUS_s_axi_U->ARREADY(s_axi_KERNEL_BUS_ARREADY);
    ImageProcess_KERNEL_BUS_s_axi_U->ARADDR(s_axi_KERNEL_BUS_ARADDR);
    ImageProcess_KERNEL_BUS_s_axi_U->RVALID(s_axi_KERNEL_BUS_RVALID);
    ImageProcess_KERNEL_BUS_s_axi_U->RREADY(s_axi_KERNEL_BUS_RREADY);
    ImageProcess_KERNEL_BUS_s_axi_U->RDATA(s_axi_KERNEL_BUS_RDATA);
    ImageProcess_KERNEL_BUS_s_axi_U->RRESP(s_axi_KERNEL_BUS_RRESP);
    ImageProcess_KERNEL_BUS_s_axi_U->BVALID(s_axi_KERNEL_BUS_BVALID);
    ImageProcess_KERNEL_BUS_s_axi_U->BREADY(s_axi_KERNEL_BUS_BREADY);
    ImageProcess_KERNEL_BUS_s_axi_U->BRESP(s_axi_KERNEL_BUS_BRESP);
    ImageProcess_KERNEL_BUS_s_axi_U->ACLK(ap_clk);
    ImageProcess_KERNEL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    ImageProcess_KERNEL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    ImageProcess_KERNEL_BUS_s_axi_U->kernel_address0(kernel_address0);
    ImageProcess_KERNEL_BUS_s_axi_U->kernel_ce0(kernel_ce0);
    ImageProcess_KERNEL_BUS_s_axi_U->kernel_q0(kernel_q0);
    lineBuff_val_0_U = new ImageProcess_linebkb("lineBuff_val_0_U");
    lineBuff_val_0_U->clk(ap_clk);
    lineBuff_val_0_U->reset(ap_rst_n_inv);
    lineBuff_val_0_U->address0(lineBuff_val_0_address0);
    lineBuff_val_0_U->ce0(lineBuff_val_0_ce0);
    lineBuff_val_0_U->we0(lineBuff_val_0_we0);
    lineBuff_val_0_U->d0(lineBuff_val_1_q0);
    lineBuff_val_0_U->q0(lineBuff_val_0_q0);
    lineBuff_val_1_U = new ImageProcess_linebkb("lineBuff_val_1_U");
    lineBuff_val_1_U->clk(ap_clk);
    lineBuff_val_1_U->reset(ap_rst_n_inv);
    lineBuff_val_1_U->address0(lineBuff_val_1_address0);
    lineBuff_val_1_U->ce0(lineBuff_val_1_ce0);
    lineBuff_val_1_U->we0(lineBuff_val_1_we0);
    lineBuff_val_1_U->d0(lineBuff_val_2_q0);
    lineBuff_val_1_U->q0(lineBuff_val_1_q0);
    lineBuff_val_2_U = new ImageProcess_linebkb("lineBuff_val_2_U");
    lineBuff_val_2_U->clk(ap_clk);
    lineBuff_val_2_U->reset(ap_rst_n_inv);
    lineBuff_val_2_U->address0(lineBuff_val_2_address0);
    lineBuff_val_2_U->ce0(lineBuff_val_2_ce0);
    lineBuff_val_2_U->we0(lineBuff_val_2_we0);
    lineBuff_val_2_U->d0(inStream_V_data_V_0_data_out);
    lineBuff_val_2_U->q0(lineBuff_val_2_q0);
    ImageProcess_mux_eOg_U1 = new ImageProcess_mux_eOg<1,1,8,8,8,2,8>("ImageProcess_mux_eOg_U1");
    ImageProcess_mux_eOg_U1->din0(lineBuff_val_0_q0);
    ImageProcess_mux_eOg_U1->din1(lineBuff_val_1_q0);
    ImageProcess_mux_eOg_U1->din2(lineBuff_val_2_q0);
    ImageProcess_mux_eOg_U1->din3(row_assign_reg_428);
    ImageProcess_mux_eOg_U1->dout(tmp_fu_817_p5);
    ImageProcess_mux_fYi_U2 = new ImageProcess_mux_fYi<1,1,16,16,16,16,16,16,16,16,16,4,16>("ImageProcess_mux_fYi_U2");
    ImageProcess_mux_fYi_U2->din0(window_val_2_2_fu_144);
    ImageProcess_mux_fYi_U2->din1(window_val_2_2_1_fu_148);
    ImageProcess_mux_fYi_U2->din2(window_val_2_2_2_fu_152);
    ImageProcess_mux_fYi_U2->din3(window_val_2_2_3_fu_156);
    ImageProcess_mux_fYi_U2->din4(window_val_2_2_4_fu_160);
    ImageProcess_mux_fYi_U2->din5(window_val_2_2_5_fu_164);
    ImageProcess_mux_fYi_U2->din6(window_val_2_2_6_fu_168);
    ImageProcess_mux_fYi_U2->din7(window_val_2_2_7_fu_172);
    ImageProcess_mux_fYi_U2->din8(window_val_2_2_8_fu_176);
    ImageProcess_mux_fYi_U2->din9(tmp_13_fu_946_p10);
    ImageProcess_mux_fYi_U2->dout(tmp_13_fu_946_p11);
    ImageProcess_mux_fYi_U3 = new ImageProcess_mux_fYi<1,1,16,16,16,16,16,16,16,16,16,4,16>("ImageProcess_mux_fYi_U3");
    ImageProcess_mux_fYi_U3->din0(window_val_2_2_fu_144);
    ImageProcess_mux_fYi_U3->din1(window_val_2_2_1_fu_148);
    ImageProcess_mux_fYi_U3->din2(window_val_2_2_2_fu_152);
    ImageProcess_mux_fYi_U3->din3(window_val_2_2_3_fu_156);
    ImageProcess_mux_fYi_U3->din4(window_val_2_2_4_fu_160);
    ImageProcess_mux_fYi_U3->din5(window_val_2_2_5_fu_164);
    ImageProcess_mux_fYi_U3->din6(window_val_2_2_6_fu_168);
    ImageProcess_mux_fYi_U3->din7(window_val_2_2_7_fu_172);
    ImageProcess_mux_fYi_U3->din8(window_val_2_2_8_fu_176);
    ImageProcess_mux_fYi_U3->din9(tmp_12_fu_1039_p10);
    ImageProcess_mux_fYi_U3->dout(tmp_12_fu_1039_p11);
    ImageProcess_mux_fYi_U4 = new ImageProcess_mux_fYi<1,1,16,16,16,16,16,16,16,16,16,4,16>("ImageProcess_mux_fYi_U4");
    ImageProcess_mux_fYi_U4->din0(window_val_2_2_fu_144);
    ImageProcess_mux_fYi_U4->din1(window_val_2_2_1_fu_148);
    ImageProcess_mux_fYi_U4->din2(window_val_2_2_2_fu_152);
    ImageProcess_mux_fYi_U4->din3(window_val_2_2_3_fu_156);
    ImageProcess_mux_fYi_U4->din4(window_val_2_2_4_fu_160);
    ImageProcess_mux_fYi_U4->din5(window_val_2_2_5_fu_164);
    ImageProcess_mux_fYi_U4->din6(window_val_2_2_6_fu_168);
    ImageProcess_mux_fYi_U4->din7(window_val_2_2_7_fu_172);
    ImageProcess_mux_fYi_U4->din8(window_val_2_2_8_fu_176);
    ImageProcess_mux_fYi_U4->din9(tmp_11_fu_1152_p10);
    ImageProcess_mux_fYi_U4->dout(tmp_11_fu_1152_p11);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_WinCol_fu_793_p2);
    sensitive << ( col_assign_2_reg_440 );

    SC_METHOD(thread_WinRow_fu_717_p2);
    sensitive << ( row_assign_reg_428 );

    SC_METHOD(thread_accumulator_fu_1176_p2);
    sensitive << ( accumulator_1_i_reg_567 );
    sensitive << ( tmp_11_fu_1152_p11 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( tmp_10_fu_1231_p2 );

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( tmp_10_reg_1521 );

    SC_METHOD(thread_ap_block_state16);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( exitcond_fu_1243_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( or_cond_reg_1381 );
    sensitive << ( valOutput_1_reg_590 );
    sensitive << ( dataOutSideChannel_d_1_reg_617 );

    SC_METHOD(thread_ap_phi_mux_pixConvolved_1_phi_fu_610_p4);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( or_cond_reg_1381 );
    sensitive << ( pixConvolved_3_fu_1182_p2 );
    sensitive << ( pixConvolved_1_reg_607 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_col_1_fu_1207_p3);
    sensitive << ( tmp_1_fu_1189_p2 );
    sensitive << ( col_fu_1195_p2 );

    SC_METHOD(thread_col_2_fu_1137_p2);
    sensitive << ( col_assign_3_reg_579 );

    SC_METHOD(thread_col_3_fu_1024_p2);
    sensitive << ( col_assign_4_reg_533 );

    SC_METHOD(thread_col_4_fu_931_p2);
    sensitive << ( col_assign_5_reg_487 );

    SC_METHOD(thread_col_assign_1_fu_799_p2);
    sensitive << ( pixConvolved_reg_404 );
    sensitive << ( col_assign_2_cast1_fu_783_p1 );

    SC_METHOD(thread_col_assign_2_cast1_fu_783_p1);
    sensitive << ( col_assign_2_reg_440 );

    SC_METHOD(thread_col_assign_2_cast_fu_779_p1);
    sensitive << ( col_assign_2_reg_440 );

    SC_METHOD(thread_col_fu_1195_p2);
    sensitive << ( col_assign_reg_380 );

    SC_METHOD(thread_countWait_2_fu_1249_p2);
    sensitive << ( countWait_1_reg_632 );

    SC_METHOD(thread_exitcond1_fu_670_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( countWait_reg_416 );

    SC_METHOD(thread_exitcond1_i1_fu_988_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( row_assign_2_reg_498 );

    SC_METHOD(thread_exitcond1_i2_fu_895_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( row_assign_3_reg_452 );

    SC_METHOD(thread_exitcond1_i_fu_1081_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( row_assign_1_reg_544 );

    SC_METHOD(thread_exitcond2_fu_711_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( row_assign_reg_428 );

    SC_METHOD(thread_exitcond3_fu_787_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( col_assign_2_reg_440 );

    SC_METHOD(thread_exitcond_fu_1243_p2);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_block_state16_io );
    sensitive << ( countWait_1_reg_632 );

    SC_METHOD(thread_exitcond_i1_fu_1018_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( col_assign_4_reg_533 );

    SC_METHOD(thread_exitcond_i2_fu_925_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( col_assign_5_reg_487 );

    SC_METHOD(thread_exitcond_i_fu_1131_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( col_assign_3_reg_579 );

    SC_METHOD(thread_icmp7_fu_767_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_711_p2 );
    sensitive << ( tmp_3_fu_757_p4 );

    SC_METHOD(thread_icmp_fu_751_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_711_p2 );
    sensitive << ( tmp_2_fu_741_p4 );

    SC_METHOD(thread_inStream_TDATA_blk_n);
    sensitive << ( inStream_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_in);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_out);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inStream_V_data_V_0_data_out);
    sensitive << ( inStream_V_data_V_0_payload_A );
    sensitive << ( inStream_V_data_V_0_payload_B );
    sensitive << ( inStream_V_data_V_0_sel );

    SC_METHOD(thread_inStream_V_data_V_0_load_A);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_load_B);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_sel);
    sensitive << ( inStream_V_data_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_data_V_0_state_cmp_full);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_data_V_0_vld_out);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_ack_in);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_ack_out);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inStream_V_dest_V_0_data_out);
    sensitive << ( inStream_V_dest_V_0_payload_A );
    sensitive << ( inStream_V_dest_V_0_payload_B );
    sensitive << ( inStream_V_dest_V_0_sel );

    SC_METHOD(thread_inStream_V_dest_V_0_load_A);
    sensitive << ( inStream_V_dest_V_0_sel_wr );
    sensitive << ( inStream_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_dest_V_0_load_B);
    sensitive << ( inStream_V_dest_V_0_sel_wr );
    sensitive << ( inStream_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_dest_V_0_sel);
    sensitive << ( inStream_V_dest_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_dest_V_0_state_cmp_full);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_dest_V_0_vld_out);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_ack_in);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_ack_out);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inStream_V_id_V_0_data_out);
    sensitive << ( inStream_V_id_V_0_payload_A );
    sensitive << ( inStream_V_id_V_0_payload_B );
    sensitive << ( inStream_V_id_V_0_sel );

    SC_METHOD(thread_inStream_V_id_V_0_load_A);
    sensitive << ( inStream_V_id_V_0_sel_wr );
    sensitive << ( inStream_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_id_V_0_load_B);
    sensitive << ( inStream_V_id_V_0_sel_wr );
    sensitive << ( inStream_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_id_V_0_sel);
    sensitive << ( inStream_V_id_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_id_V_0_state_cmp_full);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_id_V_0_vld_out);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_ack_in);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_ack_out);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inStream_V_keep_V_0_data_out);
    sensitive << ( inStream_V_keep_V_0_payload_A );
    sensitive << ( inStream_V_keep_V_0_payload_B );
    sensitive << ( inStream_V_keep_V_0_sel );

    SC_METHOD(thread_inStream_V_keep_V_0_load_A);
    sensitive << ( inStream_V_keep_V_0_sel_wr );
    sensitive << ( inStream_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_keep_V_0_load_B);
    sensitive << ( inStream_V_keep_V_0_sel_wr );
    sensitive << ( inStream_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_keep_V_0_sel);
    sensitive << ( inStream_V_keep_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_keep_V_0_state_cmp_full);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_keep_V_0_vld_out);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_ack_in);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_ack_out);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inStream_V_strb_V_0_data_out);
    sensitive << ( inStream_V_strb_V_0_payload_A );
    sensitive << ( inStream_V_strb_V_0_payload_B );
    sensitive << ( inStream_V_strb_V_0_sel );

    SC_METHOD(thread_inStream_V_strb_V_0_load_A);
    sensitive << ( inStream_V_strb_V_0_sel_wr );
    sensitive << ( inStream_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_strb_V_0_load_B);
    sensitive << ( inStream_V_strb_V_0_sel_wr );
    sensitive << ( inStream_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_strb_V_0_sel);
    sensitive << ( inStream_V_strb_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_strb_V_0_state_cmp_full);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_strb_V_0_vld_out);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_ack_in);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_ack_out);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inStream_V_user_V_0_data_out);
    sensitive << ( inStream_V_user_V_0_payload_A );
    sensitive << ( inStream_V_user_V_0_payload_B );
    sensitive << ( inStream_V_user_V_0_sel );

    SC_METHOD(thread_inStream_V_user_V_0_load_A);
    sensitive << ( inStream_V_user_V_0_sel_wr );
    sensitive << ( inStream_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_user_V_0_load_B);
    sensitive << ( inStream_V_user_V_0_sel_wr );
    sensitive << ( inStream_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_user_V_0_sel);
    sensitive << ( inStream_V_user_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_user_V_0_state_cmp_full);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_user_V_0_vld_out);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_8_fu_832_p1 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_lineBuff_val_0_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_reg_1323 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_6_fu_805_p1 );

    SC_METHOD(thread_lineBuff_val_0_ce0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_lineBuff_val_0_we0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_lineBuff_val_1_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_676_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( lineBuff_val_1_addr_reg_1328 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_6_fu_805_p1 );

    SC_METHOD(thread_lineBuff_val_1_ce0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_lineBuff_val_1_we0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_lineBuff_val_2_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_676_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( lineBuff_val_2_addr_reg_1333 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_6_fu_805_p1 );

    SC_METHOD(thread_lineBuff_val_2_ce0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_lineBuff_val_2_we0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_maxValue_fu_970_p1);
    sensitive << ( tmp_13_fu_946_p11 );

    SC_METHOD(thread_minValue_fu_1063_p1);
    sensitive << ( tmp_12_fu_1039_p11 );

    SC_METHOD(thread_or_cond_fu_773_p2);
    sensitive << ( icmp_fu_751_p2 );
    sensitive << ( icmp7_fu_767_p2 );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( outStream_V_data_V_1_data_out );

    SC_METHOD(thread_outStream_TDATA_blk_n);
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_10_reg_1521 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_outStream_TDEST);
    sensitive << ( outStream_V_dest_V_1_data_out );

    SC_METHOD(thread_outStream_TID);
    sensitive << ( outStream_V_id_V_1_data_out );

    SC_METHOD(thread_outStream_TKEEP);
    sensitive << ( outStream_V_keep_V_1_data_out );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( outStream_V_last_V_1_data_out );

    SC_METHOD(thread_outStream_TSTRB);
    sensitive << ( outStream_V_strb_V_1_data_out );

    SC_METHOD(thread_outStream_TUSER);
    sensitive << ( outStream_V_user_V_1_data_out );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_in);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_data_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 );

    SC_METHOD(thread_outStream_V_data_V_1_data_out);
    sensitive << ( outStream_V_data_V_1_payload_A );
    sensitive << ( outStream_V_data_V_1_payload_B );
    sensitive << ( outStream_V_data_V_1_sel );

    SC_METHOD(thread_outStream_V_data_V_1_load_A);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_load_B);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_sel);
    sensitive << ( outStream_V_data_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_data_V_1_state_cmp_full);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_data_V_1_vld_out);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_ack_in);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_dest_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( tmp_dest_V_1_reg_1362 );
    sensitive << ( dataOutSideChannel_d_reg_367 );

    SC_METHOD(thread_outStream_V_dest_V_1_data_out);
    sensitive << ( outStream_V_dest_V_1_payload_A );
    sensitive << ( outStream_V_dest_V_1_payload_B );
    sensitive << ( outStream_V_dest_V_1_sel );

    SC_METHOD(thread_outStream_V_dest_V_1_load_A);
    sensitive << ( outStream_V_dest_V_1_sel_wr );
    sensitive << ( outStream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_dest_V_1_load_B);
    sensitive << ( outStream_V_dest_V_1_sel_wr );
    sensitive << ( outStream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_dest_V_1_sel);
    sensitive << ( outStream_V_dest_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_dest_V_1_state_cmp_full);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_out);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_ack_in);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_id_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( tmp_id_V_1_reg_1356 );
    sensitive << ( dataOutSideChannel_i_reg_315 );

    SC_METHOD(thread_outStream_V_id_V_1_data_out);
    sensitive << ( outStream_V_id_V_1_payload_A );
    sensitive << ( outStream_V_id_V_1_payload_B );
    sensitive << ( outStream_V_id_V_1_sel );

    SC_METHOD(thread_outStream_V_id_V_1_load_A);
    sensitive << ( outStream_V_id_V_1_sel_wr );
    sensitive << ( outStream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_id_V_1_load_B);
    sensitive << ( outStream_V_id_V_1_sel_wr );
    sensitive << ( outStream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_id_V_1_sel);
    sensitive << ( outStream_V_id_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_id_V_1_state_cmp_full);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_id_V_1_vld_out);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_ack_in);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_keep_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( tmp_keep_V_1_reg_1338 );
    sensitive << ( dataOutSideChannel_k_reg_354 );

    SC_METHOD(thread_outStream_V_keep_V_1_data_out);
    sensitive << ( outStream_V_keep_V_1_payload_A );
    sensitive << ( outStream_V_keep_V_1_payload_B );
    sensitive << ( outStream_V_keep_V_1_sel );

    SC_METHOD(thread_outStream_V_keep_V_1_load_A);
    sensitive << ( outStream_V_keep_V_1_sel_wr );
    sensitive << ( outStream_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_keep_V_1_load_B);
    sensitive << ( outStream_V_keep_V_1_sel_wr );
    sensitive << ( outStream_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_keep_V_1_sel);
    sensitive << ( outStream_V_keep_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_keep_V_1_state_cmp_full);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_out);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_in);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_last_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( tmp_last_V_fu_1255_p2 );

    SC_METHOD(thread_outStream_V_last_V_1_data_out);
    sensitive << ( outStream_V_last_V_1_payload_A );
    sensitive << ( outStream_V_last_V_1_payload_B );
    sensitive << ( outStream_V_last_V_1_sel );

    SC_METHOD(thread_outStream_V_last_V_1_load_A);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_load_B);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_sel);
    sensitive << ( outStream_V_last_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_last_V_1_state_cmp_full);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_last_V_1_vld_out);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_ack_in);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_strb_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( tmp_strb_V_1_reg_1344 );
    sensitive << ( dataOutSideChannel_s_reg_341 );

    SC_METHOD(thread_outStream_V_strb_V_1_data_out);
    sensitive << ( outStream_V_strb_V_1_payload_A );
    sensitive << ( outStream_V_strb_V_1_payload_B );
    sensitive << ( outStream_V_strb_V_1_sel );

    SC_METHOD(thread_outStream_V_strb_V_1_load_A);
    sensitive << ( outStream_V_strb_V_1_sel_wr );
    sensitive << ( outStream_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_strb_V_1_load_B);
    sensitive << ( outStream_V_strb_V_1_sel_wr );
    sensitive << ( outStream_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_strb_V_1_sel);
    sensitive << ( outStream_V_strb_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_strb_V_1_state_cmp_full);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_out);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_in);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_user_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( tmp_user_V_1_reg_1350 );
    sensitive << ( dataOutSideChannel_u_reg_328 );

    SC_METHOD(thread_outStream_V_user_V_1_data_out);
    sensitive << ( outStream_V_user_V_1_payload_A );
    sensitive << ( outStream_V_user_V_1_payload_B );
    sensitive << ( outStream_V_user_V_1_sel );

    SC_METHOD(thread_outStream_V_user_V_1_load_A);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_load_B);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_sel);
    sensitive << ( outStream_V_user_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_user_V_1_state_cmp_full);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_10_fu_1231_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_user_V_1_vld_out);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_p_s_fu_1123_p3);
    sensitive << ( tmp_14_fu_1115_p3 );
    sensitive << ( tmp_5_fu_1111_p1 );

    SC_METHOD(thread_p_shl_cast_fu_731_p1);
    sensitive << ( p_shl_fu_723_p3 );

    SC_METHOD(thread_p_shl_fu_723_p3);
    sensitive << ( row_assign_reg_428 );

    SC_METHOD(thread_p_shl_i1_fu_1004_p3);
    sensitive << ( row_assign_2_reg_498 );

    SC_METHOD(thread_p_shl_i2_fu_911_p3);
    sensitive << ( row_assign_3_reg_452 );

    SC_METHOD(thread_p_shl_i_fu_1097_p3);
    sensitive << ( row_assign_1_reg_544 );

    SC_METHOD(thread_phitmp_fu_1237_p2);
    sensitive << ( countWait_reg_416 );

    SC_METHOD(thread_pixConvolved_2_fu_1223_p3);
    sensitive << ( ap_phi_mux_pixConvolved_1_phi_fu_610_p4 );
    sensitive << ( tmp_1_fu_1189_p2 );

    SC_METHOD(thread_pixConvolved_3_fu_1182_p2);
    sensitive << ( pixConvolved_reg_404 );

    SC_METHOD(thread_row_1_fu_1215_p3);
    sensitive << ( row_reg_392 );
    sensitive << ( tmp_1_fu_1189_p2 );
    sensitive << ( row_2_fu_1201_p2 );

    SC_METHOD(thread_row_2_fu_1201_p2);
    sensitive << ( row_reg_392 );

    SC_METHOD(thread_row_3_fu_1087_p2);
    sensitive << ( row_assign_1_reg_544 );

    SC_METHOD(thread_row_4_fu_994_p2);
    sensitive << ( row_assign_2_reg_498 );

    SC_METHOD(thread_row_5_fu_901_p2);
    sensitive << ( row_assign_3_reg_452 );

    SC_METHOD(thread_row_assign_cast_fu_707_p1);
    sensitive << ( row_assign_reg_428 );

    SC_METHOD(thread_tmp_10_fu_1231_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( countWait_reg_416 );

    SC_METHOD(thread_tmp_11_fu_1152_p10);
    sensitive << ( tmp_1_i_reg_1483 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_2_i_fu_1143_p1 );

    SC_METHOD(thread_tmp_12_fu_1039_p10);
    sensitive << ( tmp_7_i_reg_1457 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_8_i_fu_1030_p1 );

    SC_METHOD(thread_tmp_12_i_fu_907_p1);
    sensitive << ( row_assign_3_reg_452 );

    SC_METHOD(thread_tmp_13_fu_946_p10);
    sensitive << ( tmp_13_i_reg_1431 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_14_i_fu_937_p1 );

    SC_METHOD(thread_tmp_13_i_fu_919_p2);
    sensitive << ( p_shl_i2_fu_911_p3 );
    sensitive << ( tmp_12_i_fu_907_p1 );

    SC_METHOD(thread_tmp_14_fu_1115_p3);
    sensitive << ( valOutput_reg_555 );

    SC_METHOD(thread_tmp_14_i_fu_937_p1);
    sensitive << ( col_assign_5_reg_487 );

    SC_METHOD(thread_tmp_1_fu_1189_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( col_assign_reg_380 );

    SC_METHOD(thread_tmp_1_i_fu_1105_p2);
    sensitive << ( p_shl_i_fu_1097_p3 );
    sensitive << ( tmp_i_fu_1093_p1 );

    SC_METHOD(thread_tmp_2_fu_741_p4);
    sensitive << ( row_reg_392 );

    SC_METHOD(thread_tmp_2_i_fu_1143_p1);
    sensitive << ( col_assign_3_reg_579 );

    SC_METHOD(thread_tmp_3_fu_757_p4);
    sensitive << ( col_assign_reg_380 );

    SC_METHOD(thread_tmp_4_fu_735_p2);
    sensitive << ( p_shl_cast_fu_731_p1 );
    sensitive << ( row_assign_cast_fu_707_p1 );

    SC_METHOD(thread_tmp_5_fu_1111_p1);
    sensitive << ( valOutput_reg_555 );

    SC_METHOD(thread_tmp_5_i_fu_1067_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_i1_fu_1018_p2 );
    sensitive << ( minValue_1_i_reg_521 );
    sensitive << ( minValue_fu_1063_p1 );

    SC_METHOD(thread_tmp_6_fu_805_p1);
    sensitive << ( col_assign_1_fu_799_p2 );

    SC_METHOD(thread_tmp_6_i_fu_1000_p1);
    sensitive << ( row_assign_2_reg_498 );

    SC_METHOD(thread_tmp_7_cast_fu_829_p1);
    sensitive << ( tmp_7_reg_1408 );

    SC_METHOD(thread_tmp_7_fu_812_p2);
    sensitive << ( tmp_4_reg_1376 );
    sensitive << ( col_assign_2_cast_fu_779_p1 );

    SC_METHOD(thread_tmp_7_i_fu_1012_p2);
    sensitive << ( p_shl_i1_fu_1004_p3 );
    sensitive << ( tmp_6_i_fu_1000_p1 );

    SC_METHOD(thread_tmp_8_fu_832_p1);
    sensitive << ( tmp_7_cast_fu_829_p1 );

    SC_METHOD(thread_tmp_8_i_fu_1030_p1);
    sensitive << ( col_assign_4_reg_533 );

    SC_METHOD(thread_tmp_i_28_fu_974_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_i2_fu_925_p2 );
    sensitive << ( maxValue_1_i_reg_475 );
    sensitive << ( maxValue_fu_970_p1 );

    SC_METHOD(thread_tmp_i_fu_1093_p1);
    sensitive << ( row_assign_1_reg_544 );

    SC_METHOD(thread_tmp_last_V_fu_1255_p2);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_block_state16_io );
    sensitive << ( countWait_1_reg_632 );

    SC_METHOD(thread_tmp_s_fu_676_p1);
    sensitive << ( col_assign_reg_380 );

    SC_METHOD(thread_valInWindow_0_maxVal_fu_980_p3);
    sensitive << ( maxValue_1_i_reg_475 );
    sensitive << ( maxValue_fu_970_p1 );
    sensitive << ( tmp_i_28_fu_974_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_fu_1073_p3);
    sensitive << ( minValue_1_i_reg_521 );
    sensitive << ( minValue_fu_1063_p1 );
    sensitive << ( tmp_5_i_fu_1067_p2 );

    SC_METHOD(thread_window_val_2_0_fu_844_p0);
    sensitive << ( kernel_q0 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_window_val_2_0_fu_844_p1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( window_val_2_0_fu_844_p10 );

    SC_METHOD(thread_window_val_2_0_fu_844_p10);
    sensitive << ( tmp_reg_1413 );

    SC_METHOD(thread_window_val_2_0_fu_844_p2);
    sensitive << ( window_val_2_0_fu_844_p0 );
    sensitive << ( window_val_2_0_fu_844_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_1243_p2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( operation_read_reg_1316 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_670_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_711_p2 );
    sensitive << ( or_cond_fu_773_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond3_fu_787_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond1_i2_fu_895_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_i2_fu_925_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond1_i1_fu_988_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_i1_fu_1018_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond1_i_fu_1081_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( exitcond_i_fu_1131_p2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state15_io );
    sensitive << ( ap_block_state16_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000001";
    inStream_V_data_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_data_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_data_V_0_state = "00";
    inStream_V_keep_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_keep_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_keep_V_0_state = "00";
    inStream_V_strb_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_strb_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_strb_V_0_state = "00";
    inStream_V_user_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_user_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_user_V_0_state = "00";
    inStream_V_id_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_id_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_id_V_0_state = "00";
    inStream_V_dest_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_dest_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_dest_V_0_state = "00";
    outStream_V_data_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_data_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_data_V_1_state = "00";
    outStream_V_keep_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_keep_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_keep_V_1_state = "00";
    outStream_V_strb_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_strb_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_strb_V_1_state = "00";
    outStream_V_user_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_user_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_user_V_1_state = "00";
    outStream_V_last_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_last_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_last_V_1_state = "00";
    outStream_V_id_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_id_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_id_V_1_state = "00";
    outStream_V_dest_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_dest_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ImageProcess_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TUSER, "(port)inStream_TUSER");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, inStream_TID, "(port)inStream_TID");
    sc_trace(mVcdFile, inStream_TDEST, "(port)inStream_TDEST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TUSER, "(port)outStream_TUSER");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, outStream_TID, "(port)outStream_TID");
    sc_trace(mVcdFile, outStream_TDEST, "(port)outStream_TDEST");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWVALID, "(port)s_axi_KERNEL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWREADY, "(port)s_axi_KERNEL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWADDR, "(port)s_axi_KERNEL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WVALID, "(port)s_axi_KERNEL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WREADY, "(port)s_axi_KERNEL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WDATA, "(port)s_axi_KERNEL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WSTRB, "(port)s_axi_KERNEL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARVALID, "(port)s_axi_KERNEL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARREADY, "(port)s_axi_KERNEL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARADDR, "(port)s_axi_KERNEL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RVALID, "(port)s_axi_KERNEL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RREADY, "(port)s_axi_KERNEL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RDATA, "(port)s_axi_KERNEL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RRESP, "(port)s_axi_KERNEL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BVALID, "(port)s_axi_KERNEL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BREADY, "(port)s_axi_KERNEL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BRESP, "(port)s_axi_KERNEL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inStream_V_data_V_0_data_out, "inStream_V_data_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_in, "inStream_V_data_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_out, "inStream_V_data_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_in, "inStream_V_data_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_out, "inStream_V_data_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_A, "inStream_V_data_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_B, "inStream_V_data_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_rd, "inStream_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_wr, "inStream_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel, "inStream_V_data_V_0_sel");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_A, "inStream_V_data_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_B, "inStream_V_data_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_state, "inStream_V_data_V_0_state");
    sc_trace(mVcdFile, inStream_V_data_V_0_state_cmp_full, "inStream_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_keep_V_0_data_out, "inStream_V_keep_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_vld_in, "inStream_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_keep_V_0_vld_out, "inStream_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_ack_in, "inStream_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_keep_V_0_ack_out, "inStream_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_payload_A, "inStream_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_keep_V_0_payload_B, "inStream_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel_rd, "inStream_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel_wr, "inStream_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel, "inStream_V_keep_V_0_sel");
    sc_trace(mVcdFile, inStream_V_keep_V_0_load_A, "inStream_V_keep_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_keep_V_0_load_B, "inStream_V_keep_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_keep_V_0_state, "inStream_V_keep_V_0_state");
    sc_trace(mVcdFile, inStream_V_keep_V_0_state_cmp_full, "inStream_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_strb_V_0_data_out, "inStream_V_strb_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_vld_in, "inStream_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_strb_V_0_vld_out, "inStream_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_ack_in, "inStream_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_strb_V_0_ack_out, "inStream_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_payload_A, "inStream_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_strb_V_0_payload_B, "inStream_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel_rd, "inStream_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel_wr, "inStream_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel, "inStream_V_strb_V_0_sel");
    sc_trace(mVcdFile, inStream_V_strb_V_0_load_A, "inStream_V_strb_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_strb_V_0_load_B, "inStream_V_strb_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_strb_V_0_state, "inStream_V_strb_V_0_state");
    sc_trace(mVcdFile, inStream_V_strb_V_0_state_cmp_full, "inStream_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_user_V_0_data_out, "inStream_V_user_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_vld_in, "inStream_V_user_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_user_V_0_vld_out, "inStream_V_user_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_ack_in, "inStream_V_user_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_user_V_0_ack_out, "inStream_V_user_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_payload_A, "inStream_V_user_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_user_V_0_payload_B, "inStream_V_user_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel_rd, "inStream_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel_wr, "inStream_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel, "inStream_V_user_V_0_sel");
    sc_trace(mVcdFile, inStream_V_user_V_0_load_A, "inStream_V_user_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_user_V_0_load_B, "inStream_V_user_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_user_V_0_state, "inStream_V_user_V_0_state");
    sc_trace(mVcdFile, inStream_V_user_V_0_state_cmp_full, "inStream_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_id_V_0_data_out, "inStream_V_id_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_vld_in, "inStream_V_id_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_id_V_0_vld_out, "inStream_V_id_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_ack_in, "inStream_V_id_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_id_V_0_ack_out, "inStream_V_id_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_payload_A, "inStream_V_id_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_id_V_0_payload_B, "inStream_V_id_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel_rd, "inStream_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel_wr, "inStream_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel, "inStream_V_id_V_0_sel");
    sc_trace(mVcdFile, inStream_V_id_V_0_load_A, "inStream_V_id_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_id_V_0_load_B, "inStream_V_id_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_id_V_0_state, "inStream_V_id_V_0_state");
    sc_trace(mVcdFile, inStream_V_id_V_0_state_cmp_full, "inStream_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_dest_V_0_data_out, "inStream_V_dest_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_vld_in, "inStream_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_dest_V_0_vld_out, "inStream_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_ack_in, "inStream_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_dest_V_0_ack_out, "inStream_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_payload_A, "inStream_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_dest_V_0_payload_B, "inStream_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel_rd, "inStream_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel_wr, "inStream_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel, "inStream_V_dest_V_0_sel");
    sc_trace(mVcdFile, inStream_V_dest_V_0_load_A, "inStream_V_dest_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_dest_V_0_load_B, "inStream_V_dest_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_dest_V_0_state, "inStream_V_dest_V_0_state");
    sc_trace(mVcdFile, inStream_V_dest_V_0_state_cmp_full, "inStream_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_data_V_1_data_in, "outStream_V_data_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_data_out, "outStream_V_data_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_in, "outStream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_out, "outStream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_in, "outStream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_out, "outStream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_A, "outStream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_B, "outStream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_rd, "outStream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_wr, "outStream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel, "outStream_V_data_V_1_sel");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_A, "outStream_V_data_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_B, "outStream_V_data_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_state, "outStream_V_data_V_1_state");
    sc_trace(mVcdFile, outStream_V_data_V_1_state_cmp_full, "outStream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_keep_V_1_data_in, "outStream_V_keep_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_data_out, "outStream_V_keep_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_in, "outStream_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_out, "outStream_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_ack_in, "outStream_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_ack_out, "outStream_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_payload_A, "outStream_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_keep_V_1_payload_B, "outStream_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel_rd, "outStream_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel_wr, "outStream_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel, "outStream_V_keep_V_1_sel");
    sc_trace(mVcdFile, outStream_V_keep_V_1_load_A, "outStream_V_keep_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_keep_V_1_load_B, "outStream_V_keep_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_keep_V_1_state, "outStream_V_keep_V_1_state");
    sc_trace(mVcdFile, outStream_V_keep_V_1_state_cmp_full, "outStream_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_strb_V_1_data_in, "outStream_V_strb_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_data_out, "outStream_V_strb_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_in, "outStream_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_out, "outStream_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_ack_in, "outStream_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_ack_out, "outStream_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_payload_A, "outStream_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_strb_V_1_payload_B, "outStream_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel_rd, "outStream_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel_wr, "outStream_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel, "outStream_V_strb_V_1_sel");
    sc_trace(mVcdFile, outStream_V_strb_V_1_load_A, "outStream_V_strb_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_strb_V_1_load_B, "outStream_V_strb_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_strb_V_1_state, "outStream_V_strb_V_1_state");
    sc_trace(mVcdFile, outStream_V_strb_V_1_state_cmp_full, "outStream_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_user_V_1_data_in, "outStream_V_user_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_data_out, "outStream_V_user_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_in, "outStream_V_user_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_out, "outStream_V_user_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_in, "outStream_V_user_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_out, "outStream_V_user_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_A, "outStream_V_user_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_B, "outStream_V_user_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_rd, "outStream_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_wr, "outStream_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel, "outStream_V_user_V_1_sel");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_A, "outStream_V_user_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_B, "outStream_V_user_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_state, "outStream_V_user_V_1_state");
    sc_trace(mVcdFile, outStream_V_user_V_1_state_cmp_full, "outStream_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_last_V_1_data_in, "outStream_V_last_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_data_out, "outStream_V_last_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_in, "outStream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_out, "outStream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_in, "outStream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_out, "outStream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_A, "outStream_V_last_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_B, "outStream_V_last_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_rd, "outStream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_wr, "outStream_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel, "outStream_V_last_V_1_sel");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_A, "outStream_V_last_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_B, "outStream_V_last_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_state, "outStream_V_last_V_1_state");
    sc_trace(mVcdFile, outStream_V_last_V_1_state_cmp_full, "outStream_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_id_V_1_data_in, "outStream_V_id_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_data_out, "outStream_V_id_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_in, "outStream_V_id_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_out, "outStream_V_id_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_ack_in, "outStream_V_id_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_ack_out, "outStream_V_id_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_payload_A, "outStream_V_id_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_id_V_1_payload_B, "outStream_V_id_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel_rd, "outStream_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel_wr, "outStream_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel, "outStream_V_id_V_1_sel");
    sc_trace(mVcdFile, outStream_V_id_V_1_load_A, "outStream_V_id_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_id_V_1_load_B, "outStream_V_id_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_id_V_1_state, "outStream_V_id_V_1_state");
    sc_trace(mVcdFile, outStream_V_id_V_1_state_cmp_full, "outStream_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_dest_V_1_data_in, "outStream_V_dest_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_data_out, "outStream_V_dest_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_in, "outStream_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_out, "outStream_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_ack_in, "outStream_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_ack_out, "outStream_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_payload_A, "outStream_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_dest_V_1_payload_B, "outStream_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel_rd, "outStream_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel_wr, "outStream_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel, "outStream_V_dest_V_1_sel");
    sc_trace(mVcdFile, outStream_V_dest_V_1_load_A, "outStream_V_dest_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_dest_V_1_load_B, "outStream_V_dest_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_dest_V_1_state, "outStream_V_dest_V_1_state");
    sc_trace(mVcdFile, outStream_V_dest_V_1_state_cmp_full, "outStream_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, kernel_address0, "kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "kernel_q0");
    sc_trace(mVcdFile, operation, "operation");
    sc_trace(mVcdFile, inStream_TDATA_blk_n, "inStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, outStream_TDATA_blk_n, "outStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_10_fu_1231_p2, "tmp_10_fu_1231_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tmp_10_reg_1521, "tmp_10_reg_1521");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, exitcond_fu_1243_p2, "exitcond_fu_1243_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, operation_read_reg_1316, "operation_read_reg_1316");
    sc_trace(mVcdFile, tmp_s_fu_676_p1, "tmp_s_fu_676_p1");
    sc_trace(mVcdFile, tmp_s_reg_1323, "tmp_s_reg_1323");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond1_fu_670_p2, "exitcond1_fu_670_p2");
    sc_trace(mVcdFile, lineBuff_val_1_addr_reg_1328, "lineBuff_val_1_addr_reg_1328");
    sc_trace(mVcdFile, lineBuff_val_2_addr_reg_1333, "lineBuff_val_2_addr_reg_1333");
    sc_trace(mVcdFile, tmp_keep_V_1_reg_1338, "tmp_keep_V_1_reg_1338");
    sc_trace(mVcdFile, tmp_strb_V_1_reg_1344, "tmp_strb_V_1_reg_1344");
    sc_trace(mVcdFile, tmp_user_V_1_reg_1350, "tmp_user_V_1_reg_1350");
    sc_trace(mVcdFile, tmp_id_V_1_reg_1356, "tmp_id_V_1_reg_1356");
    sc_trace(mVcdFile, tmp_dest_V_1_reg_1362, "tmp_dest_V_1_reg_1362");
    sc_trace(mVcdFile, WinRow_fu_717_p2, "WinRow_fu_717_p2");
    sc_trace(mVcdFile, WinRow_reg_1371, "WinRow_reg_1371");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_4_fu_735_p2, "tmp_4_fu_735_p2");
    sc_trace(mVcdFile, tmp_4_reg_1376, "tmp_4_reg_1376");
    sc_trace(mVcdFile, exitcond2_fu_711_p2, "exitcond2_fu_711_p2");
    sc_trace(mVcdFile, or_cond_fu_773_p2, "or_cond_fu_773_p2");
    sc_trace(mVcdFile, or_cond_reg_1381, "or_cond_reg_1381");
    sc_trace(mVcdFile, WinCol_fu_793_p2, "WinCol_fu_793_p2");
    sc_trace(mVcdFile, WinCol_reg_1388, "WinCol_reg_1388");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond3_fu_787_p2, "exitcond3_fu_787_p2");
    sc_trace(mVcdFile, tmp_7_fu_812_p2, "tmp_7_fu_812_p2");
    sc_trace(mVcdFile, tmp_7_reg_1408, "tmp_7_reg_1408");
    sc_trace(mVcdFile, tmp_fu_817_p5, "tmp_fu_817_p5");
    sc_trace(mVcdFile, tmp_reg_1413, "tmp_reg_1413");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, row_5_fu_901_p2, "row_5_fu_901_p2");
    sc_trace(mVcdFile, row_5_reg_1426, "row_5_reg_1426");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_13_i_fu_919_p2, "tmp_13_i_fu_919_p2");
    sc_trace(mVcdFile, tmp_13_i_reg_1431, "tmp_13_i_reg_1431");
    sc_trace(mVcdFile, exitcond1_i2_fu_895_p2, "exitcond1_i2_fu_895_p2");
    sc_trace(mVcdFile, col_4_fu_931_p2, "col_4_fu_931_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, valInWindow_0_maxVal_fu_980_p3, "valInWindow_0_maxVal_fu_980_p3");
    sc_trace(mVcdFile, exitcond_i2_fu_925_p2, "exitcond_i2_fu_925_p2");
    sc_trace(mVcdFile, row_4_fu_994_p2, "row_4_fu_994_p2");
    sc_trace(mVcdFile, row_4_reg_1452, "row_4_reg_1452");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_7_i_fu_1012_p2, "tmp_7_i_fu_1012_p2");
    sc_trace(mVcdFile, tmp_7_i_reg_1457, "tmp_7_i_reg_1457");
    sc_trace(mVcdFile, exitcond1_i1_fu_988_p2, "exitcond1_i1_fu_988_p2");
    sc_trace(mVcdFile, col_3_fu_1024_p2, "col_3_fu_1024_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, valInWindow_0_minVal_fu_1073_p3, "valInWindow_0_minVal_fu_1073_p3");
    sc_trace(mVcdFile, exitcond_i1_fu_1018_p2, "exitcond_i1_fu_1018_p2");
    sc_trace(mVcdFile, row_3_fu_1087_p2, "row_3_fu_1087_p2");
    sc_trace(mVcdFile, row_3_reg_1478, "row_3_reg_1478");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_1_i_fu_1105_p2, "tmp_1_i_fu_1105_p2");
    sc_trace(mVcdFile, tmp_1_i_reg_1483, "tmp_1_i_reg_1483");
    sc_trace(mVcdFile, exitcond1_i_fu_1081_p2, "exitcond1_i_fu_1081_p2");
    sc_trace(mVcdFile, p_s_fu_1123_p3, "p_s_fu_1123_p3");
    sc_trace(mVcdFile, col_2_fu_1137_p2, "col_2_fu_1137_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, accumulator_fu_1176_p2, "accumulator_fu_1176_p2");
    sc_trace(mVcdFile, exitcond_i_fu_1131_p2, "exitcond_i_fu_1131_p2");
    sc_trace(mVcdFile, col_1_fu_1207_p3, "col_1_fu_1207_p3");
    sc_trace(mVcdFile, col_1_reg_1506, "col_1_reg_1506");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, row_1_fu_1215_p3, "row_1_fu_1215_p3");
    sc_trace(mVcdFile, row_1_reg_1511, "row_1_reg_1511");
    sc_trace(mVcdFile, pixConvolved_2_fu_1223_p3, "pixConvolved_2_fu_1223_p3");
    sc_trace(mVcdFile, pixConvolved_2_reg_1516, "pixConvolved_2_reg_1516");
    sc_trace(mVcdFile, phitmp_fu_1237_p2, "phitmp_fu_1237_p2");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, countWait_2_fu_1249_p2, "countWait_2_fu_1249_p2");
    sc_trace(mVcdFile, countWait_2_reg_1533, "countWait_2_reg_1533");
    sc_trace(mVcdFile, ap_block_state16, "ap_block_state16");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, tmp_last_V_fu_1255_p2, "tmp_last_V_fu_1255_p2");
    sc_trace(mVcdFile, lineBuff_val_0_address0, "lineBuff_val_0_address0");
    sc_trace(mVcdFile, lineBuff_val_0_ce0, "lineBuff_val_0_ce0");
    sc_trace(mVcdFile, lineBuff_val_0_we0, "lineBuff_val_0_we0");
    sc_trace(mVcdFile, lineBuff_val_0_q0, "lineBuff_val_0_q0");
    sc_trace(mVcdFile, lineBuff_val_1_address0, "lineBuff_val_1_address0");
    sc_trace(mVcdFile, lineBuff_val_1_ce0, "lineBuff_val_1_ce0");
    sc_trace(mVcdFile, lineBuff_val_1_we0, "lineBuff_val_1_we0");
    sc_trace(mVcdFile, lineBuff_val_1_q0, "lineBuff_val_1_q0");
    sc_trace(mVcdFile, lineBuff_val_2_address0, "lineBuff_val_2_address0");
    sc_trace(mVcdFile, lineBuff_val_2_ce0, "lineBuff_val_2_ce0");
    sc_trace(mVcdFile, lineBuff_val_2_we0, "lineBuff_val_2_we0");
    sc_trace(mVcdFile, lineBuff_val_2_q0, "lineBuff_val_2_q0");
    sc_trace(mVcdFile, dataOutSideChannel_i_reg_315, "dataOutSideChannel_i_reg_315");
    sc_trace(mVcdFile, dataOutSideChannel_u_reg_328, "dataOutSideChannel_u_reg_328");
    sc_trace(mVcdFile, dataOutSideChannel_s_reg_341, "dataOutSideChannel_s_reg_341");
    sc_trace(mVcdFile, dataOutSideChannel_k_reg_354, "dataOutSideChannel_k_reg_354");
    sc_trace(mVcdFile, dataOutSideChannel_d_reg_367, "dataOutSideChannel_d_reg_367");
    sc_trace(mVcdFile, col_assign_reg_380, "col_assign_reg_380");
    sc_trace(mVcdFile, row_reg_392, "row_reg_392");
    sc_trace(mVcdFile, pixConvolved_reg_404, "pixConvolved_reg_404");
    sc_trace(mVcdFile, countWait_reg_416, "countWait_reg_416");
    sc_trace(mVcdFile, row_assign_reg_428, "row_assign_reg_428");
    sc_trace(mVcdFile, col_assign_2_reg_440, "col_assign_2_reg_440");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, row_assign_3_reg_452, "row_assign_3_reg_452");
    sc_trace(mVcdFile, maxValue_i_reg_463, "maxValue_i_reg_463");
    sc_trace(mVcdFile, maxValue_1_i_reg_475, "maxValue_1_i_reg_475");
    sc_trace(mVcdFile, col_assign_5_reg_487, "col_assign_5_reg_487");
    sc_trace(mVcdFile, row_assign_2_reg_498, "row_assign_2_reg_498");
    sc_trace(mVcdFile, minValue_i_reg_509, "minValue_i_reg_509");
    sc_trace(mVcdFile, minValue_1_i_reg_521, "minValue_1_i_reg_521");
    sc_trace(mVcdFile, col_assign_4_reg_533, "col_assign_4_reg_533");
    sc_trace(mVcdFile, row_assign_1_reg_544, "row_assign_1_reg_544");
    sc_trace(mVcdFile, valOutput_reg_555, "valOutput_reg_555");
    sc_trace(mVcdFile, accumulator_1_i_reg_567, "accumulator_1_i_reg_567");
    sc_trace(mVcdFile, col_assign_3_reg_579, "col_assign_3_reg_579");
    sc_trace(mVcdFile, valOutput_1_reg_590, "valOutput_1_reg_590");
    sc_trace(mVcdFile, pixConvolved_3_fu_1182_p2, "pixConvolved_3_fu_1182_p2");
    sc_trace(mVcdFile, ap_phi_mux_pixConvolved_1_phi_fu_610_p4, "ap_phi_mux_pixConvolved_1_phi_fu_610_p4");
    sc_trace(mVcdFile, pixConvolved_1_reg_607, "pixConvolved_1_reg_607");
    sc_trace(mVcdFile, ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4, "ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4");
    sc_trace(mVcdFile, dataOutSideChannel_d_1_reg_617, "dataOutSideChannel_d_1_reg_617");
    sc_trace(mVcdFile, countWait_1_reg_632, "countWait_1_reg_632");
    sc_trace(mVcdFile, tmp_6_fu_805_p1, "tmp_6_fu_805_p1");
    sc_trace(mVcdFile, tmp_8_fu_832_p1, "tmp_8_fu_832_p1");
    sc_trace(mVcdFile, window_val_2_2_fu_144, "window_val_2_2_fu_144");
    sc_trace(mVcdFile, window_val_2_0_fu_844_p2, "window_val_2_0_fu_844_p2");
    sc_trace(mVcdFile, window_val_2_2_1_fu_148, "window_val_2_2_1_fu_148");
    sc_trace(mVcdFile, window_val_2_2_2_fu_152, "window_val_2_2_2_fu_152");
    sc_trace(mVcdFile, window_val_2_2_3_fu_156, "window_val_2_2_3_fu_156");
    sc_trace(mVcdFile, window_val_2_2_4_fu_160, "window_val_2_2_4_fu_160");
    sc_trace(mVcdFile, window_val_2_2_5_fu_164, "window_val_2_2_5_fu_164");
    sc_trace(mVcdFile, window_val_2_2_6_fu_168, "window_val_2_2_6_fu_168");
    sc_trace(mVcdFile, window_val_2_2_7_fu_172, "window_val_2_2_7_fu_172");
    sc_trace(mVcdFile, window_val_2_2_8_fu_176, "window_val_2_2_8_fu_176");
    sc_trace(mVcdFile, p_shl_fu_723_p3, "p_shl_fu_723_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_731_p1, "p_shl_cast_fu_731_p1");
    sc_trace(mVcdFile, row_assign_cast_fu_707_p1, "row_assign_cast_fu_707_p1");
    sc_trace(mVcdFile, tmp_2_fu_741_p4, "tmp_2_fu_741_p4");
    sc_trace(mVcdFile, tmp_3_fu_757_p4, "tmp_3_fu_757_p4");
    sc_trace(mVcdFile, icmp_fu_751_p2, "icmp_fu_751_p2");
    sc_trace(mVcdFile, icmp7_fu_767_p2, "icmp7_fu_767_p2");
    sc_trace(mVcdFile, col_assign_2_cast1_fu_783_p1, "col_assign_2_cast1_fu_783_p1");
    sc_trace(mVcdFile, col_assign_1_fu_799_p2, "col_assign_1_fu_799_p2");
    sc_trace(mVcdFile, col_assign_2_cast_fu_779_p1, "col_assign_2_cast_fu_779_p1");
    sc_trace(mVcdFile, tmp_7_cast_fu_829_p1, "tmp_7_cast_fu_829_p1");
    sc_trace(mVcdFile, window_val_2_0_fu_844_p0, "window_val_2_0_fu_844_p0");
    sc_trace(mVcdFile, window_val_2_0_fu_844_p1, "window_val_2_0_fu_844_p1");
    sc_trace(mVcdFile, p_shl_i2_fu_911_p3, "p_shl_i2_fu_911_p3");
    sc_trace(mVcdFile, tmp_12_i_fu_907_p1, "tmp_12_i_fu_907_p1");
    sc_trace(mVcdFile, tmp_14_i_fu_937_p1, "tmp_14_i_fu_937_p1");
    sc_trace(mVcdFile, tmp_13_fu_946_p10, "tmp_13_fu_946_p10");
    sc_trace(mVcdFile, tmp_13_fu_946_p11, "tmp_13_fu_946_p11");
    sc_trace(mVcdFile, maxValue_fu_970_p1, "maxValue_fu_970_p1");
    sc_trace(mVcdFile, tmp_i_28_fu_974_p2, "tmp_i_28_fu_974_p2");
    sc_trace(mVcdFile, p_shl_i1_fu_1004_p3, "p_shl_i1_fu_1004_p3");
    sc_trace(mVcdFile, tmp_6_i_fu_1000_p1, "tmp_6_i_fu_1000_p1");
    sc_trace(mVcdFile, tmp_8_i_fu_1030_p1, "tmp_8_i_fu_1030_p1");
    sc_trace(mVcdFile, tmp_12_fu_1039_p10, "tmp_12_fu_1039_p10");
    sc_trace(mVcdFile, tmp_12_fu_1039_p11, "tmp_12_fu_1039_p11");
    sc_trace(mVcdFile, minValue_fu_1063_p1, "minValue_fu_1063_p1");
    sc_trace(mVcdFile, tmp_5_i_fu_1067_p2, "tmp_5_i_fu_1067_p2");
    sc_trace(mVcdFile, p_shl_i_fu_1097_p3, "p_shl_i_fu_1097_p3");
    sc_trace(mVcdFile, tmp_i_fu_1093_p1, "tmp_i_fu_1093_p1");
    sc_trace(mVcdFile, tmp_14_fu_1115_p3, "tmp_14_fu_1115_p3");
    sc_trace(mVcdFile, tmp_5_fu_1111_p1, "tmp_5_fu_1111_p1");
    sc_trace(mVcdFile, tmp_2_i_fu_1143_p1, "tmp_2_i_fu_1143_p1");
    sc_trace(mVcdFile, tmp_11_fu_1152_p10, "tmp_11_fu_1152_p10");
    sc_trace(mVcdFile, tmp_11_fu_1152_p11, "tmp_11_fu_1152_p11");
    sc_trace(mVcdFile, tmp_1_fu_1189_p2, "tmp_1_fu_1189_p2");
    sc_trace(mVcdFile, col_fu_1195_p2, "col_fu_1195_p2");
    sc_trace(mVcdFile, row_2_fu_1201_p2, "row_2_fu_1201_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, window_val_2_0_fu_844_p10, "window_val_2_0_fu_844_p10");
#endif

    }
    mHdltvinHandle.open("ImageProcess.hdltvin.dat");
    mHdltvoutHandle.open("ImageProcess.hdltvout.dat");
}

ImageProcess::~ImageProcess() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ImageProcess_CRTL_BUS_s_axi_U;
    delete ImageProcess_KERNEL_BUS_s_axi_U;
    delete lineBuff_val_0_U;
    delete lineBuff_val_1_U;
    delete lineBuff_val_2_U;
    delete ImageProcess_mux_eOg_U1;
    delete ImageProcess_mux_fYi_U2;
    delete ImageProcess_mux_fYi_U3;
    delete ImageProcess_mux_fYi_U4;
}

void ImageProcess::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ImageProcess::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(exitcond1_i_fu_1081_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        accumulator_1_i_reg_567 = valOutput_reg_555.read();
    } else if ((esl_seteq<1,1,1>(exitcond_i_fu_1131_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        accumulator_1_i_reg_567 = accumulator_fu_1176_p2.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        col_assign_2_reg_440 = WinCol_reg_1388.read();
    } else if ((esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        col_assign_2_reg_440 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_i_fu_1081_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        col_assign_3_reg_579 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i_fu_1131_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        col_assign_3_reg_579 = col_2_fu_1137_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_i1_fu_988_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        col_assign_4_reg_533 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i1_fu_1018_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        col_assign_4_reg_533 = col_3_fu_1024_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_i2_fu_895_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        col_assign_5_reg_487 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i2_fu_925_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        col_assign_5_reg_487 = col_4_fu_931_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state15_io.read()))) {
        col_assign_reg_380 = col_1_reg_1506.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        col_assign_reg_380 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_670_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        countWait_1_reg_632 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        countWait_1_reg_632 = countWait_2_reg_1533.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state15_io.read()))) {
        countWait_reg_416 = phitmp_fu_1237_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        countWait_reg_416 = ap_const_lv17_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_0))) {
        dataOutSideChannel_d_1_reg_617 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1381.read()))) {
        dataOutSideChannel_d_1_reg_617 = valOutput_1_reg_590.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_out.read()))) {
            inStream_V_data_V_0_sel_rd =  (sc_logic) (~inStream_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_in.read()))) {
            inStream_V_data_V_0_sel_wr =  (sc_logic) (~inStream_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            inStream_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()))))) {
            inStream_V_data_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_out.read()))) {
            inStream_V_dest_V_0_sel_rd =  (sc_logic) (~inStream_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_in.read()))) {
            inStream_V_dest_V_0_sel_wr =  (sc_logic) (~inStream_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()))))) {
            inStream_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_out.read()))) {
            inStream_V_id_V_0_sel_rd =  (sc_logic) (~inStream_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_in.read()))) {
            inStream_V_id_V_0_sel_wr =  (sc_logic) (~inStream_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_id_V_0_state.read())))) {
            inStream_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_id_V_0_state.read())))) {
            inStream_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()))))) {
            inStream_V_id_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_out.read()))) {
            inStream_V_keep_V_0_sel_rd =  (sc_logic) (~inStream_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_in.read()))) {
            inStream_V_keep_V_0_sel_wr =  (sc_logic) (~inStream_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_keep_V_0_state.read())))) {
            inStream_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_keep_V_0_state.read())))) {
            inStream_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()))))) {
            inStream_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_out.read()))) {
            inStream_V_strb_V_0_sel_rd =  (sc_logic) (~inStream_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_in.read()))) {
            inStream_V_strb_V_0_sel_wr =  (sc_logic) (~inStream_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_strb_V_0_state.read())))) {
            inStream_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_strb_V_0_state.read())))) {
            inStream_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()))))) {
            inStream_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_out.read()))) {
            inStream_V_user_V_0_sel_rd =  (sc_logic) (~inStream_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_in.read()))) {
            inStream_V_user_V_0_sel_wr =  (sc_logic) (~inStream_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_user_V_0_state.read())))) {
            inStream_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_user_V_0_state.read())))) {
            inStream_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()))))) {
            inStream_V_user_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond1_i2_fu_895_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        maxValue_1_i_reg_475 = maxValue_i_reg_463.read();
    } else if ((esl_seteq<1,1,1>(exitcond_i2_fu_925_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        maxValue_1_i_reg_475 = valInWindow_0_maxVal_fu_980_p3.read();
    }
    if ((esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_2) && 
         esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        maxValue_i_reg_463 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i2_fu_925_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        maxValue_i_reg_463 = maxValue_1_i_reg_475.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_i1_fu_988_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        minValue_1_i_reg_521 = minValue_i_reg_509.read();
    } else if ((esl_seteq<1,1,1>(exitcond_i1_fu_1018_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        minValue_1_i_reg_521 = valInWindow_0_minVal_fu_1073_p3.read();
    }
    if ((esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_1) && 
         esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        minValue_i_reg_509 = ap_const_lv8_FF;
    } else if ((esl_seteq<1,1,1>(exitcond_i1_fu_1018_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        minValue_i_reg_509 = minValue_1_i_reg_521.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_out.read()))) {
            outStream_V_data_V_1_sel_rd =  (sc_logic) (~outStream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_in.read()))) {
            outStream_V_data_V_1_sel_wr =  (sc_logic) (~outStream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_data_V_1_state.read())))) {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_data_V_1_state.read())))) {
            outStream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()))))) {
            outStream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_out.read()))) {
            outStream_V_dest_V_1_sel_rd =  (sc_logic) (~outStream_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_in.read()))) {
            outStream_V_dest_V_1_sel_wr =  (sc_logic) (~outStream_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()))))) {
            outStream_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_out.read()))) {
            outStream_V_id_V_1_sel_rd =  (sc_logic) (~outStream_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_in.read()))) {
            outStream_V_id_V_1_sel_wr =  (sc_logic) (~outStream_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()))))) {
            outStream_V_id_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_out.read()))) {
            outStream_V_keep_V_1_sel_rd =  (sc_logic) (~outStream_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_in.read()))) {
            outStream_V_keep_V_1_sel_wr =  (sc_logic) (~outStream_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()))))) {
            outStream_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_out.read()))) {
            outStream_V_last_V_1_sel_rd =  (sc_logic) (~outStream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_in.read()))) {
            outStream_V_last_V_1_sel_wr =  (sc_logic) (~outStream_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()))))) {
            outStream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_out.read()))) {
            outStream_V_strb_V_1_sel_rd =  (sc_logic) (~outStream_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_in.read()))) {
            outStream_V_strb_V_1_sel_wr =  (sc_logic) (~outStream_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()))))) {
            outStream_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_out.read()))) {
            outStream_V_user_V_1_sel_rd =  (sc_logic) (~outStream_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_in.read()))) {
            outStream_V_user_V_1_sel_wr =  (sc_logic) (~outStream_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()))))) {
            outStream_V_user_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_0))) {
        pixConvolved_1_reg_607 = pixConvolved_reg_404.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1381.read()))) {
        pixConvolved_1_reg_607 = pixConvolved_3_fu_1182_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state15_io.read()))) {
        pixConvolved_reg_404 = pixConvolved_2_reg_1516.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        pixConvolved_reg_404 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        row_assign_1_reg_544 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i_fu_1131_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        row_assign_1_reg_544 = row_3_reg_1478.read();
    }
    if ((esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_1) && 
         esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        row_assign_2_reg_498 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i1_fu_1018_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        row_assign_2_reg_498 = row_4_reg_1452.read();
    }
    if ((esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_2) && 
         esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        row_assign_3_reg_452 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i2_fu_925_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        row_assign_3_reg_452 = row_5_reg_1426.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_787_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        row_assign_reg_428 = WinRow_reg_1371.read();
    } else if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        row_assign_reg_428 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state15_io.read()))) {
        row_reg_392 = row_1_reg_1511.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        row_reg_392 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_i1_fu_988_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        valOutput_1_reg_590 = minValue_i_reg_509.read();
    } else if ((esl_seteq<1,1,1>(exitcond1_i2_fu_895_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        valOutput_1_reg_590 = maxValue_i_reg_463.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && 
                !esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_2) && 
                !esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_1) && 
                !esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_0))) {
        valOutput_1_reg_590 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(exitcond1_i_fu_1081_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        valOutput_1_reg_590 = p_s_fu_1123_p3.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        valOutput_reg_555 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i_fu_1131_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        valOutput_reg_555 = accumulator_1_i_reg_567.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        WinCol_reg_1388 = WinCol_fu_793_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        WinRow_reg_1371 = WinRow_fu_717_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read()))) {
        col_1_reg_1506 = col_1_fu_1207_p3.read();
        pixConvolved_2_reg_1516 = pixConvolved_2_fu_1223_p3.read();
        row_1_reg_1511 = row_1_fu_1215_p3.read();
        tmp_10_reg_1521 = tmp_10_fu_1231_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)))) {
        countWait_2_reg_1533 = countWait_2_fu_1249_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state15_io.read()))) {
        dataOutSideChannel_d_reg_367 = tmp_dest_V_1_reg_1362.read();
        dataOutSideChannel_i_reg_315 = tmp_id_V_1_reg_1356.read();
        dataOutSideChannel_k_reg_354 = tmp_keep_V_1_reg_1338.read();
        dataOutSideChannel_s_reg_341 = tmp_strb_V_1_reg_1344.read();
        dataOutSideChannel_u_reg_328 = tmp_user_V_1_reg_1350.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_A.read())) {
        inStream_V_data_V_0_payload_A = inStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_B.read())) {
        inStream_V_data_V_0_payload_B = inStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_load_A.read())) {
        inStream_V_dest_V_0_payload_A = inStream_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_load_B.read())) {
        inStream_V_dest_V_0_payload_B = inStream_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_load_A.read())) {
        inStream_V_id_V_0_payload_A = inStream_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_load_B.read())) {
        inStream_V_id_V_0_payload_B = inStream_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_load_A.read())) {
        inStream_V_keep_V_0_payload_A = inStream_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_load_B.read())) {
        inStream_V_keep_V_0_payload_B = inStream_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_load_A.read())) {
        inStream_V_strb_V_0_payload_A = inStream_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_load_B.read())) {
        inStream_V_strb_V_0_payload_B = inStream_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_load_A.read())) {
        inStream_V_user_V_0_payload_A = inStream_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_load_B.read())) {
        inStream_V_user_V_0_payload_B = inStream_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_670_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        lineBuff_val_1_addr_reg_1328 =  (sc_lv<9>) (tmp_s_fu_676_p1.read());
        lineBuff_val_2_addr_reg_1333 =  (sc_lv<9>) (tmp_s_fu_676_p1.read());
        tmp_s_reg_1323 = tmp_s_fu_676_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        operation_read_reg_1316 = operation.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1))) {
        or_cond_reg_1381 = or_cond_fu_773_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_A.read())) {
        outStream_V_data_V_1_payload_A = outStream_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_B.read())) {
        outStream_V_data_V_1_payload_B = outStream_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_load_A.read())) {
        outStream_V_dest_V_1_payload_A = outStream_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_load_B.read())) {
        outStream_V_dest_V_1_payload_B = outStream_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_load_A.read())) {
        outStream_V_id_V_1_payload_A = outStream_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_load_B.read())) {
        outStream_V_id_V_1_payload_B = outStream_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_load_A.read())) {
        outStream_V_keep_V_1_payload_A = outStream_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_load_B.read())) {
        outStream_V_keep_V_1_payload_B = outStream_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_A.read())) {
        outStream_V_last_V_1_payload_A = outStream_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_B.read())) {
        outStream_V_last_V_1_payload_B = outStream_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_load_A.read())) {
        outStream_V_strb_V_1_payload_A = outStream_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_load_B.read())) {
        outStream_V_strb_V_1_payload_B = outStream_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_A.read())) {
        outStream_V_user_V_1_payload_A = outStream_V_user_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_B.read())) {
        outStream_V_user_V_1_payload_B = outStream_V_user_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        row_3_reg_1478 = row_3_fu_1087_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        row_4_reg_1452 = row_4_fu_994_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        row_5_reg_1426 = row_5_fu_901_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_i2_fu_895_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        tmp_13_i_reg_1431 = tmp_13_i_fu_919_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_i_fu_1081_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        tmp_1_i_reg_1483 = tmp_1_i_fu_1105_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_4_reg_1376 = tmp_4_fu_735_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_i1_fu_988_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        tmp_7_i_reg_1457 = tmp_7_i_fu_1012_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_787_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        tmp_7_reg_1408 = tmp_7_fu_812_p2.read();
    }
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_dest_V_1_reg_1362 = inStream_V_dest_V_0_data_out.read();
        tmp_id_V_1_reg_1356 = inStream_V_id_V_0_data_out.read();
        tmp_keep_V_1_reg_1338 = inStream_V_keep_V_0_data_out.read();
        tmp_strb_V_1_reg_1344 = inStream_V_strb_V_0_data_out.read();
        tmp_user_V_1_reg_1350 = inStream_V_user_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_reg_1413 = tmp_fu_817_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, row_assign_reg_428.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, col_assign_2_reg_440.read()))) {
        window_val_2_2_1_fu_148 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, row_assign_reg_428.read()) && !esl_seteq<1,2,2>(ap_const_lv2_0, col_assign_2_reg_440.read()) && !esl_seteq<1,2,2>(ap_const_lv2_1, col_assign_2_reg_440.read()))) {
        window_val_2_2_2_fu_152 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, col_assign_2_reg_440.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, row_assign_reg_428.read()))) {
        window_val_2_2_3_fu_156 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, col_assign_2_reg_440.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, row_assign_reg_428.read()))) {
        window_val_2_2_4_fu_160 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !esl_seteq<1,2,2>(ap_const_lv2_0, col_assign_2_reg_440.read()) && !esl_seteq<1,2,2>(ap_const_lv2_1, col_assign_2_reg_440.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, row_assign_reg_428.read()))) {
        window_val_2_2_5_fu_164 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, col_assign_2_reg_440.read()) && !esl_seteq<1,2,2>(ap_const_lv2_0, row_assign_reg_428.read()) && !esl_seteq<1,2,2>(ap_const_lv2_1, row_assign_reg_428.read()))) {
        window_val_2_2_6_fu_168 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, col_assign_2_reg_440.read()) && !esl_seteq<1,2,2>(ap_const_lv2_0, row_assign_reg_428.read()) && !esl_seteq<1,2,2>(ap_const_lv2_1, row_assign_reg_428.read()))) {
        window_val_2_2_7_fu_172 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !esl_seteq<1,2,2>(ap_const_lv2_0, col_assign_2_reg_440.read()) && !esl_seteq<1,2,2>(ap_const_lv2_1, col_assign_2_reg_440.read()) && !esl_seteq<1,2,2>(ap_const_lv2_0, row_assign_reg_428.read()) && !esl_seteq<1,2,2>(ap_const_lv2_1, row_assign_reg_428.read()))) {
        window_val_2_2_8_fu_176 = window_val_2_0_fu_844_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, row_assign_reg_428.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, col_assign_2_reg_440.read()))) {
        window_val_2_2_fu_144 = window_val_2_0_fu_844_p2.read();
    }
}

void ImageProcess::thread_WinCol_fu_793_p2() {
    WinCol_fu_793_p2 = (!col_assign_2_reg_440.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_assign_2_reg_440.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_WinRow_fu_717_p2() {
    WinRow_fu_717_p2 = (!row_assign_reg_428.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_assign_reg_428.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_accumulator_fu_1176_p2() {
    accumulator_fu_1176_p2 = (!tmp_11_fu_1152_p11.read().is_01() || !accumulator_1_i_reg_567.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_11_fu_1152_p11.read()) + sc_biguint<16>(accumulator_1_i_reg_567.read()));
}

void ImageProcess::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ImageProcess::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void ImageProcess::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void ImageProcess::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void ImageProcess::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void ImageProcess::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void ImageProcess::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void ImageProcess::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void ImageProcess::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void ImageProcess::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ImageProcess::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ImageProcess::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ImageProcess::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void ImageProcess::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void ImageProcess::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void ImageProcess::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void ImageProcess::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void ImageProcess::thread_ap_block_state14_io() {
    ap_block_state14_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void ImageProcess::thread_ap_block_state15_io() {
    ap_block_state15_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_reg_1521.read()) && esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void ImageProcess::thread_ap_block_state16() {
    ap_block_state16 = (esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0));
}

void ImageProcess::thread_ap_block_state16_io() {
    ap_block_state16_io = (esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void ImageProcess::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ImageProcess::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ImageProcess::thread_ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1381.read()))) {
        ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 = valOutput_1_reg_590.read();
    } else {
        ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 = dataOutSideChannel_d_1_reg_617.read();
    }
}

void ImageProcess::thread_ap_phi_mux_pixConvolved_1_phi_fu_610_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1381.read()))) {
        ap_phi_mux_pixConvolved_1_phi_fu_610_p4 = pixConvolved_3_fu_1182_p2.read();
    } else {
        ap_phi_mux_pixConvolved_1_phi_fu_610_p4 = pixConvolved_1_reg_607.read();
    }
}

void ImageProcess::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ImageProcess::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ImageProcess::thread_col_1_fu_1207_p3() {
    col_1_fu_1207_p3 = (!tmp_1_fu_1189_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_1_fu_1189_p2.read()[0].to_bool())? col_fu_1195_p2.read(): ap_const_lv32_0);
}

void ImageProcess::thread_col_2_fu_1137_p2() {
    col_2_fu_1137_p2 = (!col_assign_3_reg_579.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_assign_3_reg_579.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_col_3_fu_1024_p2() {
    col_3_fu_1024_p2 = (!col_assign_4_reg_533.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_assign_4_reg_533.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_col_4_fu_931_p2() {
    col_4_fu_931_p2 = (!col_assign_5_reg_487.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_assign_5_reg_487.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_col_assign_1_fu_799_p2() {
    col_assign_1_fu_799_p2 = (!pixConvolved_reg_404.read().is_01() || !col_assign_2_cast1_fu_783_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(pixConvolved_reg_404.read()) + sc_biguint<32>(col_assign_2_cast1_fu_783_p1.read()));
}

void ImageProcess::thread_col_assign_2_cast1_fu_783_p1() {
    col_assign_2_cast1_fu_783_p1 = esl_zext<32,2>(col_assign_2_reg_440.read());
}

void ImageProcess::thread_col_assign_2_cast_fu_779_p1() {
    col_assign_2_cast_fu_779_p1 = esl_zext<5,2>(col_assign_2_reg_440.read());
}

void ImageProcess::thread_col_fu_1195_p2() {
    col_fu_1195_p2 = (!col_assign_reg_380.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(col_assign_reg_380.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ImageProcess::thread_countWait_2_fu_1249_p2() {
    countWait_2_fu_1249_p2 = (!countWait_1_reg_632.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(countWait_1_reg_632.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void ImageProcess::thread_exitcond1_fu_670_p2() {
    exitcond1_fu_670_p2 = (!countWait_reg_416.read().is_01() || !ap_const_lv17_12C01.is_01())? sc_lv<1>(): sc_lv<1>(countWait_reg_416.read() == ap_const_lv17_12C01);
}

void ImageProcess::thread_exitcond1_i1_fu_988_p2() {
    exitcond1_i1_fu_988_p2 = (!row_assign_2_reg_498.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_2_reg_498.read() == ap_const_lv2_3);
}

void ImageProcess::thread_exitcond1_i2_fu_895_p2() {
    exitcond1_i2_fu_895_p2 = (!row_assign_3_reg_452.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_3_reg_452.read() == ap_const_lv2_3);
}

void ImageProcess::thread_exitcond1_i_fu_1081_p2() {
    exitcond1_i_fu_1081_p2 = (!row_assign_1_reg_544.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_1_reg_544.read() == ap_const_lv2_3);
}

void ImageProcess::thread_exitcond2_fu_711_p2() {
    exitcond2_fu_711_p2 = (!row_assign_reg_428.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_reg_428.read() == ap_const_lv2_3);
}

void ImageProcess::thread_exitcond3_fu_787_p2() {
    exitcond3_fu_787_p2 = (!col_assign_2_reg_440.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_2_reg_440.read() == ap_const_lv2_3);
}

void ImageProcess::thread_exitcond_fu_1243_p2() {
    exitcond_fu_1243_p2 = (!countWait_1_reg_632.read().is_01() || !ap_const_lv9_141.is_01())? sc_lv<1>(): sc_lv<1>(countWait_1_reg_632.read() == ap_const_lv9_141);
}

void ImageProcess::thread_exitcond_i1_fu_1018_p2() {
    exitcond_i1_fu_1018_p2 = (!col_assign_4_reg_533.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_4_reg_533.read() == ap_const_lv2_3);
}

void ImageProcess::thread_exitcond_i2_fu_925_p2() {
    exitcond_i2_fu_925_p2 = (!col_assign_5_reg_487.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_5_reg_487.read() == ap_const_lv2_3);
}

void ImageProcess::thread_exitcond_i_fu_1131_p2() {
    exitcond_i_fu_1131_p2 = (!col_assign_3_reg_579.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_3_reg_579.read() == ap_const_lv2_3);
}

void ImageProcess::thread_icmp7_fu_767_p2() {
    icmp7_fu_767_p2 = (!tmp_3_fu_757_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_3_fu_757_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void ImageProcess::thread_icmp_fu_751_p2() {
    icmp_fu_751_p2 = (!tmp_2_fu_741_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_2_fu_741_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void ImageProcess::thread_inStream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        inStream_TDATA_blk_n = inStream_V_data_V_0_state.read()[0];
    } else {
        inStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void ImageProcess::thread_inStream_TREADY() {
    inStream_TREADY = inStream_V_dest_V_0_state.read()[1];
}

void ImageProcess::thread_inStream_V_data_V_0_ack_in() {
    inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state.read()[1];
}

void ImageProcess::thread_inStream_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        inStream_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void ImageProcess::thread_inStream_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_sel.read())) {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B.read();
    } else {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A.read();
    }
}

void ImageProcess::thread_inStream_V_data_V_0_load_A() {
    inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full.read() & ~inStream_V_data_V_0_sel_wr.read());
}

void ImageProcess::thread_inStream_V_data_V_0_load_B() {
    inStream_V_data_V_0_load_B = (inStream_V_data_V_0_sel_wr.read() & inStream_V_data_V_0_state_cmp_full.read());
}

void ImageProcess::thread_inStream_V_data_V_0_sel() {
    inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd.read();
}

void ImageProcess::thread_inStream_V_data_V_0_state_cmp_full() {
    inStream_V_data_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_inStream_V_data_V_0_vld_in() {
    inStream_V_data_V_0_vld_in = inStream_TVALID.read();
}

void ImageProcess::thread_inStream_V_data_V_0_vld_out() {
    inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state.read()[0];
}

void ImageProcess::thread_inStream_V_dest_V_0_ack_in() {
    inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state.read()[1];
}

void ImageProcess::thread_inStream_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        inStream_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void ImageProcess::thread_inStream_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_sel.read())) {
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B.read();
    } else {
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A.read();
    }
}

void ImageProcess::thread_inStream_V_dest_V_0_load_A() {
    inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full.read() & ~inStream_V_dest_V_0_sel_wr.read());
}

void ImageProcess::thread_inStream_V_dest_V_0_load_B() {
    inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_sel_wr.read() & inStream_V_dest_V_0_state_cmp_full.read());
}

void ImageProcess::thread_inStream_V_dest_V_0_sel() {
    inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd.read();
}

void ImageProcess::thread_inStream_V_dest_V_0_state_cmp_full() {
    inStream_V_dest_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_inStream_V_dest_V_0_vld_in() {
    inStream_V_dest_V_0_vld_in = inStream_TVALID.read();
}

void ImageProcess::thread_inStream_V_dest_V_0_vld_out() {
    inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state.read()[0];
}

void ImageProcess::thread_inStream_V_id_V_0_ack_in() {
    inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state.read()[1];
}

void ImageProcess::thread_inStream_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        inStream_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void ImageProcess::thread_inStream_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_sel.read())) {
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B.read();
    } else {
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A.read();
    }
}

void ImageProcess::thread_inStream_V_id_V_0_load_A() {
    inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full.read() & ~inStream_V_id_V_0_sel_wr.read());
}

void ImageProcess::thread_inStream_V_id_V_0_load_B() {
    inStream_V_id_V_0_load_B = (inStream_V_id_V_0_sel_wr.read() & inStream_V_id_V_0_state_cmp_full.read());
}

void ImageProcess::thread_inStream_V_id_V_0_sel() {
    inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd.read();
}

void ImageProcess::thread_inStream_V_id_V_0_state_cmp_full() {
    inStream_V_id_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_inStream_V_id_V_0_vld_in() {
    inStream_V_id_V_0_vld_in = inStream_TVALID.read();
}

void ImageProcess::thread_inStream_V_id_V_0_vld_out() {
    inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state.read()[0];
}

void ImageProcess::thread_inStream_V_keep_V_0_ack_in() {
    inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state.read()[1];
}

void ImageProcess::thread_inStream_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        inStream_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void ImageProcess::thread_inStream_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_sel.read())) {
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B.read();
    } else {
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A.read();
    }
}

void ImageProcess::thread_inStream_V_keep_V_0_load_A() {
    inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full.read() & ~inStream_V_keep_V_0_sel_wr.read());
}

void ImageProcess::thread_inStream_V_keep_V_0_load_B() {
    inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_sel_wr.read() & inStream_V_keep_V_0_state_cmp_full.read());
}

void ImageProcess::thread_inStream_V_keep_V_0_sel() {
    inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd.read();
}

void ImageProcess::thread_inStream_V_keep_V_0_state_cmp_full() {
    inStream_V_keep_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_inStream_V_keep_V_0_vld_in() {
    inStream_V_keep_V_0_vld_in = inStream_TVALID.read();
}

void ImageProcess::thread_inStream_V_keep_V_0_vld_out() {
    inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state.read()[0];
}

void ImageProcess::thread_inStream_V_strb_V_0_ack_in() {
    inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state.read()[1];
}

void ImageProcess::thread_inStream_V_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        inStream_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void ImageProcess::thread_inStream_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_sel.read())) {
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B.read();
    } else {
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A.read();
    }
}

void ImageProcess::thread_inStream_V_strb_V_0_load_A() {
    inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full.read() & ~inStream_V_strb_V_0_sel_wr.read());
}

void ImageProcess::thread_inStream_V_strb_V_0_load_B() {
    inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_sel_wr.read() & inStream_V_strb_V_0_state_cmp_full.read());
}

void ImageProcess::thread_inStream_V_strb_V_0_sel() {
    inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd.read();
}

void ImageProcess::thread_inStream_V_strb_V_0_state_cmp_full() {
    inStream_V_strb_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_inStream_V_strb_V_0_vld_in() {
    inStream_V_strb_V_0_vld_in = inStream_TVALID.read();
}

void ImageProcess::thread_inStream_V_strb_V_0_vld_out() {
    inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state.read()[0];
}

void ImageProcess::thread_inStream_V_user_V_0_ack_in() {
    inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state.read()[1];
}

void ImageProcess::thread_inStream_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        inStream_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void ImageProcess::thread_inStream_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_sel.read())) {
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B.read();
    } else {
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A.read();
    }
}

void ImageProcess::thread_inStream_V_user_V_0_load_A() {
    inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full.read() & ~inStream_V_user_V_0_sel_wr.read());
}

void ImageProcess::thread_inStream_V_user_V_0_load_B() {
    inStream_V_user_V_0_load_B = (inStream_V_user_V_0_sel_wr.read() & inStream_V_user_V_0_state_cmp_full.read());
}

void ImageProcess::thread_inStream_V_user_V_0_sel() {
    inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd.read();
}

void ImageProcess::thread_inStream_V_user_V_0_state_cmp_full() {
    inStream_V_user_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_inStream_V_user_V_0_vld_in() {
    inStream_V_user_V_0_vld_in = inStream_TVALID.read();
}

void ImageProcess::thread_inStream_V_user_V_0_vld_out() {
    inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state.read()[0];
}

void ImageProcess::thread_kernel_address0() {
    kernel_address0 =  (sc_lv<4>) (tmp_8_fu_832_p1.read());
}

void ImageProcess::thread_kernel_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void ImageProcess::thread_lineBuff_val_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        lineBuff_val_0_address0 =  (sc_lv<9>) (tmp_6_fu_805_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        lineBuff_val_0_address0 =  (sc_lv<9>) (tmp_s_reg_1323.read());
    } else {
        lineBuff_val_0_address0 = "XXXXXXXXX";
    }
}

void ImageProcess::thread_lineBuff_val_0_ce0() {
    if (((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        lineBuff_val_0_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_ce0 = ap_const_logic_0;
    }
}

void ImageProcess::thread_lineBuff_val_0_we0() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        lineBuff_val_0_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_we0 = ap_const_logic_0;
    }
}

void ImageProcess::thread_lineBuff_val_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        lineBuff_val_1_address0 =  (sc_lv<9>) (tmp_6_fu_805_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_1328.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        lineBuff_val_1_address0 =  (sc_lv<9>) (tmp_s_fu_676_p1.read());
    } else {
        lineBuff_val_1_address0 = "XXXXXXXXX";
    }
}

void ImageProcess::thread_lineBuff_val_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        lineBuff_val_1_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_ce0 = ap_const_logic_0;
    }
}

void ImageProcess::thread_lineBuff_val_1_we0() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        lineBuff_val_1_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_we0 = ap_const_logic_0;
    }
}

void ImageProcess::thread_lineBuff_val_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        lineBuff_val_2_address0 =  (sc_lv<9>) (tmp_6_fu_805_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_1333.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        lineBuff_val_2_address0 =  (sc_lv<9>) (tmp_s_fu_676_p1.read());
    } else {
        lineBuff_val_2_address0 = "XXXXXXXXX";
    }
}

void ImageProcess::thread_lineBuff_val_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        lineBuff_val_2_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_ce0 = ap_const_logic_0;
    }
}

void ImageProcess::thread_lineBuff_val_2_we0() {
    if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        lineBuff_val_2_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_we0 = ap_const_logic_0;
    }
}

void ImageProcess::thread_maxValue_fu_970_p1() {
    maxValue_fu_970_p1 = tmp_13_fu_946_p11.read().range(8-1, 0);
}

void ImageProcess::thread_minValue_fu_1063_p1() {
    minValue_fu_1063_p1 = tmp_12_fu_1039_p11.read().range(8-1, 0);
}

void ImageProcess::thread_or_cond_fu_773_p2() {
    or_cond_fu_773_p2 = (icmp_fu_751_p2.read() & icmp7_fu_767_p2.read());
}

void ImageProcess::thread_outStream_TDATA() {
    outStream_TDATA = outStream_V_data_V_1_data_out.read();
}

void ImageProcess::thread_outStream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_reg_1521.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        outStream_TDATA_blk_n = outStream_V_data_V_1_state.read()[1];
    } else {
        outStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void ImageProcess::thread_outStream_TDEST() {
    outStream_TDEST = outStream_V_dest_V_1_data_out.read();
}

void ImageProcess::thread_outStream_TID() {
    outStream_TID = outStream_V_id_V_1_data_out.read();
}

void ImageProcess::thread_outStream_TKEEP() {
    outStream_TKEEP = outStream_V_keep_V_1_data_out.read();
}

void ImageProcess::thread_outStream_TLAST() {
    outStream_TLAST = outStream_V_last_V_1_data_out.read();
}

void ImageProcess::thread_outStream_TSTRB() {
    outStream_TSTRB = outStream_V_strb_V_1_data_out.read();
}

void ImageProcess::thread_outStream_TUSER() {
    outStream_TUSER = outStream_V_user_V_1_data_out.read();
}

void ImageProcess::thread_outStream_TVALID() {
    outStream_TVALID = outStream_V_dest_V_1_state.read()[0];
}

void ImageProcess::thread_outStream_V_data_V_1_ack_in() {
    outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state.read()[1];
}

void ImageProcess::thread_outStream_V_data_V_1_ack_out() {
    outStream_V_data_V_1_ack_out = outStream_TREADY.read();
}

void ImageProcess::thread_outStream_V_data_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_data_V_1_data_in = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()))) {
        outStream_V_data_V_1_data_in = ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4.read();
    } else {
        outStream_V_data_V_1_data_in =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void ImageProcess::thread_outStream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_sel.read())) {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B.read();
    } else {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A.read();
    }
}

void ImageProcess::thread_outStream_V_data_V_1_load_A() {
    outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full.read() & ~outStream_V_data_V_1_sel_wr.read());
}

void ImageProcess::thread_outStream_V_data_V_1_load_B() {
    outStream_V_data_V_1_load_B = (outStream_V_data_V_1_sel_wr.read() & outStream_V_data_V_1_state_cmp_full.read());
}

void ImageProcess::thread_outStream_V_data_V_1_sel() {
    outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd.read();
}

void ImageProcess::thread_outStream_V_data_V_1_state_cmp_full() {
    outStream_V_data_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_outStream_V_data_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read())))) {
        outStream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void ImageProcess::thread_outStream_V_data_V_1_vld_out() {
    outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state.read()[0];
}

void ImageProcess::thread_outStream_V_dest_V_1_ack_in() {
    outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state.read()[1];
}

void ImageProcess::thread_outStream_V_dest_V_1_ack_out() {
    outStream_V_dest_V_1_ack_out = outStream_TREADY.read();
}

void ImageProcess::thread_outStream_V_dest_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_dest_V_1_data_in = dataOutSideChannel_d_reg_367.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()))) {
        outStream_V_dest_V_1_data_in = tmp_dest_V_1_reg_1362.read();
    } else {
        outStream_V_dest_V_1_data_in =  (sc_lv<6>) ("XXXXXX");
    }
}

void ImageProcess::thread_outStream_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_sel.read())) {
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B.read();
    } else {
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A.read();
    }
}

void ImageProcess::thread_outStream_V_dest_V_1_load_A() {
    outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full.read() & ~outStream_V_dest_V_1_sel_wr.read());
}

void ImageProcess::thread_outStream_V_dest_V_1_load_B() {
    outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_sel_wr.read() & outStream_V_dest_V_1_state_cmp_full.read());
}

void ImageProcess::thread_outStream_V_dest_V_1_sel() {
    outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd.read();
}

void ImageProcess::thread_outStream_V_dest_V_1_state_cmp_full() {
    outStream_V_dest_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_outStream_V_dest_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read())))) {
        outStream_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void ImageProcess::thread_outStream_V_dest_V_1_vld_out() {
    outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state.read()[0];
}

void ImageProcess::thread_outStream_V_id_V_1_ack_in() {
    outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state.read()[1];
}

void ImageProcess::thread_outStream_V_id_V_1_ack_out() {
    outStream_V_id_V_1_ack_out = outStream_TREADY.read();
}

void ImageProcess::thread_outStream_V_id_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_id_V_1_data_in = dataOutSideChannel_i_reg_315.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()))) {
        outStream_V_id_V_1_data_in = tmp_id_V_1_reg_1356.read();
    } else {
        outStream_V_id_V_1_data_in =  (sc_lv<5>) ("XXXXX");
    }
}

void ImageProcess::thread_outStream_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_sel.read())) {
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B.read();
    } else {
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A.read();
    }
}

void ImageProcess::thread_outStream_V_id_V_1_load_A() {
    outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full.read() & ~outStream_V_id_V_1_sel_wr.read());
}

void ImageProcess::thread_outStream_V_id_V_1_load_B() {
    outStream_V_id_V_1_load_B = (outStream_V_id_V_1_sel_wr.read() & outStream_V_id_V_1_state_cmp_full.read());
}

void ImageProcess::thread_outStream_V_id_V_1_sel() {
    outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd.read();
}

void ImageProcess::thread_outStream_V_id_V_1_state_cmp_full() {
    outStream_V_id_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_outStream_V_id_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read())))) {
        outStream_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void ImageProcess::thread_outStream_V_id_V_1_vld_out() {
    outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state.read()[0];
}

void ImageProcess::thread_outStream_V_keep_V_1_ack_in() {
    outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state.read()[1];
}

void ImageProcess::thread_outStream_V_keep_V_1_ack_out() {
    outStream_V_keep_V_1_ack_out = outStream_TREADY.read();
}

void ImageProcess::thread_outStream_V_keep_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_keep_V_1_data_in = dataOutSideChannel_k_reg_354.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()))) {
        outStream_V_keep_V_1_data_in = tmp_keep_V_1_reg_1338.read();
    } else {
        outStream_V_keep_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void ImageProcess::thread_outStream_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_sel.read())) {
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B.read();
    } else {
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A.read();
    }
}

void ImageProcess::thread_outStream_V_keep_V_1_load_A() {
    outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full.read() & ~outStream_V_keep_V_1_sel_wr.read());
}

void ImageProcess::thread_outStream_V_keep_V_1_load_B() {
    outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_sel_wr.read() & outStream_V_keep_V_1_state_cmp_full.read());
}

void ImageProcess::thread_outStream_V_keep_V_1_sel() {
    outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd.read();
}

void ImageProcess::thread_outStream_V_keep_V_1_state_cmp_full() {
    outStream_V_keep_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_outStream_V_keep_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read())))) {
        outStream_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void ImageProcess::thread_outStream_V_keep_V_1_vld_out() {
    outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state.read()[0];
}

void ImageProcess::thread_outStream_V_last_V_1_ack_in() {
    outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state.read()[1];
}

void ImageProcess::thread_outStream_V_last_V_1_ack_out() {
    outStream_V_last_V_1_ack_out = outStream_TREADY.read();
}

void ImageProcess::thread_outStream_V_last_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_last_V_1_data_in = tmp_last_V_fu_1255_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()))) {
        outStream_V_last_V_1_data_in = ap_const_lv1_0;
    } else {
        outStream_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void ImageProcess::thread_outStream_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_sel.read())) {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B.read();
    } else {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A.read();
    }
}

void ImageProcess::thread_outStream_V_last_V_1_load_A() {
    outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full.read() & ~outStream_V_last_V_1_sel_wr.read());
}

void ImageProcess::thread_outStream_V_last_V_1_load_B() {
    outStream_V_last_V_1_load_B = (outStream_V_last_V_1_sel_wr.read() & outStream_V_last_V_1_state_cmp_full.read());
}

void ImageProcess::thread_outStream_V_last_V_1_sel() {
    outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd.read();
}

void ImageProcess::thread_outStream_V_last_V_1_state_cmp_full() {
    outStream_V_last_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_outStream_V_last_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read())))) {
        outStream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void ImageProcess::thread_outStream_V_last_V_1_vld_out() {
    outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state.read()[0];
}

void ImageProcess::thread_outStream_V_strb_V_1_ack_in() {
    outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state.read()[1];
}

void ImageProcess::thread_outStream_V_strb_V_1_ack_out() {
    outStream_V_strb_V_1_ack_out = outStream_TREADY.read();
}

void ImageProcess::thread_outStream_V_strb_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_strb_V_1_data_in = dataOutSideChannel_s_reg_341.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()))) {
        outStream_V_strb_V_1_data_in = tmp_strb_V_1_reg_1344.read();
    } else {
        outStream_V_strb_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void ImageProcess::thread_outStream_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_sel.read())) {
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B.read();
    } else {
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A.read();
    }
}

void ImageProcess::thread_outStream_V_strb_V_1_load_A() {
    outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full.read() & ~outStream_V_strb_V_1_sel_wr.read());
}

void ImageProcess::thread_outStream_V_strb_V_1_load_B() {
    outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_sel_wr.read() & outStream_V_strb_V_1_state_cmp_full.read());
}

void ImageProcess::thread_outStream_V_strb_V_1_sel() {
    outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd.read();
}

void ImageProcess::thread_outStream_V_strb_V_1_state_cmp_full() {
    outStream_V_strb_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_outStream_V_strb_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read())))) {
        outStream_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void ImageProcess::thread_outStream_V_strb_V_1_vld_out() {
    outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state.read()[0];
}

void ImageProcess::thread_outStream_V_user_V_1_ack_in() {
    outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state.read()[1];
}

void ImageProcess::thread_outStream_V_user_V_1_ack_out() {
    outStream_V_user_V_1_ack_out = outStream_TREADY.read();
}

void ImageProcess::thread_outStream_V_user_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_user_V_1_data_in = dataOutSideChannel_u_reg_328.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()))) {
        outStream_V_user_V_1_data_in = tmp_user_V_1_reg_1350.read();
    } else {
        outStream_V_user_V_1_data_in =  (sc_lv<2>) ("XX");
    }
}

void ImageProcess::thread_outStream_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_sel.read())) {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B.read();
    } else {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A.read();
    }
}

void ImageProcess::thread_outStream_V_user_V_1_load_A() {
    outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full.read() & ~outStream_V_user_V_1_sel_wr.read());
}

void ImageProcess::thread_outStream_V_user_V_1_load_B() {
    outStream_V_user_V_1_load_B = (outStream_V_user_V_1_sel_wr.read() & outStream_V_user_V_1_state_cmp_full.read());
}

void ImageProcess::thread_outStream_V_user_V_1_sel() {
    outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd.read();
}

void ImageProcess::thread_outStream_V_user_V_1_state_cmp_full() {
    outStream_V_user_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void ImageProcess::thread_outStream_V_user_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_fu_1231_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read())))) {
        outStream_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void ImageProcess::thread_outStream_V_user_V_1_vld_out() {
    outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state.read()[0];
}

void ImageProcess::thread_p_s_fu_1123_p3() {
    p_s_fu_1123_p3 = (!tmp_14_fu_1115_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_14_fu_1115_p3.read()[0].to_bool())? ap_const_lv8_0: tmp_5_fu_1111_p1.read());
}

void ImageProcess::thread_p_shl_cast_fu_731_p1() {
    p_shl_cast_fu_731_p1 = esl_zext<5,4>(p_shl_fu_723_p3.read());
}

void ImageProcess::thread_p_shl_fu_723_p3() {
    p_shl_fu_723_p3 = esl_concat<2,2>(row_assign_reg_428.read(), ap_const_lv2_0);
}

void ImageProcess::thread_p_shl_i1_fu_1004_p3() {
    p_shl_i1_fu_1004_p3 = esl_concat<2,2>(row_assign_2_reg_498.read(), ap_const_lv2_0);
}

void ImageProcess::thread_p_shl_i2_fu_911_p3() {
    p_shl_i2_fu_911_p3 = esl_concat<2,2>(row_assign_3_reg_452.read(), ap_const_lv2_0);
}

void ImageProcess::thread_p_shl_i_fu_1097_p3() {
    p_shl_i_fu_1097_p3 = esl_concat<2,2>(row_assign_1_reg_544.read(), ap_const_lv2_0);
}

void ImageProcess::thread_phitmp_fu_1237_p2() {
    phitmp_fu_1237_p2 = (!countWait_reg_416.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(countWait_reg_416.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void ImageProcess::thread_pixConvolved_2_fu_1223_p3() {
    pixConvolved_2_fu_1223_p3 = (!tmp_1_fu_1189_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_1_fu_1189_p2.read()[0].to_bool())? ap_phi_mux_pixConvolved_1_phi_fu_610_p4.read(): ap_const_lv32_0);
}

void ImageProcess::thread_pixConvolved_3_fu_1182_p2() {
    pixConvolved_3_fu_1182_p2 = (!pixConvolved_reg_404.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(pixConvolved_reg_404.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ImageProcess::thread_row_1_fu_1215_p3() {
    row_1_fu_1215_p3 = (!tmp_1_fu_1189_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_1_fu_1189_p2.read()[0].to_bool())? row_reg_392.read(): row_2_fu_1201_p2.read());
}

void ImageProcess::thread_row_2_fu_1201_p2() {
    row_2_fu_1201_p2 = (!row_reg_392.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(row_reg_392.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ImageProcess::thread_row_3_fu_1087_p2() {
    row_3_fu_1087_p2 = (!row_assign_1_reg_544.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_assign_1_reg_544.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_row_4_fu_994_p2() {
    row_4_fu_994_p2 = (!row_assign_2_reg_498.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_assign_2_reg_498.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_row_5_fu_901_p2() {
    row_5_fu_901_p2 = (!row_assign_3_reg_452.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_assign_3_reg_452.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ImageProcess::thread_row_assign_cast_fu_707_p1() {
    row_assign_cast_fu_707_p1 = esl_zext<5,2>(row_assign_reg_428.read());
}

void ImageProcess::thread_tmp_10_fu_1231_p2() {
    tmp_10_fu_1231_p2 = (!countWait_reg_416.read().is_01() || !ap_const_lv17_141.is_01())? sc_lv<1>(): (sc_biguint<17>(countWait_reg_416.read()) > sc_biguint<17>(ap_const_lv17_141));
}

void ImageProcess::thread_tmp_11_fu_1152_p10() {
    tmp_11_fu_1152_p10 = (!tmp_1_i_reg_1483.read().is_01() || !tmp_2_i_fu_1143_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_1_i_reg_1483.read()) + sc_biguint<4>(tmp_2_i_fu_1143_p1.read()));
}

void ImageProcess::thread_tmp_12_fu_1039_p10() {
    tmp_12_fu_1039_p10 = (!tmp_7_i_reg_1457.read().is_01() || !tmp_8_i_fu_1030_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_7_i_reg_1457.read()) + sc_biguint<4>(tmp_8_i_fu_1030_p1.read()));
}

void ImageProcess::thread_tmp_12_i_fu_907_p1() {
    tmp_12_i_fu_907_p1 = esl_zext<4,2>(row_assign_3_reg_452.read());
}

void ImageProcess::thread_tmp_13_fu_946_p10() {
    tmp_13_fu_946_p10 = (!tmp_13_i_reg_1431.read().is_01() || !tmp_14_i_fu_937_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_13_i_reg_1431.read()) + sc_biguint<4>(tmp_14_i_fu_937_p1.read()));
}

void ImageProcess::thread_tmp_13_i_fu_919_p2() {
    tmp_13_i_fu_919_p2 = (!p_shl_i2_fu_911_p3.read().is_01() || !tmp_12_i_fu_907_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(p_shl_i2_fu_911_p3.read()) - sc_biguint<4>(tmp_12_i_fu_907_p1.read()));
}

void ImageProcess::thread_tmp_14_fu_1115_p3() {
    tmp_14_fu_1115_p3 = valOutput_reg_555.read().range(15, 15);
}

void ImageProcess::thread_tmp_14_i_fu_937_p1() {
    tmp_14_i_fu_937_p1 = esl_zext<4,2>(col_assign_5_reg_487.read());
}

void ImageProcess::thread_tmp_1_fu_1189_p2() {
    tmp_1_fu_1189_p2 = (!col_assign_reg_380.read().is_01() || !ap_const_lv32_13F.is_01())? sc_lv<1>(): (sc_bigint<32>(col_assign_reg_380.read()) < sc_bigint<32>(ap_const_lv32_13F));
}

void ImageProcess::thread_tmp_1_i_fu_1105_p2() {
    tmp_1_i_fu_1105_p2 = (!p_shl_i_fu_1097_p3.read().is_01() || !tmp_i_fu_1093_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(p_shl_i_fu_1097_p3.read()) - sc_biguint<4>(tmp_i_fu_1093_p1.read()));
}

void ImageProcess::thread_tmp_2_fu_741_p4() {
    tmp_2_fu_741_p4 = row_reg_392.read().range(31, 1);
}

void ImageProcess::thread_tmp_2_i_fu_1143_p1() {
    tmp_2_i_fu_1143_p1 = esl_zext<4,2>(col_assign_3_reg_579.read());
}

void ImageProcess::thread_tmp_3_fu_757_p4() {
    tmp_3_fu_757_p4 = col_assign_reg_380.read().range(31, 1);
}

void ImageProcess::thread_tmp_4_fu_735_p2() {
    tmp_4_fu_735_p2 = (!p_shl_cast_fu_731_p1.read().is_01() || !row_assign_cast_fu_707_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_731_p1.read()) - sc_biguint<5>(row_assign_cast_fu_707_p1.read()));
}

void ImageProcess::thread_tmp_5_fu_1111_p1() {
    tmp_5_fu_1111_p1 = valOutput_reg_555.read().range(8-1, 0);
}

void ImageProcess::thread_tmp_5_i_fu_1067_p2() {
    tmp_5_i_fu_1067_p2 = (!minValue_fu_1063_p1.read().is_01() || !minValue_1_i_reg_521.read().is_01())? sc_lv<1>(): (sc_biguint<8>(minValue_fu_1063_p1.read()) < sc_biguint<8>(minValue_1_i_reg_521.read()));
}

void ImageProcess::thread_tmp_6_fu_805_p1() {
    tmp_6_fu_805_p1 = esl_zext<64,32>(col_assign_1_fu_799_p2.read());
}

void ImageProcess::thread_tmp_6_i_fu_1000_p1() {
    tmp_6_i_fu_1000_p1 = esl_zext<4,2>(row_assign_2_reg_498.read());
}

void ImageProcess::thread_tmp_7_cast_fu_829_p1() {
    tmp_7_cast_fu_829_p1 = esl_sext<32,5>(tmp_7_reg_1408.read());
}

void ImageProcess::thread_tmp_7_fu_812_p2() {
    tmp_7_fu_812_p2 = (!col_assign_2_cast_fu_779_p1.read().is_01() || !tmp_4_reg_1376.read().is_01())? sc_lv<5>(): (sc_biguint<5>(col_assign_2_cast_fu_779_p1.read()) + sc_biguint<5>(tmp_4_reg_1376.read()));
}

void ImageProcess::thread_tmp_7_i_fu_1012_p2() {
    tmp_7_i_fu_1012_p2 = (!p_shl_i1_fu_1004_p3.read().is_01() || !tmp_6_i_fu_1000_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(p_shl_i1_fu_1004_p3.read()) - sc_biguint<4>(tmp_6_i_fu_1000_p1.read()));
}

void ImageProcess::thread_tmp_8_fu_832_p1() {
    tmp_8_fu_832_p1 = esl_zext<64,32>(tmp_7_cast_fu_829_p1.read());
}

void ImageProcess::thread_tmp_8_i_fu_1030_p1() {
    tmp_8_i_fu_1030_p1 = esl_zext<4,2>(col_assign_4_reg_533.read());
}

void ImageProcess::thread_tmp_i_28_fu_974_p2() {
    tmp_i_28_fu_974_p2 = (!maxValue_fu_970_p1.read().is_01() || !maxValue_1_i_reg_475.read().is_01())? sc_lv<1>(): (sc_biguint<8>(maxValue_fu_970_p1.read()) > sc_biguint<8>(maxValue_1_i_reg_475.read()));
}

void ImageProcess::thread_tmp_i_fu_1093_p1() {
    tmp_i_fu_1093_p1 = esl_zext<4,2>(row_assign_1_reg_544.read());
}

void ImageProcess::thread_tmp_last_V_fu_1255_p2() {
    tmp_last_V_fu_1255_p2 = (!countWait_1_reg_632.read().is_01() || !ap_const_lv9_140.is_01())? sc_lv<1>(): (sc_biguint<9>(countWait_1_reg_632.read()) < sc_biguint<9>(ap_const_lv9_140));
}

void ImageProcess::thread_tmp_s_fu_676_p1() {
    tmp_s_fu_676_p1 = esl_zext<64,32>(col_assign_reg_380.read());
}

void ImageProcess::thread_valInWindow_0_maxVal_fu_980_p3() {
    valInWindow_0_maxVal_fu_980_p3 = (!tmp_i_28_fu_974_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_i_28_fu_974_p2.read()[0].to_bool())? maxValue_fu_970_p1.read(): maxValue_1_i_reg_475.read());
}

void ImageProcess::thread_valInWindow_0_minVal_fu_1073_p3() {
    valInWindow_0_minVal_fu_1073_p3 = (!tmp_5_i_fu_1067_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_i_fu_1067_p2.read()[0].to_bool())? minValue_fu_1063_p1.read(): minValue_1_i_reg_521.read());
}

void ImageProcess::thread_window_val_2_0_fu_844_p0() {
    window_val_2_0_fu_844_p0 = kernel_q0.read();
}

void ImageProcess::thread_window_val_2_0_fu_844_p1() {
    window_val_2_0_fu_844_p1 =  (sc_lv<8>) (window_val_2_0_fu_844_p10.read());
}

void ImageProcess::thread_window_val_2_0_fu_844_p10() {
    window_val_2_0_fu_844_p10 = esl_zext<16,8>(tmp_reg_1413.read());
}

void ImageProcess::thread_window_val_2_0_fu_844_p2() {
    window_val_2_0_fu_844_p2 = (!window_val_2_0_fu_844_p0.read().is_01() || !window_val_2_0_fu_844_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_2_0_fu_844_p0.read()) * sc_biguint<8>(window_val_2_0_fu_844_p1.read());
}

void ImageProcess::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_670_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(inStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else if ((esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_1) && esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else if ((esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_2) && esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && ((esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(or_cond_fu_773_p2.read(), ap_const_lv1_0)) || 
  (!esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_0) && 
   !esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_1) && 
   !esl_seteq<1,32,32>(operation_read_reg_1316.read(), ap_const_lv32_2) && 
   esl_seteq<1,1,1>(exitcond2_fu_711_p2.read(), ap_const_lv1_1))))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(exitcond3_fu_787_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(exitcond1_i2_fu_895_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(exitcond_i2_fu_925_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(exitcond1_i1_fu_988_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(exitcond_i1_fu_1018_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(exitcond1_i_fu_1081_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(exitcond_i_fu_1131_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state14_io.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state15_io.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_1243_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

void ImageProcess::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TUSER\" :  \"" << inStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TID\" :  \"" << inStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDEST\" :  \"" << inStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TUSER\" :  \"" << outStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TID\" :  \"" << outStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDEST\" :  \"" << outStream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWVALID\" :  \"" << s_axi_KERNEL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWREADY\" :  \"" << s_axi_KERNEL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWADDR\" :  \"" << s_axi_KERNEL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WVALID\" :  \"" << s_axi_KERNEL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_WREADY\" :  \"" << s_axi_KERNEL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WDATA\" :  \"" << s_axi_KERNEL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WSTRB\" :  \"" << s_axi_KERNEL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARVALID\" :  \"" << s_axi_KERNEL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARREADY\" :  \"" << s_axi_KERNEL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARADDR\" :  \"" << s_axi_KERNEL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RVALID\" :  \"" << s_axi_KERNEL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_RREADY\" :  \"" << s_axi_KERNEL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RDATA\" :  \"" << s_axi_KERNEL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RRESP\" :  \"" << s_axi_KERNEL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_BVALID\" :  \"" << s_axi_KERNEL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_BREADY\" :  \"" << s_axi_KERNEL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_BRESP\" :  \"" << s_axi_KERNEL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

