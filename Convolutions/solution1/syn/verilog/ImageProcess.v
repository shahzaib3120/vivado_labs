// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ImageProcess,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.088500,HLS_SYN_LAT=3379844,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1000,HLS_SYN_LUT=2158,HLS_VERSION=2018_2}" *)

module ImageProcess (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt,
        s_axi_KERNEL_BUS_AWVALID,
        s_axi_KERNEL_BUS_AWREADY,
        s_axi_KERNEL_BUS_AWADDR,
        s_axi_KERNEL_BUS_WVALID,
        s_axi_KERNEL_BUS_WREADY,
        s_axi_KERNEL_BUS_WDATA,
        s_axi_KERNEL_BUS_WSTRB,
        s_axi_KERNEL_BUS_ARVALID,
        s_axi_KERNEL_BUS_ARREADY,
        s_axi_KERNEL_BUS_ARADDR,
        s_axi_KERNEL_BUS_RVALID,
        s_axi_KERNEL_BUS_RREADY,
        s_axi_KERNEL_BUS_RDATA,
        s_axi_KERNEL_BUS_RRESP,
        s_axi_KERNEL_BUS_BVALID,
        s_axi_KERNEL_BUS_BREADY,
        s_axi_KERNEL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_ADDR_WIDTH = 5;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_KERNEL_BUS_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [0:0] inStream_TKEEP;
input  [0:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [7:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [0:0] outStream_TKEEP;
output  [0:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;
input   s_axi_KERNEL_BUS_AWVALID;
output   s_axi_KERNEL_BUS_AWREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_AWADDR;
input   s_axi_KERNEL_BUS_WVALID;
output   s_axi_KERNEL_BUS_WREADY;
input  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_WDATA;
input  [C_S_AXI_KERNEL_BUS_WSTRB_WIDTH - 1:0] s_axi_KERNEL_BUS_WSTRB;
input   s_axi_KERNEL_BUS_ARVALID;
output   s_axi_KERNEL_BUS_ARREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_ARADDR;
output   s_axi_KERNEL_BUS_RVALID;
input   s_axi_KERNEL_BUS_RREADY;
output  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_RDATA;
output  [1:0] s_axi_KERNEL_BUS_RRESP;
output   s_axi_KERNEL_BUS_BVALID;
input   s_axi_KERNEL_BUS_BREADY;
output  [1:0] s_axi_KERNEL_BUS_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [7:0] inStream_V_data_V_0_payload_A;
reg   [7:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [0:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [0:0] inStream_V_keep_V_0_payload_A;
reg   [0:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [0:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [0:0] inStream_V_strb_V_0_payload_A;
reg   [0:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [7:0] outStream_V_data_V_1_data_in;
reg   [7:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [7:0] outStream_V_data_V_1_payload_A;
reg   [7:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [0:0] outStream_V_keep_V_1_data_in;
reg   [0:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [0:0] outStream_V_keep_V_1_payload_A;
reg   [0:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [0:0] outStream_V_strb_V_1_data_in;
reg   [0:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [0:0] outStream_V_strb_V_1_payload_A;
reg   [0:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_in;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_in;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_in;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_in;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [3:0] kernel_address0;
reg    kernel_ce0;
wire   [7:0] kernel_q0;
wire   [31:0] operation;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_10_fu_1231_p2;
wire    ap_CS_fsm_state15;
reg   [0:0] tmp_10_reg_1521;
wire    ap_CS_fsm_state16;
wire   [0:0] exitcond_fu_1243_p2;
wire    ap_CS_fsm_state17;
reg   [31:0] operation_read_reg_1316;
wire   [63:0] tmp_s_fu_676_p1;
reg   [63:0] tmp_s_reg_1323;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_670_p2;
reg   [8:0] lineBuff_val_1_addr_reg_1328;
reg   [8:0] lineBuff_val_2_addr_reg_1333;
reg   [0:0] tmp_keep_V_1_reg_1338;
reg   [0:0] tmp_strb_V_1_reg_1344;
reg   [1:0] tmp_user_V_1_reg_1350;
reg   [4:0] tmp_id_V_1_reg_1356;
reg   [5:0] tmp_dest_V_1_reg_1362;
wire   [1:0] WinRow_fu_717_p2;
reg   [1:0] WinRow_reg_1371;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_4_fu_735_p2;
reg   [4:0] tmp_4_reg_1376;
wire   [0:0] exitcond2_fu_711_p2;
wire   [0:0] or_cond_fu_773_p2;
reg   [0:0] or_cond_reg_1381;
wire   [1:0] WinCol_fu_793_p2;
reg   [1:0] WinCol_reg_1388;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond3_fu_787_p2;
wire   [4:0] tmp_7_fu_812_p2;
reg   [4:0] tmp_7_reg_1408;
wire   [7:0] tmp_fu_817_p5;
reg   [7:0] tmp_reg_1413;
wire    ap_CS_fsm_state6;
wire   [1:0] row_5_fu_901_p2;
reg   [1:0] row_5_reg_1426;
wire    ap_CS_fsm_state8;
wire   [3:0] tmp_13_i_fu_919_p2;
reg   [3:0] tmp_13_i_reg_1431;
wire   [0:0] exitcond1_i2_fu_895_p2;
wire   [1:0] col_4_fu_931_p2;
wire    ap_CS_fsm_state9;
wire   [7:0] valInWindow_0_maxVal_fu_980_p3;
wire   [0:0] exitcond_i2_fu_925_p2;
wire   [1:0] row_4_fu_994_p2;
reg   [1:0] row_4_reg_1452;
wire    ap_CS_fsm_state10;
wire   [3:0] tmp_7_i_fu_1012_p2;
reg   [3:0] tmp_7_i_reg_1457;
wire   [0:0] exitcond1_i1_fu_988_p2;
wire   [1:0] col_3_fu_1024_p2;
wire    ap_CS_fsm_state11;
wire   [7:0] valInWindow_0_minVal_fu_1073_p3;
wire   [0:0] exitcond_i1_fu_1018_p2;
wire   [1:0] row_3_fu_1087_p2;
reg   [1:0] row_3_reg_1478;
wire    ap_CS_fsm_state12;
wire   [3:0] tmp_1_i_fu_1105_p2;
reg   [3:0] tmp_1_i_reg_1483;
wire   [0:0] exitcond1_i_fu_1081_p2;
wire   [7:0] p_s_fu_1123_p3;
wire   [1:0] col_2_fu_1137_p2;
wire    ap_CS_fsm_state13;
wire   [15:0] accumulator_fu_1176_p2;
wire   [0:0] exitcond_i_fu_1131_p2;
wire   [31:0] col_1_fu_1207_p3;
reg   [31:0] col_1_reg_1506;
reg    ap_block_state14_io;
wire   [31:0] row_1_fu_1215_p3;
reg   [31:0] row_1_reg_1511;
wire   [31:0] pixConvolved_2_fu_1223_p3;
reg   [31:0] pixConvolved_2_reg_1516;
wire   [16:0] phitmp_fu_1237_p2;
reg    ap_block_state15_io;
wire   [8:0] countWait_2_fu_1249_p2;
reg   [8:0] countWait_2_reg_1533;
reg    ap_block_state16;
reg    ap_block_state16_io;
wire   [0:0] tmp_last_V_fu_1255_p2;
reg   [8:0] lineBuff_val_0_address0;
reg    lineBuff_val_0_ce0;
reg    lineBuff_val_0_we0;
wire   [7:0] lineBuff_val_0_q0;
reg   [8:0] lineBuff_val_1_address0;
reg    lineBuff_val_1_ce0;
reg    lineBuff_val_1_we0;
wire   [7:0] lineBuff_val_1_q0;
reg   [8:0] lineBuff_val_2_address0;
reg    lineBuff_val_2_ce0;
reg    lineBuff_val_2_we0;
wire   [7:0] lineBuff_val_2_q0;
reg   [4:0] dataOutSideChannel_i_reg_315;
reg   [1:0] dataOutSideChannel_u_reg_328;
reg   [0:0] dataOutSideChannel_s_reg_341;
reg   [0:0] dataOutSideChannel_k_reg_354;
reg   [5:0] dataOutSideChannel_d_reg_367;
reg   [31:0] col_assign_reg_380;
reg   [31:0] row_reg_392;
reg   [31:0] pixConvolved_reg_404;
reg   [16:0] countWait_reg_416;
reg   [1:0] row_assign_reg_428;
reg   [1:0] col_assign_2_reg_440;
wire    ap_CS_fsm_state7;
reg   [1:0] row_assign_3_reg_452;
reg   [7:0] maxValue_i_reg_463;
reg   [7:0] maxValue_1_i_reg_475;
reg   [1:0] col_assign_5_reg_487;
reg   [1:0] row_assign_2_reg_498;
reg   [7:0] minValue_i_reg_509;
reg   [7:0] minValue_1_i_reg_521;
reg   [1:0] col_assign_4_reg_533;
reg   [1:0] row_assign_1_reg_544;
reg   [15:0] valOutput_reg_555;
reg   [15:0] accumulator_1_i_reg_567;
reg   [1:0] col_assign_3_reg_579;
reg   [7:0] valOutput_1_reg_590;
wire   [31:0] pixConvolved_3_fu_1182_p2;
reg   [31:0] ap_phi_mux_pixConvolved_1_phi_fu_610_p4;
reg   [31:0] pixConvolved_1_reg_607;
reg   [7:0] ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4;
reg   [7:0] dataOutSideChannel_d_1_reg_617;
reg   [8:0] countWait_1_reg_632;
wire   [63:0] tmp_6_fu_805_p1;
wire   [63:0] tmp_8_fu_832_p1;
reg   [15:0] window_val_2_2_fu_144;
wire   [15:0] window_val_2_0_fu_844_p2;
reg   [15:0] window_val_2_2_1_fu_148;
reg   [15:0] window_val_2_2_2_fu_152;
reg   [15:0] window_val_2_2_3_fu_156;
reg   [15:0] window_val_2_2_4_fu_160;
reg   [15:0] window_val_2_2_5_fu_164;
reg   [15:0] window_val_2_2_6_fu_168;
reg   [15:0] window_val_2_2_7_fu_172;
reg   [15:0] window_val_2_2_8_fu_176;
wire   [3:0] p_shl_fu_723_p3;
wire   [4:0] p_shl_cast_fu_731_p1;
wire   [4:0] row_assign_cast_fu_707_p1;
wire   [30:0] tmp_2_fu_741_p4;
wire   [30:0] tmp_3_fu_757_p4;
wire   [0:0] icmp_fu_751_p2;
wire   [0:0] icmp7_fu_767_p2;
wire   [31:0] col_assign_2_cast1_fu_783_p1;
wire   [31:0] col_assign_1_fu_799_p2;
wire   [4:0] col_assign_2_cast_fu_779_p1;
wire  signed [31:0] tmp_7_cast_fu_829_p1;
wire  signed [7:0] window_val_2_0_fu_844_p0;
wire   [7:0] window_val_2_0_fu_844_p1;
wire   [3:0] p_shl_i2_fu_911_p3;
wire   [3:0] tmp_12_i_fu_907_p1;
wire   [3:0] tmp_14_i_fu_937_p1;
wire   [3:0] tmp_13_fu_946_p10;
wire   [15:0] tmp_13_fu_946_p11;
wire   [7:0] maxValue_fu_970_p1;
wire   [0:0] tmp_i_28_fu_974_p2;
wire   [3:0] p_shl_i1_fu_1004_p3;
wire   [3:0] tmp_6_i_fu_1000_p1;
wire   [3:0] tmp_8_i_fu_1030_p1;
wire   [3:0] tmp_12_fu_1039_p10;
wire   [15:0] tmp_12_fu_1039_p11;
wire   [7:0] minValue_fu_1063_p1;
wire   [0:0] tmp_5_i_fu_1067_p2;
wire   [3:0] p_shl_i_fu_1097_p3;
wire   [3:0] tmp_i_fu_1093_p1;
wire   [0:0] tmp_14_fu_1115_p3;
wire   [7:0] tmp_5_fu_1111_p1;
wire   [3:0] tmp_2_i_fu_1143_p1;
wire   [3:0] tmp_11_fu_1152_p10;
wire   [15:0] tmp_11_fu_1152_p11;
wire   [0:0] tmp_1_fu_1189_p2;
wire   [31:0] col_fu_1195_p2;
wire   [31:0] row_2_fu_1201_p2;
reg   [16:0] ap_NS_fsm;
wire   [15:0] window_val_2_0_fu_844_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
end

ImageProcess_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
ImageProcess_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .operation(operation)
);

ImageProcess_KERNEL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_KERNEL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_KERNEL_BUS_DATA_WIDTH ))
ImageProcess_KERNEL_BUS_s_axi_U(
    .AWVALID(s_axi_KERNEL_BUS_AWVALID),
    .AWREADY(s_axi_KERNEL_BUS_AWREADY),
    .AWADDR(s_axi_KERNEL_BUS_AWADDR),
    .WVALID(s_axi_KERNEL_BUS_WVALID),
    .WREADY(s_axi_KERNEL_BUS_WREADY),
    .WDATA(s_axi_KERNEL_BUS_WDATA),
    .WSTRB(s_axi_KERNEL_BUS_WSTRB),
    .ARVALID(s_axi_KERNEL_BUS_ARVALID),
    .ARREADY(s_axi_KERNEL_BUS_ARREADY),
    .ARADDR(s_axi_KERNEL_BUS_ARADDR),
    .RVALID(s_axi_KERNEL_BUS_RVALID),
    .RREADY(s_axi_KERNEL_BUS_RREADY),
    .RDATA(s_axi_KERNEL_BUS_RDATA),
    .RRESP(s_axi_KERNEL_BUS_RRESP),
    .BVALID(s_axi_KERNEL_BUS_BVALID),
    .BREADY(s_axi_KERNEL_BUS_BREADY),
    .BRESP(s_axi_KERNEL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .kernel_address0(kernel_address0),
    .kernel_ce0(kernel_ce0),
    .kernel_q0(kernel_q0)
);

ImageProcess_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
lineBuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_0_address0),
    .ce0(lineBuff_val_0_ce0),
    .we0(lineBuff_val_0_we0),
    .d0(lineBuff_val_1_q0),
    .q0(lineBuff_val_0_q0)
);

ImageProcess_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
lineBuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_1_address0),
    .ce0(lineBuff_val_1_ce0),
    .we0(lineBuff_val_1_we0),
    .d0(lineBuff_val_2_q0),
    .q0(lineBuff_val_1_q0)
);

ImageProcess_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
lineBuff_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_2_address0),
    .ce0(lineBuff_val_2_ce0),
    .we0(lineBuff_val_2_we0),
    .d0(inStream_V_data_V_0_data_out),
    .q0(lineBuff_val_2_q0)
);

ImageProcess_mux_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
ImageProcess_mux_eOg_U1(
    .din0(lineBuff_val_0_q0),
    .din1(lineBuff_val_1_q0),
    .din2(lineBuff_val_2_q0),
    .din3(row_assign_reg_428),
    .dout(tmp_fu_817_p5)
);

ImageProcess_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
ImageProcess_mux_fYi_U2(
    .din0(window_val_2_2_fu_144),
    .din1(window_val_2_2_1_fu_148),
    .din2(window_val_2_2_2_fu_152),
    .din3(window_val_2_2_3_fu_156),
    .din4(window_val_2_2_4_fu_160),
    .din5(window_val_2_2_5_fu_164),
    .din6(window_val_2_2_6_fu_168),
    .din7(window_val_2_2_7_fu_172),
    .din8(window_val_2_2_8_fu_176),
    .din9(tmp_13_fu_946_p10),
    .dout(tmp_13_fu_946_p11)
);

ImageProcess_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
ImageProcess_mux_fYi_U3(
    .din0(window_val_2_2_fu_144),
    .din1(window_val_2_2_1_fu_148),
    .din2(window_val_2_2_2_fu_152),
    .din3(window_val_2_2_3_fu_156),
    .din4(window_val_2_2_4_fu_160),
    .din5(window_val_2_2_5_fu_164),
    .din6(window_val_2_2_6_fu_168),
    .din7(window_val_2_2_7_fu_172),
    .din8(window_val_2_2_8_fu_176),
    .din9(tmp_12_fu_1039_p10),
    .dout(tmp_12_fu_1039_p11)
);

ImageProcess_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
ImageProcess_mux_fYi_U4(
    .din0(window_val_2_2_fu_144),
    .din1(window_val_2_2_1_fu_148),
    .din2(window_val_2_2_2_fu_152),
    .din3(window_val_2_2_3_fu_156),
    .din4(window_val_2_2_4_fu_160),
    .din5(window_val_2_2_5_fu_164),
    .din6(window_val_2_2_6_fu_168),
    .din7(window_val_2_2_7_fu_172),
    .din8(window_val_2_2_8_fu_176),
    .din9(tmp_11_fu_1152_p10),
    .dout(tmp_11_fu_1152_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b1)) | ((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b1)) | ((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        accumulator_1_i_reg_567 <= valOutput_reg_555;
    end else if (((exitcond_i_fu_1131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        accumulator_1_i_reg_567 <= accumulator_fu_1176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_assign_2_reg_440 <= WinCol_reg_1388;
    end else if (((exitcond2_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        col_assign_2_reg_440 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        col_assign_3_reg_579 <= 2'd0;
    end else if (((exitcond_i_fu_1131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        col_assign_3_reg_579 <= col_2_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i1_fu_988_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        col_assign_4_reg_533 <= 2'd0;
    end else if (((exitcond_i1_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        col_assign_4_reg_533 <= col_3_fu_1024_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i2_fu_895_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        col_assign_5_reg_487 <= 2'd0;
    end else if (((exitcond_i2_fu_925_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        col_assign_5_reg_487 <= col_4_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
        col_assign_reg_380 <= col_1_reg_1506;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_assign_reg_380 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_670_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        countWait_1_reg_632 <= 9'd0;
    end else if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        countWait_1_reg_632 <= countWait_2_reg_1533;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
        countWait_reg_416 <= phitmp_fu_1237_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        countWait_reg_416 <= 17'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        dataOutSideChannel_d_1_reg_617 <= 8'd0;
    end else if (((or_cond_reg_1381 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io))) begin
        dataOutSideChannel_d_1_reg_617 <= valOutput_1_reg_590;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i2_fu_895_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        maxValue_1_i_reg_475 <= maxValue_i_reg_463;
    end else if (((exitcond_i2_fu_925_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        maxValue_1_i_reg_475 <= valInWindow_0_maxVal_fu_980_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((operation_read_reg_1316 == 32'd2) & (exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        maxValue_i_reg_463 <= 8'd0;
    end else if (((exitcond_i2_fu_925_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        maxValue_i_reg_463 <= maxValue_1_i_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i1_fu_988_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        minValue_1_i_reg_521 <= minValue_i_reg_509;
    end else if (((exitcond_i1_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        minValue_1_i_reg_521 <= valInWindow_0_minVal_fu_1073_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((operation_read_reg_1316 == 32'd1) & (exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        minValue_i_reg_509 <= 8'd255;
    end else if (((exitcond_i1_fu_1018_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        minValue_i_reg_509 <= minValue_1_i_reg_521;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        pixConvolved_1_reg_607 <= pixConvolved_reg_404;
    end else if (((or_cond_reg_1381 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io))) begin
        pixConvolved_1_reg_607 <= pixConvolved_3_fu_1182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
        pixConvolved_reg_404 <= pixConvolved_2_reg_1516;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        pixConvolved_reg_404 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (operation_read_reg_1316 == 32'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        row_assign_1_reg_544 <= 2'd0;
    end else if (((exitcond_i_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        row_assign_1_reg_544 <= row_3_reg_1478;
    end
end

always @ (posedge ap_clk) begin
    if (((operation_read_reg_1316 == 32'd1) & (exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_assign_2_reg_498 <= 2'd0;
    end else if (((exitcond_i1_fu_1018_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        row_assign_2_reg_498 <= row_4_reg_1452;
    end
end

always @ (posedge ap_clk) begin
    if (((operation_read_reg_1316 == 32'd2) & (exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_assign_3_reg_452 <= 2'd0;
    end else if (((exitcond_i2_fu_925_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        row_assign_3_reg_452 <= row_5_reg_1426;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_787_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        row_assign_reg_428 <= WinRow_reg_1371;
    end else if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_assign_reg_428 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
        row_reg_392 <= row_1_reg_1511;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_392 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i1_fu_988_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        valOutput_1_reg_590 <= minValue_i_reg_509;
    end else if (((exitcond1_i2_fu_895_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        valOutput_1_reg_590 <= maxValue_i_reg_463;
    end else if ((~(operation_read_reg_1316 == 32'd0) & ~(operation_read_reg_1316 == 32'd1) & ~(operation_read_reg_1316 == 32'd2) & (exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        valOutput_1_reg_590 <= 8'd0;
    end else if (((exitcond1_i_fu_1081_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        valOutput_1_reg_590 <= p_s_fu_1123_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (operation_read_reg_1316 == 32'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        valOutput_reg_555 <= 16'd0;
    end else if (((exitcond_i_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        valOutput_reg_555 <= accumulator_1_i_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        WinCol_reg_1388 <= WinCol_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        WinRow_reg_1371 <= WinRow_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io))) begin
        col_1_reg_1506 <= col_1_fu_1207_p3;
        pixConvolved_2_reg_1516 <= pixConvolved_2_fu_1223_p3;
        row_1_reg_1511 <= row_1_fu_1215_p3;
        tmp_10_reg_1521 <= tmp_10_fu_1231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        countWait_2_reg_1533 <= countWait_2_fu_1249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
        dataOutSideChannel_d_reg_367 <= tmp_dest_V_1_reg_1362;
        dataOutSideChannel_i_reg_315 <= tmp_id_V_1_reg_1356;
        dataOutSideChannel_k_reg_354 <= tmp_keep_V_1_reg_1338;
        dataOutSideChannel_s_reg_341 <= tmp_strb_V_1_reg_1344;
        dataOutSideChannel_u_reg_328 <= tmp_user_V_1_reg_1350;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lineBuff_val_1_addr_reg_1328 <= tmp_s_fu_676_p1;
        lineBuff_val_2_addr_reg_1333 <= tmp_s_fu_676_p1;
        tmp_s_reg_1323[31 : 0] <= tmp_s_fu_676_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        operation_read_reg_1316 <= operation;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        or_cond_reg_1381 <= or_cond_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= outStream_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= outStream_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= outStream_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= outStream_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= outStream_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= outStream_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= outStream_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= outStream_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= outStream_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= outStream_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        row_3_reg_1478 <= row_3_fu_1087_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        row_4_reg_1452 <= row_4_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        row_5_reg_1426 <= row_5_fu_901_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i2_fu_895_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_13_i_reg_1431 <= tmp_13_i_fu_919_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_1_i_reg_1483 <= tmp_1_i_fu_1105_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_4_reg_1376 <= tmp_4_fu_735_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i1_fu_988_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_7_i_reg_1457 <= tmp_7_i_fu_1012_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_787_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_7_reg_1408 <= tmp_7_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_dest_V_1_reg_1362 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_1_reg_1356 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_1_reg_1338 <= inStream_V_keep_V_0_data_out;
        tmp_strb_V_1_reg_1344 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_1_reg_1350 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_1413 <= tmp_fu_817_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((col_assign_2_reg_440 == 2'd1) & (row_assign_reg_428 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_1_fu_148 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(col_assign_2_reg_440 == 2'd1) & ~(col_assign_2_reg_440 == 2'd0) & (row_assign_reg_428 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_2_fu_152 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((row_assign_reg_428 == 2'd1) & (col_assign_2_reg_440 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_3_fu_156 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((col_assign_2_reg_440 == 2'd1) & (row_assign_reg_428 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_4_fu_160 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(col_assign_2_reg_440 == 2'd1) & ~(col_assign_2_reg_440 == 2'd0) & (row_assign_reg_428 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_5_fu_164 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(row_assign_reg_428 == 2'd1) & ~(row_assign_reg_428 == 2'd0) & (col_assign_2_reg_440 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_6_fu_168 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(row_assign_reg_428 == 2'd1) & ~(row_assign_reg_428 == 2'd0) & (col_assign_2_reg_440 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_7_fu_172 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(row_assign_reg_428 == 2'd1) & ~(col_assign_2_reg_440 == 2'd1) & ~(col_assign_2_reg_440 == 2'd0) & ~(row_assign_reg_428 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_8_fu_176 <= window_val_2_0_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((col_assign_2_reg_440 == 2'd0) & (row_assign_reg_428 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        window_val_2_2_fu_144 <= window_val_2_0_fu_844_p2;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_1381 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 = valOutput_1_reg_590;
    end else begin
        ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 = dataOutSideChannel_d_1_reg_617;
    end
end

always @ (*) begin
    if (((or_cond_reg_1381 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_phi_mux_pixConvolved_1_phi_fu_610_p4 = pixConvolved_3_fu_1182_p2;
    end else begin
        ap_phi_mux_pixConvolved_1_phi_fu_610_p4 = pixConvolved_1_reg_607;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lineBuff_val_0_address0 = tmp_6_fu_805_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lineBuff_val_0_address0 = tmp_s_reg_1323;
    end else begin
        lineBuff_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        lineBuff_val_0_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        lineBuff_val_0_we0 = 1'b1;
    end else begin
        lineBuff_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lineBuff_val_1_address0 = tmp_6_fu_805_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_1328;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        lineBuff_val_1_address0 = tmp_s_fu_676_p1;
    end else begin
        lineBuff_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        lineBuff_val_1_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        lineBuff_val_1_we0 = 1'b1;
    end else begin
        lineBuff_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lineBuff_val_2_address0 = tmp_6_fu_805_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_1333;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        lineBuff_val_2_address0 = tmp_s_fu_676_p1;
    end else begin
        lineBuff_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        lineBuff_val_2_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        lineBuff_val_2_we0 = 1'b1;
    end else begin
        lineBuff_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_reg_1521 == 1'd1) & (1'b1 == ap_CS_fsm_state15)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        outStream_V_data_V_1_data_in = 8'd0;
    end else if (((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        outStream_V_data_V_1_data_in = ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4;
    end else begin
        outStream_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io)))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        outStream_V_dest_V_1_data_in = dataOutSideChannel_d_reg_367;
    end else if (((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        outStream_V_dest_V_1_data_in = tmp_dest_V_1_reg_1362;
    end else begin
        outStream_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io)))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        outStream_V_id_V_1_data_in = dataOutSideChannel_i_reg_315;
    end else if (((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        outStream_V_id_V_1_data_in = tmp_id_V_1_reg_1356;
    end else begin
        outStream_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io)))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        outStream_V_keep_V_1_data_in = dataOutSideChannel_k_reg_354;
    end else if (((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        outStream_V_keep_V_1_data_in = tmp_keep_V_1_reg_1338;
    end else begin
        outStream_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io)))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        outStream_V_last_V_1_data_in = tmp_last_V_fu_1255_p2;
    end else if (((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        outStream_V_last_V_1_data_in = 1'd0;
    end else begin
        outStream_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io)))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        outStream_V_strb_V_1_data_in = dataOutSideChannel_s_reg_341;
    end else if (((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        outStream_V_strb_V_1_data_in = tmp_strb_V_1_reg_1344;
    end else begin
        outStream_V_strb_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io)))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        outStream_V_user_V_1_data_in = dataOutSideChannel_u_reg_328;
    end else if (((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        outStream_V_user_V_1_data_in = tmp_user_V_1_reg_1350;
    end else begin
        outStream_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_10_fu_1231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io)))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_670_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((inStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (operation_read_reg_1316 == 32'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((operation_read_reg_1316 == 32'd1) & (exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((operation_read_reg_1316 == 32'd2) & (exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((exitcond2_fu_711_p2 == 1'd1) & (or_cond_fu_773_p2 == 1'd0)) | (~(operation_read_reg_1316 == 32'd0) & ~(operation_read_reg_1316 == 32'd1) & ~(operation_read_reg_1316 == 32'd2) & (exitcond2_fu_711_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond3_fu_787_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond1_i2_fu_895_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond_i2_fu_925_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond1_i1_fu_988_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond_i1_fu_1018_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((exitcond1_i_fu_1081_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond_i_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_io))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state16_io) | (outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (exitcond_fu_1243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign WinCol_fu_793_p2 = (col_assign_2_reg_440 + 2'd1);

assign WinRow_fu_717_p2 = (row_assign_reg_428 + 2'd1);

assign accumulator_fu_1176_p2 = (tmp_11_fu_1152_p11 + accumulator_1_i_reg_567);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state14_io = ((tmp_10_fu_1231_p2 == 1'd1) & (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state15_io = ((tmp_10_reg_1521 == 1'd1) & (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state16 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state16_io = ((exitcond_fu_1243_p2 == 1'd0) & (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_1_fu_1207_p3 = ((tmp_1_fu_1189_p2[0:0] === 1'b1) ? col_fu_1195_p2 : 32'd0);

assign col_2_fu_1137_p2 = (col_assign_3_reg_579 + 2'd1);

assign col_3_fu_1024_p2 = (col_assign_4_reg_533 + 2'd1);

assign col_4_fu_931_p2 = (col_assign_5_reg_487 + 2'd1);

assign col_assign_1_fu_799_p2 = (pixConvolved_reg_404 + col_assign_2_cast1_fu_783_p1);

assign col_assign_2_cast1_fu_783_p1 = col_assign_2_reg_440;

assign col_assign_2_cast_fu_779_p1 = col_assign_2_reg_440;

assign col_fu_1195_p2 = (col_assign_reg_380 + 32'd1);

assign countWait_2_fu_1249_p2 = (countWait_1_reg_632 + 9'd1);

assign exitcond1_fu_670_p2 = ((countWait_reg_416 == 17'd76801) ? 1'b1 : 1'b0);

assign exitcond1_i1_fu_988_p2 = ((row_assign_2_reg_498 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond1_i2_fu_895_p2 = ((row_assign_3_reg_452 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_1081_p2 = ((row_assign_1_reg_544 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_711_p2 = ((row_assign_reg_428 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_787_p2 = ((col_assign_2_reg_440 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_1243_p2 = ((countWait_1_reg_632 == 9'd321) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_1018_p2 = ((col_assign_4_reg_533 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_925_p2 = ((col_assign_5_reg_487 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i_fu_1131_p2 = ((col_assign_3_reg_579 == 2'd3) ? 1'b1 : 1'b0);

assign icmp7_fu_767_p2 = (($signed(tmp_3_fu_757_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_751_p2 = (($signed(tmp_2_fu_741_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign kernel_address0 = tmp_8_fu_832_p1;

assign maxValue_fu_970_p1 = tmp_13_fu_946_p11[7:0];

assign minValue_fu_1063_p1 = tmp_12_fu_1039_p11[7:0];

assign or_cond_fu_773_p2 = (icmp_fu_751_p2 & icmp7_fu_767_p2);

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign p_s_fu_1123_p3 = ((tmp_14_fu_1115_p3[0:0] === 1'b1) ? 8'd0 : tmp_5_fu_1111_p1);

assign p_shl_cast_fu_731_p1 = p_shl_fu_723_p3;

assign p_shl_fu_723_p3 = {{row_assign_reg_428}, {2'd0}};

assign p_shl_i1_fu_1004_p3 = {{row_assign_2_reg_498}, {2'd0}};

assign p_shl_i2_fu_911_p3 = {{row_assign_3_reg_452}, {2'd0}};

assign p_shl_i_fu_1097_p3 = {{row_assign_1_reg_544}, {2'd0}};

assign phitmp_fu_1237_p2 = (countWait_reg_416 + 17'd1);

assign pixConvolved_2_fu_1223_p3 = ((tmp_1_fu_1189_p2[0:0] === 1'b1) ? ap_phi_mux_pixConvolved_1_phi_fu_610_p4 : 32'd0);

assign pixConvolved_3_fu_1182_p2 = (pixConvolved_reg_404 + 32'd1);

assign row_1_fu_1215_p3 = ((tmp_1_fu_1189_p2[0:0] === 1'b1) ? row_reg_392 : row_2_fu_1201_p2);

assign row_2_fu_1201_p2 = (row_reg_392 + 32'd1);

assign row_3_fu_1087_p2 = (row_assign_1_reg_544 + 2'd1);

assign row_4_fu_994_p2 = (row_assign_2_reg_498 + 2'd1);

assign row_5_fu_901_p2 = (row_assign_3_reg_452 + 2'd1);

assign row_assign_cast_fu_707_p1 = row_assign_reg_428;

assign tmp_10_fu_1231_p2 = ((countWait_reg_416 > 17'd321) ? 1'b1 : 1'b0);

assign tmp_11_fu_1152_p10 = (tmp_1_i_reg_1483 + tmp_2_i_fu_1143_p1);

assign tmp_12_fu_1039_p10 = (tmp_7_i_reg_1457 + tmp_8_i_fu_1030_p1);

assign tmp_12_i_fu_907_p1 = row_assign_3_reg_452;

assign tmp_13_fu_946_p10 = (tmp_13_i_reg_1431 + tmp_14_i_fu_937_p1);

assign tmp_13_i_fu_919_p2 = (p_shl_i2_fu_911_p3 - tmp_12_i_fu_907_p1);

assign tmp_14_fu_1115_p3 = valOutput_reg_555[32'd15];

assign tmp_14_i_fu_937_p1 = col_assign_5_reg_487;

assign tmp_1_fu_1189_p2 = (($signed(col_assign_reg_380) < $signed(32'd319)) ? 1'b1 : 1'b0);

assign tmp_1_i_fu_1105_p2 = (p_shl_i_fu_1097_p3 - tmp_i_fu_1093_p1);

assign tmp_2_fu_741_p4 = {{row_reg_392[31:1]}};

assign tmp_2_i_fu_1143_p1 = col_assign_3_reg_579;

assign tmp_3_fu_757_p4 = {{col_assign_reg_380[31:1]}};

assign tmp_4_fu_735_p2 = (p_shl_cast_fu_731_p1 - row_assign_cast_fu_707_p1);

assign tmp_5_fu_1111_p1 = valOutput_reg_555[7:0];

assign tmp_5_i_fu_1067_p2 = ((minValue_fu_1063_p1 < minValue_1_i_reg_521) ? 1'b1 : 1'b0);

assign tmp_6_fu_805_p1 = col_assign_1_fu_799_p2;

assign tmp_6_i_fu_1000_p1 = row_assign_2_reg_498;

assign tmp_7_cast_fu_829_p1 = $signed(tmp_7_reg_1408);

assign tmp_7_fu_812_p2 = (col_assign_2_cast_fu_779_p1 + tmp_4_reg_1376);

assign tmp_7_i_fu_1012_p2 = (p_shl_i1_fu_1004_p3 - tmp_6_i_fu_1000_p1);

assign tmp_8_fu_832_p1 = $unsigned(tmp_7_cast_fu_829_p1);

assign tmp_8_i_fu_1030_p1 = col_assign_4_reg_533;

assign tmp_i_28_fu_974_p2 = ((maxValue_fu_970_p1 > maxValue_1_i_reg_475) ? 1'b1 : 1'b0);

assign tmp_i_fu_1093_p1 = row_assign_1_reg_544;

assign tmp_last_V_fu_1255_p2 = ((countWait_1_reg_632 < 9'd320) ? 1'b1 : 1'b0);

assign tmp_s_fu_676_p1 = col_assign_reg_380;

assign valInWindow_0_maxVal_fu_980_p3 = ((tmp_i_28_fu_974_p2[0:0] === 1'b1) ? maxValue_fu_970_p1 : maxValue_1_i_reg_475);

assign valInWindow_0_minVal_fu_1073_p3 = ((tmp_5_i_fu_1067_p2[0:0] === 1'b1) ? minValue_fu_1063_p1 : minValue_1_i_reg_521);

assign window_val_2_0_fu_844_p0 = kernel_q0;

assign window_val_2_0_fu_844_p1 = window_val_2_0_fu_844_p10;

assign window_val_2_0_fu_844_p10 = tmp_reg_1413;

assign window_val_2_0_fu_844_p2 = ($signed(window_val_2_0_fu_844_p0) * $signed({{1'b0}, {window_val_2_0_fu_844_p1}}));

always @ (posedge ap_clk) begin
    tmp_s_reg_1323[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //ImageProcess
