-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ImageProcess is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_KERNEL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_KERNEL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_KERNEL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_RREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_KERNEL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_BREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of ImageProcess is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ImageProcess,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.088500,HLS_SYN_LAT=3379844,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1000,HLS_SYN_LUT=2158,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_12C01 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv17_141 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101000001";
    constant ap_const_lv9_141 : STD_LOGIC_VECTOR (8 downto 0) := "101000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel : STD_LOGIC;
    signal inStream_V_data_V_0_load_A : STD_LOGIC;
    signal inStream_V_data_V_0_load_B : STD_LOGIC;
    signal inStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel : STD_LOGIC;
    signal outStream_V_data_V_1_load_A : STD_LOGIC;
    signal outStream_V_data_V_1_load_B : STD_LOGIC;
    signal outStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_in : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_in : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_in : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_10_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_10_reg_1521 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_1243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal operation_read_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1323 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lineBuff_val_1_addr_reg_1328 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_addr_reg_1333 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_keep_V_1_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_1_reg_1344 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_1_reg_1350 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_1_reg_1356 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_1_reg_1362 : STD_LOGIC_VECTOR (5 downto 0);
    signal WinRow_fu_717_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal WinRow_reg_1371 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_4_fu_735_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_1376 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal WinCol_fu_793_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal WinCol_reg_1388 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond3_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_812_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_1408 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1413 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_5_fu_901_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_5_reg_1426 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_13_i_fu_919_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_i_reg_1431 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_i2_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_4_fu_931_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal valInWindow_0_maxVal_fu_980_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i2_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_4_fu_994_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_4_reg_1452 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_7_i_fu_1012_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_i_reg_1457 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_i1_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_3_fu_1024_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal valInWindow_0_minVal_fu_1073_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i1_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_3_fu_1087_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_3_reg_1478 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_i_fu_1105_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_i_reg_1483 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_i_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_1123_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_2_fu_1137_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal accumulator_fu_1176_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_i_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_1207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_1_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14_io : BOOLEAN;
    signal row_1_fu_1215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_1_reg_1511 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_fu_1223_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_1237_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state15_io : BOOLEAN;
    signal countWait_2_fu_1249_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal countWait_2_reg_1533 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state16 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal tmp_last_V_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lineBuff_val_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_ce0 : STD_LOGIC;
    signal lineBuff_val_0_we0 : STD_LOGIC;
    signal lineBuff_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_ce0 : STD_LOGIC;
    signal lineBuff_val_1_we0 : STD_LOGIC;
    signal lineBuff_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_ce0 : STD_LOGIC;
    signal lineBuff_val_2_we0 : STD_LOGIC;
    signal lineBuff_val_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataOutSideChannel_i_reg_315 : STD_LOGIC_VECTOR (4 downto 0);
    signal dataOutSideChannel_u_reg_328 : STD_LOGIC_VECTOR (1 downto 0);
    signal dataOutSideChannel_s_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataOutSideChannel_k_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataOutSideChannel_d_reg_367 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_assign_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal countWait_reg_416 : STD_LOGIC_VECTOR (16 downto 0);
    signal row_assign_reg_428 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_assign_2_reg_440 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal row_assign_3_reg_452 : STD_LOGIC_VECTOR (1 downto 0);
    signal maxValue_i_reg_463 : STD_LOGIC_VECTOR (7 downto 0);
    signal maxValue_1_i_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_assign_5_reg_487 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_assign_2_reg_498 : STD_LOGIC_VECTOR (1 downto 0);
    signal minValue_i_reg_509 : STD_LOGIC_VECTOR (7 downto 0);
    signal minValue_1_i_reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_assign_4_reg_533 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_assign_1_reg_544 : STD_LOGIC_VECTOR (1 downto 0);
    signal valOutput_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal accumulator_1_i_reg_567 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_assign_3_reg_579 : STD_LOGIC_VECTOR (1 downto 0);
    signal valOutput_1_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixConvolved_3_fu_1182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_pixConvolved_1_phi_fu_610_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataOutSideChannel_d_1_reg_617 : STD_LOGIC_VECTOR (7 downto 0);
    signal countWait_1_reg_632 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_val_2_2_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_0_fu_844_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_1_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_2_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_3_fu_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_4_fu_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_5_fu_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_6_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_7_fu_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_8_fu_176 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_723_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_731_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_assign_cast_fu_707_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_741_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_757_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp7_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_2_cast1_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_2_cast_fu_779_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_fu_829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_val_2_0_fu_844_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_fu_844_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_i2_fu_911_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_i_fu_907_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_i_fu_937_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_946_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_946_p11 : STD_LOGIC_VECTOR (15 downto 0);
    signal maxValue_fu_970_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_28_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_i1_fu_1004_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_i_fu_1000_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_i_fu_1030_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_1039_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_1039_p11 : STD_LOGIC_VECTOR (15 downto 0);
    signal minValue_fu_1063_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_i_fu_1097_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_1093_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_1115_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_fu_1143_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1152_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1152_p11 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_1195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_2_fu_1201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal window_val_2_0_fu_844_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component ImageProcess_mux_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ImageProcess_mux_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ImageProcess_linebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ImageProcess_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ImageProcess_KERNEL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        kernel_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : IN STD_LOGIC;
        kernel_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ImageProcess_CRTL_BUS_s_axi_U : component ImageProcess_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        operation => operation);

    ImageProcess_KERNEL_BUS_s_axi_U : component ImageProcess_KERNEL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_KERNEL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_KERNEL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_KERNEL_BUS_AWVALID,
        AWREADY => s_axi_KERNEL_BUS_AWREADY,
        AWADDR => s_axi_KERNEL_BUS_AWADDR,
        WVALID => s_axi_KERNEL_BUS_WVALID,
        WREADY => s_axi_KERNEL_BUS_WREADY,
        WDATA => s_axi_KERNEL_BUS_WDATA,
        WSTRB => s_axi_KERNEL_BUS_WSTRB,
        ARVALID => s_axi_KERNEL_BUS_ARVALID,
        ARREADY => s_axi_KERNEL_BUS_ARREADY,
        ARADDR => s_axi_KERNEL_BUS_ARADDR,
        RVALID => s_axi_KERNEL_BUS_RVALID,
        RREADY => s_axi_KERNEL_BUS_RREADY,
        RDATA => s_axi_KERNEL_BUS_RDATA,
        RRESP => s_axi_KERNEL_BUS_RRESP,
        BVALID => s_axi_KERNEL_BUS_BVALID,
        BREADY => s_axi_KERNEL_BUS_BREADY,
        BRESP => s_axi_KERNEL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        kernel_address0 => kernel_address0,
        kernel_ce0 => kernel_ce0,
        kernel_q0 => kernel_q0);

    lineBuff_val_0_U : component ImageProcess_linebkb
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_0_address0,
        ce0 => lineBuff_val_0_ce0,
        we0 => lineBuff_val_0_we0,
        d0 => lineBuff_val_1_q0,
        q0 => lineBuff_val_0_q0);

    lineBuff_val_1_U : component ImageProcess_linebkb
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_1_address0,
        ce0 => lineBuff_val_1_ce0,
        we0 => lineBuff_val_1_we0,
        d0 => lineBuff_val_2_q0,
        q0 => lineBuff_val_1_q0);

    lineBuff_val_2_U : component ImageProcess_linebkb
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_2_address0,
        ce0 => lineBuff_val_2_ce0,
        we0 => lineBuff_val_2_we0,
        d0 => inStream_V_data_V_0_data_out,
        q0 => lineBuff_val_2_q0);

    ImageProcess_mux_eOg_U1 : component ImageProcess_mux_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => lineBuff_val_0_q0,
        din1 => lineBuff_val_1_q0,
        din2 => lineBuff_val_2_q0,
        din3 => row_assign_reg_428,
        dout => tmp_fu_817_p5);

    ImageProcess_mux_fYi_U2 : component ImageProcess_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => window_val_2_2_fu_144,
        din1 => window_val_2_2_1_fu_148,
        din2 => window_val_2_2_2_fu_152,
        din3 => window_val_2_2_3_fu_156,
        din4 => window_val_2_2_4_fu_160,
        din5 => window_val_2_2_5_fu_164,
        din6 => window_val_2_2_6_fu_168,
        din7 => window_val_2_2_7_fu_172,
        din8 => window_val_2_2_8_fu_176,
        din9 => tmp_13_fu_946_p10,
        dout => tmp_13_fu_946_p11);

    ImageProcess_mux_fYi_U3 : component ImageProcess_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => window_val_2_2_fu_144,
        din1 => window_val_2_2_1_fu_148,
        din2 => window_val_2_2_2_fu_152,
        din3 => window_val_2_2_3_fu_156,
        din4 => window_val_2_2_4_fu_160,
        din5 => window_val_2_2_5_fu_164,
        din6 => window_val_2_2_6_fu_168,
        din7 => window_val_2_2_7_fu_172,
        din8 => window_val_2_2_8_fu_176,
        din9 => tmp_12_fu_1039_p10,
        dout => tmp_12_fu_1039_p11);

    ImageProcess_mux_fYi_U4 : component ImageProcess_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => window_val_2_2_fu_144,
        din1 => window_val_2_2_1_fu_148,
        din2 => window_val_2_2_2_fu_152,
        din3 => window_val_2_2_3_fu_156,
        din4 => window_val_2_2_4_fu_160,
        din5 => window_val_2_2_5_fu_164,
        din6 => window_val_2_2_6_fu_168,
        din7 => window_val_2_2_7_fu_172,
        din8 => window_val_2_2_8_fu_176,
        din9 => tmp_11_fu_1152_p10,
        dout => tmp_11_fu_1152_p11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_rd <= not(inStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_in = ap_const_logic_1) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_wr <= not(inStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_rd <= not(outStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_wr <= not(outStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) and (outStream_V_data_V_1_state = ap_const_lv2_3)) or ((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    accumulator_1_i_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_1081_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                accumulator_1_i_reg_567 <= valOutput_reg_555;
            elsif (((exitcond_i_fu_1131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                accumulator_1_i_reg_567 <= accumulator_fu_1176_p2;
            end if; 
        end if;
    end process;

    col_assign_2_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                col_assign_2_reg_440 <= WinCol_reg_1388;
            elsif (((exitcond2_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_assign_2_reg_440 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    col_assign_3_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_1081_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                col_assign_3_reg_579 <= ap_const_lv2_0;
            elsif (((exitcond_i_fu_1131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                col_assign_3_reg_579 <= col_2_fu_1137_p2;
            end if; 
        end if;
    end process;

    col_assign_4_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i1_fu_988_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                col_assign_4_reg_533 <= ap_const_lv2_0;
            elsif (((exitcond_i1_fu_1018_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                col_assign_4_reg_533 <= col_3_fu_1024_p2;
            end if; 
        end if;
    end process;

    col_assign_5_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i2_fu_895_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                col_assign_5_reg_487 <= ap_const_lv2_0;
            elsif (((exitcond_i2_fu_925_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                col_assign_5_reg_487 <= col_4_fu_931_p2;
            end if; 
        end if;
    end process;

    col_assign_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io))) then 
                col_assign_reg_380 <= col_1_reg_1506;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_assign_reg_380 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    countWait_1_reg_632_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_670_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                countWait_1_reg_632 <= ap_const_lv9_0;
            elsif (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                countWait_1_reg_632 <= countWait_2_reg_1533;
            end if; 
        end if;
    end process;

    countWait_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io))) then 
                countWait_reg_416 <= phitmp_fu_1237_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                countWait_reg_416 <= ap_const_lv17_1;
            end if; 
        end if;
    end process;

    dataOutSideChannel_d_1_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                dataOutSideChannel_d_1_reg_617 <= ap_const_lv8_0;
            elsif (((or_cond_reg_1381 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io))) then 
                dataOutSideChannel_d_1_reg_617 <= valOutput_1_reg_590;
            end if; 
        end if;
    end process;

    maxValue_1_i_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i2_fu_895_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                maxValue_1_i_reg_475 <= maxValue_i_reg_463;
            elsif (((exitcond_i2_fu_925_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                maxValue_1_i_reg_475 <= valInWindow_0_maxVal_fu_980_p3;
            end if; 
        end if;
    end process;

    maxValue_i_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((operation_read_reg_1316 = ap_const_lv32_2) and (exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                maxValue_i_reg_463 <= ap_const_lv8_0;
            elsif (((exitcond_i2_fu_925_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                maxValue_i_reg_463 <= maxValue_1_i_reg_475;
            end if; 
        end if;
    end process;

    minValue_1_i_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i1_fu_988_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                minValue_1_i_reg_521 <= minValue_i_reg_509;
            elsif (((exitcond_i1_fu_1018_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                minValue_1_i_reg_521 <= valInWindow_0_minVal_fu_1073_p3;
            end if; 
        end if;
    end process;

    minValue_i_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((operation_read_reg_1316 = ap_const_lv32_1) and (exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                minValue_i_reg_509 <= ap_const_lv8_FF;
            elsif (((exitcond_i1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                minValue_i_reg_509 <= minValue_1_i_reg_521;
            end if; 
        end if;
    end process;

    pixConvolved_1_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                pixConvolved_1_reg_607 <= pixConvolved_reg_404;
            elsif (((or_cond_reg_1381 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io))) then 
                pixConvolved_1_reg_607 <= pixConvolved_3_fu_1182_p2;
            end if; 
        end if;
    end process;

    pixConvolved_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io))) then 
                pixConvolved_reg_404 <= pixConvolved_2_reg_1516;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pixConvolved_reg_404 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_assign_1_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (operation_read_reg_1316 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_assign_1_reg_544 <= ap_const_lv2_0;
            elsif (((exitcond_i_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                row_assign_1_reg_544 <= row_3_reg_1478;
            end if; 
        end if;
    end process;

    row_assign_2_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((operation_read_reg_1316 = ap_const_lv32_1) and (exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_assign_2_reg_498 <= ap_const_lv2_0;
            elsif (((exitcond_i1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                row_assign_2_reg_498 <= row_4_reg_1452;
            end if; 
        end if;
    end process;

    row_assign_3_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((operation_read_reg_1316 = ap_const_lv32_2) and (exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_assign_3_reg_452 <= ap_const_lv2_0;
            elsif (((exitcond_i2_fu_925_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                row_assign_3_reg_452 <= row_5_reg_1426;
            end if; 
        end if;
    end process;

    row_assign_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_787_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_assign_reg_428 <= WinRow_reg_1371;
            elsif (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_assign_reg_428 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    row_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io))) then 
                row_reg_392 <= row_1_reg_1511;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_392 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    valOutput_1_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i1_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                valOutput_1_reg_590 <= minValue_i_reg_509;
            elsif (((exitcond1_i2_fu_895_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                valOutput_1_reg_590 <= maxValue_i_reg_463;
            elsif ((not((operation_read_reg_1316 = ap_const_lv32_0)) and not((operation_read_reg_1316 = ap_const_lv32_1)) and not((operation_read_reg_1316 = ap_const_lv32_2)) and (exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                valOutput_1_reg_590 <= ap_const_lv8_0;
            elsif (((exitcond1_i_fu_1081_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                valOutput_1_reg_590 <= p_s_fu_1123_p3;
            end if; 
        end if;
    end process;

    valOutput_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (operation_read_reg_1316 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                valOutput_reg_555 <= ap_const_lv16_0;
            elsif (((exitcond_i_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                valOutput_reg_555 <= accumulator_1_i_reg_567;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                WinCol_reg_1388 <= WinCol_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                WinRow_reg_1371 <= WinRow_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io))) then
                col_1_reg_1506 <= col_1_fu_1207_p3;
                pixConvolved_2_reg_1516 <= pixConvolved_2_fu_1223_p3;
                row_1_reg_1511 <= row_1_fu_1215_p3;
                tmp_10_reg_1521 <= tmp_10_fu_1231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                countWait_2_reg_1533 <= countWait_2_fu_1249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io))) then
                dataOutSideChannel_d_reg_367 <= tmp_dest_V_1_reg_1362;
                dataOutSideChannel_i_reg_315 <= tmp_id_V_1_reg_1356;
                dataOutSideChannel_k_reg_354 <= tmp_keep_V_1_reg_1338;
                dataOutSideChannel_s_reg_341 <= tmp_strb_V_1_reg_1344;
                dataOutSideChannel_u_reg_328 <= tmp_user_V_1_reg_1350;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_A = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_B = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_670_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                lineBuff_val_1_addr_reg_1328 <= tmp_s_fu_676_p1(9 - 1 downto 0);
                lineBuff_val_2_addr_reg_1333 <= tmp_s_fu_676_p1(9 - 1 downto 0);
                    tmp_s_reg_1323(31 downto 0) <= tmp_s_fu_676_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                operation_read_reg_1316 <= operation;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                or_cond_reg_1381 <= or_cond_fu_773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_A = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_B = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= outStream_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= outStream_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= outStream_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= outStream_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= outStream_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= outStream_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= outStream_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= outStream_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= outStream_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= outStream_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                row_3_reg_1478 <= row_3_fu_1087_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                row_4_reg_1452 <= row_4_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                row_5_reg_1426 <= row_5_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i2_fu_895_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_13_i_reg_1431 <= tmp_13_i_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_1081_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_1_i_reg_1483 <= tmp_1_i_fu_1105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_4_reg_1376 <= tmp_4_fu_735_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i1_fu_988_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_7_i_reg_1457 <= tmp_7_i_fu_1012_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_787_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_7_reg_1408 <= tmp_7_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_dest_V_1_reg_1362 <= inStream_V_dest_V_0_data_out;
                tmp_id_V_1_reg_1356 <= inStream_V_id_V_0_data_out;
                tmp_keep_V_1_reg_1338 <= inStream_V_keep_V_0_data_out;
                tmp_strb_V_1_reg_1344 <= inStream_V_strb_V_0_data_out;
                tmp_user_V_1_reg_1350 <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_1413 <= tmp_fu_817_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((col_assign_2_reg_440 = ap_const_lv2_1) and (row_assign_reg_428 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_1_fu_148 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((col_assign_2_reg_440 = ap_const_lv2_1)) and not((col_assign_2_reg_440 = ap_const_lv2_0)) and (row_assign_reg_428 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_2_fu_152 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((row_assign_reg_428 = ap_const_lv2_1) and (col_assign_2_reg_440 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_3_fu_156 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((col_assign_2_reg_440 = ap_const_lv2_1) and (row_assign_reg_428 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_4_fu_160 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((col_assign_2_reg_440 = ap_const_lv2_1)) and not((col_assign_2_reg_440 = ap_const_lv2_0)) and (row_assign_reg_428 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_5_fu_164 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((row_assign_reg_428 = ap_const_lv2_1)) and not((row_assign_reg_428 = ap_const_lv2_0)) and (col_assign_2_reg_440 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_6_fu_168 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((row_assign_reg_428 = ap_const_lv2_1)) and not((row_assign_reg_428 = ap_const_lv2_0)) and (col_assign_2_reg_440 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_7_fu_172 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((row_assign_reg_428 = ap_const_lv2_1)) and not((col_assign_2_reg_440 = ap_const_lv2_1)) and not((col_assign_2_reg_440 = ap_const_lv2_0)) and not((row_assign_reg_428 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_8_fu_176 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((col_assign_2_reg_440 = ap_const_lv2_0) and (row_assign_reg_428 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                window_val_2_2_fu_144 <= window_val_2_0_fu_844_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_1323(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_CS_fsm_state17, operation_read_reg_1316, ap_CS_fsm_state2, exitcond1_fu_670_p2, ap_CS_fsm_state4, exitcond2_fu_711_p2, or_cond_fu_773_p2, ap_CS_fsm_state5, exitcond3_fu_787_p2, ap_CS_fsm_state8, exitcond1_i2_fu_895_p2, ap_CS_fsm_state9, exitcond_i2_fu_925_p2, ap_CS_fsm_state10, exitcond1_i1_fu_988_p2, ap_CS_fsm_state11, exitcond_i1_fu_1018_p2, ap_CS_fsm_state12, exitcond1_i_fu_1081_p2, ap_CS_fsm_state13, exitcond_i_fu_1131_p2, ap_block_state14_io, ap_block_state15_io, ap_block_state16_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_670_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (operation_read_reg_1316 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((operation_read_reg_1316 = ap_const_lv32_1) and (exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((operation_read_reg_1316 = ap_const_lv32_2) and (exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((exitcond2_fu_711_p2 = ap_const_lv1_1) and (or_cond_fu_773_p2 = ap_const_lv1_0)) or (not((operation_read_reg_1316 = ap_const_lv32_0)) and not((operation_read_reg_1316 = ap_const_lv32_1)) and not((operation_read_reg_1316 = ap_const_lv32_2)) and (exitcond2_fu_711_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond3_fu_787_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((exitcond1_i2_fu_895_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond_i2_fu_925_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((exitcond1_i1_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((exitcond_i1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((exitcond1_i_fu_1081_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((exitcond_i_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    WinCol_fu_793_p2 <= std_logic_vector(unsigned(col_assign_2_reg_440) + unsigned(ap_const_lv2_1));
    WinRow_fu_717_p2 <= std_logic_vector(unsigned(row_assign_reg_428) + unsigned(ap_const_lv2_1));
    accumulator_fu_1176_p2 <= std_logic_vector(unsigned(tmp_11_fu_1152_p11) + unsigned(accumulator_1_i_reg_567));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state14_io_assign_proc : process(outStream_V_data_V_1_ack_in, tmp_10_fu_1231_p2)
    begin
                ap_block_state14_io <= ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state15_io_assign_proc : process(outStream_V_data_V_1_ack_in, tmp_10_reg_1521)
    begin
                ap_block_state15_io <= ((tmp_10_reg_1521 = ap_const_lv1_1) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state16_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in)
    begin
                ap_block_state16 <= ((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state16_io_assign_proc : process(outStream_V_data_V_1_ack_in, exitcond_fu_1243_p2)
    begin
                ap_block_state16_io <= ((exitcond_fu_1243_p2 = ap_const_lv1_0) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state16_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4_assign_proc : process(ap_CS_fsm_state14, or_cond_reg_1381, valOutput_1_reg_590, dataOutSideChannel_d_1_reg_617)
    begin
        if (((or_cond_reg_1381 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 <= valOutput_1_reg_590;
        else 
            ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4 <= dataOutSideChannel_d_1_reg_617;
        end if; 
    end process;


    ap_phi_mux_pixConvolved_1_phi_fu_610_p4_assign_proc : process(ap_CS_fsm_state14, or_cond_reg_1381, pixConvolved_3_fu_1182_p2, pixConvolved_1_reg_607)
    begin
        if (((or_cond_reg_1381 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_phi_mux_pixConvolved_1_phi_fu_610_p4 <= pixConvolved_3_fu_1182_p2;
        else 
            ap_phi_mux_pixConvolved_1_phi_fu_610_p4 <= pixConvolved_1_reg_607;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state16_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_1_fu_1207_p3 <= 
        col_fu_1195_p2 when (tmp_1_fu_1189_p2(0) = '1') else 
        ap_const_lv32_0;
    col_2_fu_1137_p2 <= std_logic_vector(unsigned(col_assign_3_reg_579) + unsigned(ap_const_lv2_1));
    col_3_fu_1024_p2 <= std_logic_vector(unsigned(col_assign_4_reg_533) + unsigned(ap_const_lv2_1));
    col_4_fu_931_p2 <= std_logic_vector(unsigned(col_assign_5_reg_487) + unsigned(ap_const_lv2_1));
    col_assign_1_fu_799_p2 <= std_logic_vector(unsigned(pixConvolved_reg_404) + unsigned(col_assign_2_cast1_fu_783_p1));
    col_assign_2_cast1_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_2_reg_440),32));
    col_assign_2_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_2_reg_440),5));
    col_fu_1195_p2 <= std_logic_vector(unsigned(col_assign_reg_380) + unsigned(ap_const_lv32_1));
    countWait_2_fu_1249_p2 <= std_logic_vector(unsigned(countWait_1_reg_632) + unsigned(ap_const_lv9_1));
    exitcond1_fu_670_p2 <= "1" when (countWait_reg_416 = ap_const_lv17_12C01) else "0";
    exitcond1_i1_fu_988_p2 <= "1" when (row_assign_2_reg_498 = ap_const_lv2_3) else "0";
    exitcond1_i2_fu_895_p2 <= "1" when (row_assign_3_reg_452 = ap_const_lv2_3) else "0";
    exitcond1_i_fu_1081_p2 <= "1" when (row_assign_1_reg_544 = ap_const_lv2_3) else "0";
    exitcond2_fu_711_p2 <= "1" when (row_assign_reg_428 = ap_const_lv2_3) else "0";
    exitcond3_fu_787_p2 <= "1" when (col_assign_2_reg_440 = ap_const_lv2_3) else "0";
    exitcond_fu_1243_p2 <= "1" when (countWait_1_reg_632 = ap_const_lv9_141) else "0";
    exitcond_i1_fu_1018_p2 <= "1" when (col_assign_4_reg_533 = ap_const_lv2_3) else "0";
    exitcond_i2_fu_925_p2 <= "1" when (col_assign_5_reg_487 = ap_const_lv2_3) else "0";
    exitcond_i_fu_1131_p2 <= "1" when (col_assign_3_reg_579 = ap_const_lv2_3) else "0";
    icmp7_fu_767_p2 <= "1" when (signed(tmp_3_fu_757_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_751_p2 <= "1" when (signed(tmp_2_fu_741_p4) > signed(ap_const_lv31_0)) else "0";

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inStream_TDATA_blk_n <= inStream_V_data_V_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_V_0_ack_in <= inStream_V_data_V_0_state(1);

    inStream_V_data_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_V_0_data_out_assign_proc : process(inStream_V_data_V_0_payload_A, inStream_V_data_V_0_payload_B, inStream_V_data_V_0_sel)
    begin
        if ((inStream_V_data_V_0_sel = ap_const_logic_1)) then 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_B;
        else 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inStream_V_data_V_0_load_A <= (inStream_V_data_V_0_state_cmp_full and not(inStream_V_data_V_0_sel_wr));
    inStream_V_data_V_0_load_B <= (inStream_V_data_V_0_state_cmp_full and inStream_V_data_V_0_sel_wr);
    inStream_V_data_V_0_sel <= inStream_V_data_V_0_sel_rd;
    inStream_V_data_V_0_state_cmp_full <= '0' when (inStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_V_0_vld_in <= inStream_TVALID;
    inStream_V_data_V_0_vld_out <= inStream_V_data_V_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    kernel_address0 <= tmp_8_fu_832_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_address0_assign_proc : process(ap_CS_fsm_state3, tmp_s_reg_1323, ap_CS_fsm_state5, tmp_6_fu_805_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lineBuff_val_0_address0 <= tmp_6_fu_805_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lineBuff_val_0_address0 <= tmp_s_reg_1323(9 - 1 downto 0);
        else 
            lineBuff_val_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_0_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lineBuff_val_0_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_we0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            lineBuff_val_0_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_address0_assign_proc : process(ap_CS_fsm_state3, tmp_s_fu_676_p1, ap_CS_fsm_state2, lineBuff_val_1_addr_reg_1328, ap_CS_fsm_state5, tmp_6_fu_805_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lineBuff_val_1_address0 <= tmp_6_fu_805_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lineBuff_val_1_address0 <= lineBuff_val_1_addr_reg_1328;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lineBuff_val_1_address0 <= tmp_s_fu_676_p1(9 - 1 downto 0);
        else 
            lineBuff_val_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lineBuff_val_1_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_we0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            lineBuff_val_1_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_address0_assign_proc : process(ap_CS_fsm_state3, tmp_s_fu_676_p1, ap_CS_fsm_state2, lineBuff_val_2_addr_reg_1333, ap_CS_fsm_state5, tmp_6_fu_805_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lineBuff_val_2_address0 <= tmp_6_fu_805_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lineBuff_val_2_address0 <= lineBuff_val_2_addr_reg_1333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lineBuff_val_2_address0 <= tmp_s_fu_676_p1(9 - 1 downto 0);
        else 
            lineBuff_val_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lineBuff_val_2_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_we0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            lineBuff_val_2_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    maxValue_fu_970_p1 <= tmp_13_fu_946_p11(8 - 1 downto 0);
    minValue_fu_1063_p1 <= tmp_12_fu_1039_p11(8 - 1 downto 0);
    or_cond_fu_773_p2 <= (icmp_fu_751_p2 and icmp7_fu_767_p2);
    outStream_TDATA <= outStream_V_data_V_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_V_1_state, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state15, tmp_10_reg_1521, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_reg_1521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_V_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_V_1_ack_in <= outStream_V_data_V_1_state(1);
    outStream_V_data_V_1_ack_out <= outStream_TREADY;

    outStream_V_data_V_1_data_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            outStream_V_data_V_1_data_in <= ap_const_lv8_0;
        elsif (((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outStream_V_data_V_1_data_in <= ap_phi_mux_dataOutSideChannel_d_1_phi_fu_622_p4;
        else 
            outStream_V_data_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    outStream_V_data_V_1_data_out_assign_proc : process(outStream_V_data_V_1_payload_A, outStream_V_data_V_1_payload_B, outStream_V_data_V_1_sel)
    begin
        if ((outStream_V_data_V_1_sel = ap_const_logic_1)) then 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_B;
        else 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outStream_V_data_V_1_load_A <= (outStream_V_data_V_1_state_cmp_full and not(outStream_V_data_V_1_sel_wr));
    outStream_V_data_V_1_load_B <= (outStream_V_data_V_1_state_cmp_full and outStream_V_data_V_1_sel_wr);
    outStream_V_data_V_1_sel <= outStream_V_data_V_1_sel_rd;
    outStream_V_data_V_1_state_cmp_full <= '0' when (outStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state14_io, ap_block_state16_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io)))) then 
            outStream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_V_1_vld_out <= outStream_V_data_V_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, tmp_dest_V_1_reg_1362, dataOutSideChannel_d_reg_367)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            outStream_V_dest_V_1_data_in <= dataOutSideChannel_d_reg_367;
        elsif (((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outStream_V_dest_V_1_data_in <= tmp_dest_V_1_reg_1362;
        else 
            outStream_V_dest_V_1_data_in <= "XXXXXX";
        end if; 
    end process;


    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state14_io, ap_block_state16_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io)))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, tmp_id_V_1_reg_1356, dataOutSideChannel_i_reg_315)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            outStream_V_id_V_1_data_in <= dataOutSideChannel_i_reg_315;
        elsif (((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outStream_V_id_V_1_data_in <= tmp_id_V_1_reg_1356;
        else 
            outStream_V_id_V_1_data_in <= "XXXXX";
        end if; 
    end process;


    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state14_io, ap_block_state16_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io)))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, tmp_keep_V_1_reg_1338, dataOutSideChannel_k_reg_354)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            outStream_V_keep_V_1_data_in <= dataOutSideChannel_k_reg_354;
        elsif (((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outStream_V_keep_V_1_data_in <= tmp_keep_V_1_reg_1338;
        else 
            outStream_V_keep_V_1_data_in <= "X";
        end if; 
    end process;


    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state14_io, ap_block_state16_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io)))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, tmp_last_V_fu_1255_p2)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            outStream_V_last_V_1_data_in <= tmp_last_V_fu_1255_p2;
        elsif (((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outStream_V_last_V_1_data_in <= ap_const_lv1_0;
        else 
            outStream_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state14_io, ap_block_state16_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io)))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, tmp_strb_V_1_reg_1344, dataOutSideChannel_s_reg_341)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            outStream_V_strb_V_1_data_in <= dataOutSideChannel_s_reg_341;
        elsif (((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outStream_V_strb_V_1_data_in <= tmp_strb_V_1_reg_1344;
        else 
            outStream_V_strb_V_1_data_in <= "X";
        end if; 
    end process;


    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state14_io, ap_block_state16_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io)))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, tmp_user_V_1_reg_1350, dataOutSideChannel_u_reg_328)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            outStream_V_user_V_1_data_in <= dataOutSideChannel_u_reg_328;
        elsif (((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outStream_V_user_V_1_data_in <= tmp_user_V_1_reg_1350;
        else 
            outStream_V_user_V_1_data_in <= "XX";
        end if; 
    end process;


    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state14, tmp_10_fu_1231_p2, ap_CS_fsm_state16, exitcond_fu_1243_p2, ap_block_state14_io, ap_block_state16_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state16_io) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond_fu_1243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_10_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_io)))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    p_s_fu_1123_p3 <= 
        ap_const_lv8_0 when (tmp_14_fu_1115_p3(0) = '1') else 
        tmp_5_fu_1111_p1;
    p_shl_cast_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_723_p3),5));
    p_shl_fu_723_p3 <= (row_assign_reg_428 & ap_const_lv2_0);
    p_shl_i1_fu_1004_p3 <= (row_assign_2_reg_498 & ap_const_lv2_0);
    p_shl_i2_fu_911_p3 <= (row_assign_3_reg_452 & ap_const_lv2_0);
    p_shl_i_fu_1097_p3 <= (row_assign_1_reg_544 & ap_const_lv2_0);
    phitmp_fu_1237_p2 <= std_logic_vector(unsigned(countWait_reg_416) + unsigned(ap_const_lv17_1));
    pixConvolved_2_fu_1223_p3 <= 
        ap_phi_mux_pixConvolved_1_phi_fu_610_p4 when (tmp_1_fu_1189_p2(0) = '1') else 
        ap_const_lv32_0;
    pixConvolved_3_fu_1182_p2 <= std_logic_vector(unsigned(pixConvolved_reg_404) + unsigned(ap_const_lv32_1));
    row_1_fu_1215_p3 <= 
        row_reg_392 when (tmp_1_fu_1189_p2(0) = '1') else 
        row_2_fu_1201_p2;
    row_2_fu_1201_p2 <= std_logic_vector(unsigned(row_reg_392) + unsigned(ap_const_lv32_1));
    row_3_fu_1087_p2 <= std_logic_vector(unsigned(row_assign_1_reg_544) + unsigned(ap_const_lv2_1));
    row_4_fu_994_p2 <= std_logic_vector(unsigned(row_assign_2_reg_498) + unsigned(ap_const_lv2_1));
    row_5_fu_901_p2 <= std_logic_vector(unsigned(row_assign_3_reg_452) + unsigned(ap_const_lv2_1));
    row_assign_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_assign_reg_428),5));
    tmp_10_fu_1231_p2 <= "1" when (unsigned(countWait_reg_416) > unsigned(ap_const_lv17_141)) else "0";
    tmp_11_fu_1152_p10 <= std_logic_vector(unsigned(tmp_1_i_reg_1483) + unsigned(tmp_2_i_fu_1143_p1));
    tmp_12_fu_1039_p10 <= std_logic_vector(unsigned(tmp_7_i_reg_1457) + unsigned(tmp_8_i_fu_1030_p1));
    tmp_12_i_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_assign_3_reg_452),4));
    tmp_13_fu_946_p10 <= std_logic_vector(unsigned(tmp_13_i_reg_1431) + unsigned(tmp_14_i_fu_937_p1));
    tmp_13_i_fu_919_p2 <= std_logic_vector(unsigned(p_shl_i2_fu_911_p3) - unsigned(tmp_12_i_fu_907_p1));
    tmp_14_fu_1115_p3 <= valOutput_reg_555(15 downto 15);
    tmp_14_i_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_5_reg_487),4));
    tmp_1_fu_1189_p2 <= "1" when (signed(col_assign_reg_380) < signed(ap_const_lv32_13F)) else "0";
    tmp_1_i_fu_1105_p2 <= std_logic_vector(unsigned(p_shl_i_fu_1097_p3) - unsigned(tmp_i_fu_1093_p1));
    tmp_2_fu_741_p4 <= row_reg_392(31 downto 1);
    tmp_2_i_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_3_reg_579),4));
    tmp_3_fu_757_p4 <= col_assign_reg_380(31 downto 1);
    tmp_4_fu_735_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_731_p1) - unsigned(row_assign_cast_fu_707_p1));
    tmp_5_fu_1111_p1 <= valOutput_reg_555(8 - 1 downto 0);
    tmp_5_i_fu_1067_p2 <= "1" when (unsigned(minValue_fu_1063_p1) < unsigned(minValue_1_i_reg_521)) else "0";
    tmp_6_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_1_fu_799_p2),64));
    tmp_6_i_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_assign_2_reg_498),4));
        tmp_7_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_1408),32));

    tmp_7_fu_812_p2 <= std_logic_vector(unsigned(col_assign_2_cast_fu_779_p1) + unsigned(tmp_4_reg_1376));
    tmp_7_i_fu_1012_p2 <= std_logic_vector(unsigned(p_shl_i1_fu_1004_p3) - unsigned(tmp_6_i_fu_1000_p1));
    tmp_8_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_829_p1),64));
    tmp_8_i_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_4_reg_533),4));
    tmp_i_28_fu_974_p2 <= "1" when (unsigned(maxValue_fu_970_p1) > unsigned(maxValue_1_i_reg_475)) else "0";
    tmp_i_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_assign_1_reg_544),4));
    tmp_last_V_fu_1255_p2 <= "1" when (unsigned(countWait_1_reg_632) < unsigned(ap_const_lv9_140)) else "0";
    tmp_s_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_380),64));
    valInWindow_0_maxVal_fu_980_p3 <= 
        maxValue_fu_970_p1 when (tmp_i_28_fu_974_p2(0) = '1') else 
        maxValue_1_i_reg_475;
    valInWindow_0_minVal_fu_1073_p3 <= 
        minValue_fu_1063_p1 when (tmp_5_i_fu_1067_p2(0) = '1') else 
        minValue_1_i_reg_521;
    window_val_2_0_fu_844_p0 <= kernel_q0;
    window_val_2_0_fu_844_p1 <= window_val_2_0_fu_844_p10(8 - 1 downto 0);
    window_val_2_0_fu_844_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1413),16));
    window_val_2_0_fu_844_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_val_2_0_fu_844_p0) * signed('0' &window_val_2_0_fu_844_p1))), 16));
end behav;
