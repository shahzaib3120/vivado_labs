// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "divide.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic divide::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic divide::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> divide::ap_ST_fsm_state1 = "1";
const sc_lv<3> divide::ap_ST_fsm_state2 = "10";
const sc_lv<3> divide::ap_ST_fsm_state3 = "100";
const sc_lv<32> divide::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> divide::ap_const_lv32_1 = "1";
const sc_lv<1> divide::ap_const_lv1_0 = "0";
const sc_lv<32> divide::ap_const_lv32_2 = "10";
const sc_lv<4> divide::ap_const_lv4_7 = "111";
const sc_lv<8> divide::ap_const_lv8_0 = "00000000";
const sc_lv<1> divide::ap_const_lv1_1 = "1";
const sc_lv<32> divide::ap_const_lv32_3 = "11";
const sc_lv<8> divide::ap_const_lv8_1 = "1";
const sc_lv<4> divide::ap_const_lv4_F = "1111";
const bool divide::ap_const_boolean_1 = true;

divide::divide(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Q);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_86_p2 );
    sensitive << ( tmp_reg_202 );
    sensitive << ( tmp_s_fu_151_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );
    sensitive << ( tmp_7_fu_164_p2 );

    SC_METHOD(thread_Q_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_86_p2 );
    sensitive << ( tmp_reg_202 );
    sensitive << ( tmp_s_fu_151_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );

    SC_METHOD(thread_R);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_86_p2 );
    sensitive << ( tmp_reg_202 );
    sensitive << ( tmp_s_reg_224 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );
    sensitive << ( tmp_6_reg_228 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_142_p3 );

    SC_METHOD(thread_R_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_86_p2 );
    sensitive << ( tmp_reg_202 );
    sensitive << ( tmp_s_reg_224 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_reg_202 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_reg_202 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );

    SC_METHOD(thread_iBitN_fu_128_p2);
    sensitive << ( i_cast_fu_102_p1 );
    sensitive << ( tmp_5_fu_123_p2 );

    SC_METHOD(thread_i_1_fu_185_p2);
    sensitive << ( i_reg_74 );

    SC_METHOD(thread_i_cast_fu_102_p1);
    sensitive << ( i_reg_74 );

    SC_METHOD(thread_tmp_1_fu_106_p3);
    sensitive << ( i_reg_74 );

    SC_METHOD(thread_tmp_2_fu_134_p1);
    sensitive << ( iBitN_fu_128_p2 );

    SC_METHOD(thread_tmp_3_fu_138_p1);
    sensitive << ( R_load_fu_38 );

    SC_METHOD(thread_tmp_4_fu_117_p2);
    sensitive << ( i_cast_fu_102_p1 );

    SC_METHOD(thread_tmp_5_fu_123_p2);
    sensitive << ( N );
    sensitive << ( tmp_4_fu_117_p2 );

    SC_METHOD(thread_tmp_6_fu_159_p2);
    sensitive << ( D );
    sensitive << ( tmp_9_fu_142_p3 );

    SC_METHOD(thread_tmp_7_fu_164_p2);
    sensitive << ( Q_load_fu_42 );
    sensitive << ( tmp_4_fu_117_p2 );

    SC_METHOD(thread_tmp_9_fu_142_p3);
    sensitive << ( tmp_3_fu_138_p1 );
    sensitive << ( tmp_2_fu_134_p1 );

    SC_METHOD(thread_tmp_fu_86_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( D );

    SC_METHOD(thread_tmp_s_fu_151_p2);
    sensitive << ( D );
    sensitive << ( tmp_reg_202 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );
    sensitive << ( tmp_9_fu_142_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_reg_202 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_106_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "divide_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, N, "(port)N");
    sc_trace(mVcdFile, D, "(port)D");
    sc_trace(mVcdFile, Q, "(port)Q");
    sc_trace(mVcdFile, Q_ap_vld, "(port)Q_ap_vld");
    sc_trace(mVcdFile, R, "(port)R");
    sc_trace(mVcdFile, R_ap_vld, "(port)R_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_86_p2, "tmp_fu_86_p2");
    sc_trace(mVcdFile, tmp_reg_202, "tmp_reg_202");
    sc_trace(mVcdFile, tmp_s_fu_151_p2, "tmp_s_fu_151_p2");
    sc_trace(mVcdFile, tmp_s_reg_224, "tmp_s_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_106_p3, "tmp_1_fu_106_p3");
    sc_trace(mVcdFile, tmp_6_fu_159_p2, "tmp_6_fu_159_p2");
    sc_trace(mVcdFile, tmp_6_reg_228, "tmp_6_reg_228");
    sc_trace(mVcdFile, i_1_fu_185_p2, "i_1_fu_185_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_reg_74, "i_reg_74");
    sc_trace(mVcdFile, R_load_fu_38, "R_load_fu_38");
    sc_trace(mVcdFile, tmp_9_fu_142_p3, "tmp_9_fu_142_p3");
    sc_trace(mVcdFile, Q_load_fu_42, "Q_load_fu_42");
    sc_trace(mVcdFile, tmp_7_fu_164_p2, "tmp_7_fu_164_p2");
    sc_trace(mVcdFile, i_cast_fu_102_p1, "i_cast_fu_102_p1");
    sc_trace(mVcdFile, tmp_4_fu_117_p2, "tmp_4_fu_117_p2");
    sc_trace(mVcdFile, tmp_5_fu_123_p2, "tmp_5_fu_123_p2");
    sc_trace(mVcdFile, iBitN_fu_128_p2, "iBitN_fu_128_p2");
    sc_trace(mVcdFile, tmp_3_fu_138_p1, "tmp_3_fu_138_p1");
    sc_trace(mVcdFile, tmp_2_fu_134_p1, "tmp_2_fu_134_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("divide.hdltvin.dat");
    mHdltvoutHandle.open("divide.hdltvout.dat");
}

divide::~divide() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void divide::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_s_fu_151_p2.read(), ap_const_lv1_0))) {
        Q_load_fu_42 = tmp_7_fu_164_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(tmp_fu_86_p2.read(), ap_const_lv1_0))) {
        Q_load_fu_42 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_s_reg_224.read(), ap_const_lv1_0))) {
        R_load_fu_38 = tmp_6_reg_228.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_s_fu_151_p2.read(), ap_const_lv1_1))) {
        R_load_fu_38 = tmp_9_fu_142_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(tmp_fu_86_p2.read(), ap_const_lv1_0))) {
        R_load_fu_38 = ap_const_lv8_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_74 = i_1_fu_185_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(tmp_fu_86_p2.read(), ap_const_lv1_0))) {
        i_reg_74 = ap_const_lv4_7;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_151_p2.read(), ap_const_lv1_0))) {
        tmp_6_reg_228 = tmp_6_fu_159_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_reg_202 = tmp_fu_86_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_s_reg_224 = tmp_s_fu_151_p2.read();
    }
}

void divide::thread_Q() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_s_fu_151_p2.read(), ap_const_lv1_0))) {
        Q = tmp_7_fu_164_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(tmp_fu_86_p2.read(), ap_const_lv1_0))) {
        Q = ap_const_lv8_0;
    } else {
        Q = "XXXXXXXX";
    }
}

void divide::thread_Q_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_s_fu_151_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(tmp_fu_86_p2.read(), ap_const_lv1_0)))) {
        Q_ap_vld = ap_const_logic_1;
    } else {
        Q_ap_vld = ap_const_logic_0;
    }
}

void divide::thread_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_s_reg_224.read(), ap_const_lv1_0))) {
        R = tmp_6_reg_228.read();
    } else if ((esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        R = tmp_9_fu_142_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(tmp_fu_86_p2.read(), ap_const_lv1_0))) {
        R = ap_const_lv8_0;
    } else {
        R = "XXXXXXXX";
    }
}

void divide::thread_R_ap_vld() {
    if (((esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(tmp_fu_86_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_s_reg_224.read(), ap_const_lv1_0)))) {
        R_ap_vld = ap_const_logic_1;
    } else {
        R_ap_vld = ap_const_logic_0;
    }
}

void divide::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void divide::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void divide::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void divide::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         (esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void divide::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void divide::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         (esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_1)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void divide::thread_iBitN_fu_128_p2() {
    iBitN_fu_128_p2 = (!i_cast_fu_102_p1.read().is_01())? sc_lv<8>(): tmp_5_fu_123_p2.read() >> (unsigned short)i_cast_fu_102_p1.read().to_uint();
}

void divide::thread_i_1_fu_185_p2() {
    i_1_fu_185_p2 = (!i_reg_74.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_bigint<4>(i_reg_74.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void divide::thread_i_cast_fu_102_p1() {
    i_cast_fu_102_p1 = esl_sext<8,4>(i_reg_74.read());
}

void divide::thread_tmp_1_fu_106_p3() {
    tmp_1_fu_106_p3 = i_reg_74.read().range(3, 3);
}

void divide::thread_tmp_2_fu_134_p1() {
    tmp_2_fu_134_p1 = iBitN_fu_128_p2.read().range(1-1, 0);
}

void divide::thread_tmp_3_fu_138_p1() {
    tmp_3_fu_138_p1 = R_load_fu_38.read().range(7-1, 0);
}

void divide::thread_tmp_4_fu_117_p2() {
    tmp_4_fu_117_p2 = (!i_cast_fu_102_p1.read().is_01())? sc_lv<8>(): ap_const_lv8_1 << (unsigned short)i_cast_fu_102_p1.read().to_uint();
}

void divide::thread_tmp_5_fu_123_p2() {
    tmp_5_fu_123_p2 = (tmp_4_fu_117_p2.read() & N.read());
}

void divide::thread_tmp_6_fu_159_p2() {
    tmp_6_fu_159_p2 = (!tmp_9_fu_142_p3.read().is_01() || !D.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_9_fu_142_p3.read()) - sc_biguint<8>(D.read()));
}

void divide::thread_tmp_7_fu_164_p2() {
    tmp_7_fu_164_p2 = (Q_load_fu_42.read() | tmp_4_fu_117_p2.read());
}

void divide::thread_tmp_9_fu_142_p3() {
    tmp_9_fu_142_p3 = esl_concat<7,1>(tmp_3_fu_138_p1.read(), tmp_2_fu_134_p1.read());
}

void divide::thread_tmp_fu_86_p2() {
    tmp_fu_86_p2 = (!D.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(D.read() == ap_const_lv8_0);
}

void divide::thread_tmp_s_fu_151_p2() {
    tmp_s_fu_151_p2 = (!tmp_9_fu_142_p3.read().is_01() || !D.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_9_fu_142_p3.read()) < sc_biguint<8>(D.read()));
}

void divide::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && (esl_seteq<1,1,1>(tmp_1_fu_106_p3.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_reg_202.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void divide::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"N\" :  \"" << N.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"D\" :  \"" << D.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Q\" :  \"" << Q.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Q_ap_vld\" :  \"" << Q_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"R\" :  \"" << R.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"R_ap_vld\" :  \"" << R_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

