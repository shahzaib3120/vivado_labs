// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _divide_HH_
#define _divide_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct divide : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > N;
    sc_in< sc_lv<8> > D;
    sc_out< sc_lv<8> > Q;
    sc_out< sc_logic > Q_ap_vld;
    sc_out< sc_lv<8> > R;
    sc_out< sc_logic > R_ap_vld;


    // Module declarations
    divide(sc_module_name name);
    SC_HAS_PROCESS(divide);

    ~divide();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_86_p2;
    sc_signal< sc_lv<1> > tmp_reg_202;
    sc_signal< sc_lv<1> > tmp_s_fu_151_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_224;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_1_fu_106_p3;
    sc_signal< sc_lv<8> > tmp_6_fu_159_p2;
    sc_signal< sc_lv<8> > tmp_6_reg_228;
    sc_signal< sc_lv<4> > i_1_fu_185_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > i_reg_74;
    sc_signal< sc_lv<8> > R_load_fu_38;
    sc_signal< sc_lv<8> > tmp_9_fu_142_p3;
    sc_signal< sc_lv<8> > Q_load_fu_42;
    sc_signal< sc_lv<8> > tmp_7_fu_164_p2;
    sc_signal< sc_lv<8> > i_cast_fu_102_p1;
    sc_signal< sc_lv<8> > tmp_4_fu_117_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_123_p2;
    sc_signal< sc_lv<8> > iBitN_fu_128_p2;
    sc_signal< sc_lv<7> > tmp_3_fu_138_p1;
    sc_signal< sc_lv<1> > tmp_2_fu_134_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Q();
    void thread_Q_ap_vld();
    void thread_R();
    void thread_R_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_iBitN_fu_128_p2();
    void thread_i_1_fu_185_p2();
    void thread_i_cast_fu_102_p1();
    void thread_tmp_1_fu_106_p3();
    void thread_tmp_2_fu_134_p1();
    void thread_tmp_3_fu_138_p1();
    void thread_tmp_4_fu_117_p2();
    void thread_tmp_5_fu_123_p2();
    void thread_tmp_6_fu_159_p2();
    void thread_tmp_7_fu_164_p2();
    void thread_tmp_9_fu_142_p3();
    void thread_tmp_fu_86_p2();
    void thread_tmp_s_fu_151_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
