-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity find is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_r : IN STD_LOGIC_VECTOR (7 downto 0);
    in_vec_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_vec_empty_n : IN STD_LOGIC;
    in_vec_read : OUT STD_LOGIC;
    out_vec_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_vec_full_n : IN STD_LOGIC;
    out_vec_write : OUT STD_LOGIC );
end;


architecture behav of find is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "find,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.185000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=12,HLS_SYN_LUT=83,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_vec_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_vec_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_72_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_95 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_1_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_55 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_55_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_vec_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_55 <= i_1_reg_95;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_55 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_95 <= i_1_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0))) and (exitcond_fu_66_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_100 <= tmp_1_fu_78_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_vec_empty_n, out_vec_full_n, ap_CS_fsm_state2, exitcond_fu_66_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0))) and (exitcond_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0))) and (exitcond_fu_66_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((out_vec_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(in_vec_empty_n, exitcond_fu_66_p2)
    begin
                ap_block_state2 <= ((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(in_vec_empty_n, ap_CS_fsm_state2, exitcond_fu_66_p2)
    begin
        if ((not(((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0))) and (exitcond_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in_vec_empty_n, ap_CS_fsm_state2, exitcond_fu_66_p2)
    begin
        if ((not(((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0))) and (exitcond_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_66_p2 <= "1" when (i_reg_55 = ap_const_lv4_A) else "0";
    i_1_fu_72_p2 <= std_logic_vector(unsigned(i_reg_55) + unsigned(ap_const_lv4_1));

    in_vec_blk_n_assign_proc : process(in_vec_empty_n, ap_CS_fsm_state2, exitcond_fu_66_p2)
    begin
        if (((exitcond_fu_66_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_vec_blk_n <= in_vec_empty_n;
        else 
            in_vec_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_vec_read_assign_proc : process(in_vec_empty_n, ap_CS_fsm_state2, exitcond_fu_66_p2)
    begin
        if ((not(((exitcond_fu_66_p2 = ap_const_lv1_0) and (in_vec_empty_n = ap_const_logic_0))) and (exitcond_fu_66_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_vec_read <= ap_const_logic_1;
        else 
            in_vec_read <= ap_const_logic_0;
        end if; 
    end process;


    out_vec_blk_n_assign_proc : process(out_vec_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_vec_blk_n <= out_vec_full_n;
        else 
            out_vec_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_vec_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_100),8));

    out_vec_write_assign_proc : process(out_vec_full_n, ap_CS_fsm_state3)
    begin
        if (((out_vec_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_vec_write <= ap_const_logic_1;
        else 
            out_vec_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_78_p2 <= "1" when (in_vec_dout = val_r) else "0";
end behav;
