-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity distPoints_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x1_V : IN STD_LOGIC_VECTOR (15 downto 0);
    y1_V : IN STD_LOGIC_VECTOR (15 downto 0);
    x2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    y2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of distPoints_fix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "distPoints_fix,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.927000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1409,HLS_SYN_LUT=2699,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_6A : STD_LOGIC_VECTOR (7 downto 0) := "01101010";
    constant ap_const_lv8_69 : STD_LOGIC_VECTOR (7 downto 0) := "01101001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_FF5 : STD_LOGIC_VECTOR (11 downto 0) := "111111110101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_V_fu_149_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_reg_675 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_1_fu_658_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_1_reg_680 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_3_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal is_neg_fu_181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_193_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_4_reg_695 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_4_cast_fu_200_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_4_cast_reg_701 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal msb_idx_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_239_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_reg_711 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_3_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_3_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp32_V_6_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_6_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_2_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal isneg_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exp_tmp_V_reg_752 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_414_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_36_reg_757 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_13_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_444_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_768 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_14_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_475_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_779 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_489_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_reg_791 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp9_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp9_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_fu_141_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_145_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_155_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_159_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_fu_163_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_664_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_fu_188_p2 : STD_LOGIC_VECTOR (33 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_7_fu_188_p2 : signal is "no";
    signal p_Result_s_fu_203_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Result_1_fu_213_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_221_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal num_zeros_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_1_fu_251_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_fu_261_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal msb_idx_1_cast_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_292_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_29_fu_296_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_302_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_31_fu_306_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_1_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_2_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_327_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp24_cast_cast_fu_346_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_trunc_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_359_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_2_fu_366_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_assign_fu_133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_392_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_12_fu_427_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_3_fu_434_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_438_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_10_fu_424_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_451_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_463_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_469_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_38_fu_493_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal sh_amt_cast_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_517_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_21_fu_521_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_23_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_526_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_530_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_609_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel1_fu_623_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond1_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_636_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_658_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal OP1_V_1_fu_169_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_1_fu_658_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_664_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal OP1_V_fu_173_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_664_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component distPoints_fix_uibkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component distPoints_fix_fpcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component distPoints_fix_fsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component distPoints_fix_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component distPoints_fix_mafYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;



begin
    distPoints_fix_uibkb_U1 : component distPoints_fix_uibkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp32_V_3_reg_721,
        ce => ap_const_logic_1,
        dout => grp_fu_130_p1);

    distPoints_fix_fpcud_U2 : component distPoints_fix_fpcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => v_assign_reg_741,
        dout => d_assign_fu_133_p1);

    distPoints_fix_fsdEe_U3 : component distPoints_fix_fsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => temp_reg_736,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    distPoints_fix_mueOg_U4 : component distPoints_fix_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => p_Val2_1_fu_658_p0,
        din1 => p_Val2_1_fu_658_p1,
        dout => p_Val2_1_fu_658_p2);

    distPoints_fix_mafYi_U5 : component distPoints_fix_mafYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 34)
    port map (
        din0 => grp_fu_664_p0,
        din1 => grp_fu_664_p1,
        din2 => p_Val2_1_reg_680,
        dout => grp_fu_664_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                exp_tmp_V_reg_752 <= ireg_V_fu_388_p1(62 downto 52);
                isneg_reg_746 <= ireg_V_fu_388_p1(63 downto 63);
                tmp_13_reg_762 <= tmp_13_fu_418_p2;
                tmp_36_reg_757 <= tmp_36_fu_414_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                icmp9_reg_797 <= icmp9_fu_503_p2;
                man_V_2_reg_768 <= man_V_2_fu_444_p3;
                sh_amt_reg_779 <= sh_amt_fu_475_p3;
                tmp_14_reg_773 <= tmp_14_fu_457_p2;
                tmp_17_reg_785 <= tmp_17_fu_483_p2;
                tmp_37_reg_791 <= tmp_37_fu_489_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                is_neg_reg_690 <= grp_fu_664_p3(33 downto 33);
                p_Val2_4_reg_695 <= p_Val2_4_fu_193_p3;
                tmp_3_reg_685 <= tmp_3_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                msb_idx_reg_706 <= msb_idx_fu_233_p2;
                p_Val2_4_cast_reg_701 <= p_Val2_4_cast_fu_200_p1;
                tmp_11_reg_716 <= msb_idx_fu_233_p2(31 downto 31);
                tmp_9_reg_711 <= tmp_9_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Val2_1_reg_680 <= p_Val2_1_fu_658_p2;
                r_V_reg_675 <= r_V_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                temp_reg_736 <= temp_fu_381_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp32_V_3_reg_721 <= tmp32_V_3_fu_315_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp32_V_6_reg_726 <= tmp32_V_6_fu_323_p1;
                tmp_2_reg_731 <= tmp_2_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                v_assign_reg_741 <= grp_fu_136_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_10_fu_424_p1));
        OP1_V_1_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_163_p2),34));

        OP1_V_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_675),34));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        newSel2_fu_636_p3 when (or_cond2_fu_644_p2(0) = '1') else 
        ap_const_lv16_0;
    f_fu_377_p1 <= p_Result_2_fu_366_p5;
    grp_fu_664_p0 <= OP1_V_fu_173_p1(17 - 1 downto 0);
    grp_fu_664_p1 <= OP1_V_fu_173_p1(17 - 1 downto 0);
    icmp9_fu_503_p2 <= "1" when (tmp_38_fu_493_p4 = ap_const_lv8_0) else "0";
    icmp_fu_271_p2 <= "1" when (tmp_20_fu_261_p4 = ap_const_lv26_0) else "0";
    ireg_V_fu_388_p1 <= d_assign_fu_133_p1;
    is_neg_fu_181_p3 <= grp_fu_664_p3(33 downto 33);
    man_V_1_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_3_fu_434_p1));
    man_V_2_fu_444_p3 <= 
        man_V_1_fu_438_p2 when (isneg_reg_746(0) = '1') else 
        p_Result_3_fu_434_p1;
    msb_idx_1_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(msb_idx_1_fu_251_p3),32));
    msb_idx_1_fu_251_p3 <= 
        ap_const_lv31_0 when (tmp_11_reg_716(0) = '1') else 
        tmp_9_reg_711;
    msb_idx_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv32_22) - unsigned(num_zeros_fu_229_p1));
    newSel1_fu_623_p3 <= 
        tmp_22_fu_530_p3 when (sel_tmp9_fu_581_p2(0) = '1') else 
        tmp_37_reg_791;
    newSel2_fu_636_p3 <= 
        newSel_fu_609_p3 when (or_cond_fu_617_p2(0) = '1') else 
        newSel1_fu_623_p3;
    newSel_fu_609_p3 <= 
        tmp_40_fu_546_p1 when (sel_tmp4_fu_604_p2(0) = '1') else 
        tmp_39_fu_526_p1;
    num_zeros_fu_229_p1 <= tmp_8_fu_221_p3(32 - 1 downto 0);
    or_cond1_fu_630_p2 <= (sel_tmp9_fu_581_p2 or sel_tmp2_fu_555_p2);
    or_cond2_fu_644_p2 <= (or_cond_fu_617_p2 or or_cond1_fu_630_p2);
    or_cond_fu_617_p2 <= (sel_tmp_fu_587_p2 or sel_tmp4_fu_604_p2);
    p_Repl2_1_trunc_fu_353_p2 <= std_logic_vector(unsigned(tmp24_cast_cast_fu_346_p3) + unsigned(tmp_33_fu_343_p1));
    p_Result_1_fu_213_p3 <= (ap_const_lv29_1FFFFFFF & p_Result_s_fu_203_p4);
    p_Result_2_fu_366_p5 <= (tmp_4_fu_359_p3 & tmp32_V_6_reg_726(22 downto 0));
    p_Result_3_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_427_p3),54));
    p_Result_4_fu_327_p4 <= tmp32_V_6_fu_323_p1(30 downto 23);
    
    p_Result_s_fu_203_p4_proc : process(p_Val2_4_cast_fu_200_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(35+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(35+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(35 - 1 downto 0);
    variable p_Result_s_fu_203_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(35 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(35 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(35 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_22(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_4_cast_fu_200_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(35-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(35-1-unsigned(ap_const_lv32_22(6-1 downto 0)));
            for p_Result_s_fu_203_p4_i in 0 to 35-1 loop
                v0_cpy(p_Result_s_fu_203_p4_i) := p_Val2_4_cast_fu_200_p1(35-1-p_Result_s_fu_203_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(35-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_203_p4 <= resvalue(35-1 downto 0);
    end process;

    p_Val2_1_fu_658_p0 <= OP1_V_1_fu_169_p1(17 - 1 downto 0);
    p_Val2_1_fu_658_p1 <= OP1_V_1_fu_169_p1(17 - 1 downto 0);
        p_Val2_4_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_695),35));

    p_Val2_4_fu_193_p3 <= 
        tmp_7_fu_188_p2 when (is_neg_fu_181_p3(0) = '1') else 
        grp_fu_664_p3;
    r_V_1_fu_163_p2 <= std_logic_vector(signed(tmp_5_fu_155_p1) - signed(tmp_6_fu_159_p1));
    r_V_fu_149_p2 <= std_logic_vector(signed(tmp_fu_141_p1) - signed(tmp_1_fu_145_p1));
    sel_tmp1_fu_550_p2 <= (tmp_13_reg_762 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_593_p2 <= (tmp_14_reg_773 or sel_tmp6_demorgan_fu_560_p2);
    sel_tmp2_fu_555_p2 <= (tmp_17_reg_785 and sel_tmp1_fu_550_p2);
    sel_tmp3_fu_598_p2 <= (sel_tmp21_demorgan_fu_593_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_604_p2 <= (sel_tmp3_fu_598_p2 and icmp9_reg_797);
    sel_tmp6_demorgan_fu_560_p2 <= (tmp_17_reg_785 or tmp_13_reg_762);
    sel_tmp6_fu_564_p2 <= (sel_tmp6_demorgan_fu_560_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_570_p2 <= (tmp_14_reg_773 and sel_tmp6_fu_564_p2);
    sel_tmp8_fu_575_p2 <= (tmp_18_fu_512_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_581_p2 <= (sel_tmp8_fu_575_p2 and sel_tmp7_fu_570_p2);
    sel_tmp_fu_587_p2 <= (tmp_18_fu_512_p2 and sel_tmp7_fu_570_p2);
        sh_amt_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_779),32));

    sh_amt_fu_475_p3 <= 
        tmp_15_fu_463_p2 when (tmp_14_fu_457_p2(0) = '1') else 
        tmp_16_fu_469_p2;
    temp_fu_381_p3 <= 
        ap_const_lv32_0 when (tmp_3_reg_685(0) = '1') else 
        f_fu_377_p1;
    tmp24_cast_cast_fu_346_p3 <= 
        ap_const_lv8_6A when (tmp_2_reg_731(0) = '1') else 
        ap_const_lv8_69;
    tmp32_V_1_fu_286_p2 <= std_logic_vector(shift_left(unsigned(tmp32_V_fu_277_p1),to_integer(unsigned('0' & tmp_s_fu_280_p2(31-1 downto 0)))));
    tmp32_V_2_fu_311_p1 <= tmp_31_fu_306_p2(32 - 1 downto 0);
    tmp32_V_3_fu_315_p3 <= 
        tmp32_V_1_fu_286_p2 when (icmp_fu_271_p2(0) = '1') else 
        tmp32_V_2_fu_311_p1;
    tmp32_V_6_fu_323_p1 <= grp_fu_130_p1;
    tmp32_V_fu_277_p1 <= p_Val2_4_reg_695(32 - 1 downto 0);
    tmp_10_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_752),12));
    tmp_12_fu_427_p3 <= (ap_const_lv1_1 & tmp_36_reg_757);
    tmp_13_fu_418_p2 <= "1" when (tmp_34_fu_392_p1 = ap_const_lv63_0) else "0";
    tmp_14_fu_457_p2 <= "1" when (signed(F2_fu_451_p2) > signed(ap_const_lv12_B)) else "0";
    tmp_15_fu_463_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_fu_451_p2));
    tmp_16_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_fu_451_p2));
    tmp_17_fu_483_p2 <= "1" when (F2_fu_451_p2 = ap_const_lv12_B) else "0";
    tmp_18_fu_512_p2 <= "1" when (unsigned(sh_amt_reg_779) < unsigned(ap_const_lv12_36)) else "0";
    tmp_19_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_509_p1),54));
        tmp_1_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x1_V),17));

    tmp_20_fu_261_p4 <= msb_idx_1_fu_251_p3(30 downto 5);
    tmp_21_fu_521_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_768),to_integer(unsigned('0' & tmp_19_fu_517_p1(31-1 downto 0)))));
    tmp_22_fu_530_p3 <= 
        ap_const_lv16_FFFF when (isneg_reg_746(0) = '1') else 
        ap_const_lv16_0;
        tmp_23_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_reg_791),32));

    tmp_24_fu_540_p2 <= std_logic_vector(shift_left(unsigned(tmp_23_fu_537_p1),to_integer(unsigned('0' & sh_amt_cast_fu_509_p1(31-1 downto 0)))));
    tmp_25_fu_292_p1 <= msb_idx_1_fu_251_p3(6 - 1 downto 0);
    tmp_29_fu_296_p2 <= std_logic_vector(signed(ap_const_lv6_21) + signed(tmp_25_fu_292_p1));
    tmp_2_fu_337_p2 <= "0" when (p_Result_4_fu_327_p4 = ap_const_lv8_9E) else "1";
    tmp_30_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_296_p2),35));
    tmp_31_fu_306_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_4_cast_reg_701),to_integer(unsigned('0' & tmp_30_fu_302_p1(31-1 downto 0)))));
    tmp_33_fu_343_p1 <= msb_idx_reg_706(8 - 1 downto 0);
    tmp_34_fu_392_p1 <= ireg_V_fu_388_p1(63 - 1 downto 0);
    tmp_36_fu_414_p1 <= ireg_V_fu_388_p1(52 - 1 downto 0);
    tmp_37_fu_489_p1 <= man_V_2_fu_444_p3(16 - 1 downto 0);
    tmp_38_fu_493_p4 <= sh_amt_fu_475_p3(11 downto 4);
    tmp_39_fu_526_p1 <= tmp_21_fu_521_p2(16 - 1 downto 0);
    tmp_3_fu_176_p2 <= "1" when (grp_fu_664_p3 = ap_const_lv34_0) else "0";
    tmp_40_fu_546_p1 <= tmp_24_fu_540_p2(16 - 1 downto 0);
    tmp_4_fu_359_p3 <= (is_neg_reg_690 & p_Repl2_1_trunc_fu_353_p2);
        tmp_5_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y2_V),17));

        tmp_6_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y1_V),17));

    tmp_7_fu_188_p2 <= std_logic_vector(unsigned(ap_const_lv34_0) - unsigned(grp_fu_664_p3));
    
    tmp_8_fu_221_p3_proc : process(p_Result_1_fu_213_p3)
    begin
        tmp_8_fu_221_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_1_fu_213_p3(i) = '1' then
                tmp_8_fu_221_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_9_fu_239_p1 <= msb_idx_fu_233_p2(31 - 1 downto 0);
        tmp_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x2_V),17));

    tmp_s_fu_280_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F) - unsigned(msb_idx_1_cast_fu_257_p1));
end behav;
