// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "gravity.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gravity::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gravity::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> gravity::ap_ST_fsm_state1 = "1";
const sc_lv<25> gravity::ap_ST_fsm_state2 = "10";
const sc_lv<25> gravity::ap_ST_fsm_state3 = "100";
const sc_lv<25> gravity::ap_ST_fsm_state4 = "1000";
const sc_lv<25> gravity::ap_ST_fsm_state5 = "10000";
const sc_lv<25> gravity::ap_ST_fsm_state6 = "100000";
const sc_lv<25> gravity::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> gravity::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> gravity::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> gravity::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> gravity::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> gravity::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> gravity::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> gravity::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> gravity::ap_const_lv32_0 = "00000000000000000000000000000000";
const int gravity::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> gravity::ap_const_lv32_3 = "11";
const sc_lv<32> gravity::ap_const_lv32_4 = "100";
const sc_lv<32> gravity::ap_const_lv32_8 = "1000";
const sc_lv<32> gravity::ap_const_lv32_38D1B717 = "111000110100011011011100010111";
const sc_lv<32> gravity::ap_const_lv32_5 = "101";
const sc_lv<32> gravity::ap_const_lv32_9 = "1001";
const sc_lv<32> gravity::ap_const_lv32_18 = "11000";
const bool gravity::ap_const_boolean_1 = true;

gravity::gravity(sc_module_name name) : sc_module(name), mVcdFile(0) {
    gravity_CRTLS_s_axi_U = new gravity_CRTLS_s_axi<C_S_AXI_CRTLS_ADDR_WIDTH,C_S_AXI_CRTLS_DATA_WIDTH>("gravity_CRTLS_s_axi_U");
    gravity_CRTLS_s_axi_U->AWVALID(s_axi_CRTLS_AWVALID);
    gravity_CRTLS_s_axi_U->AWREADY(s_axi_CRTLS_AWREADY);
    gravity_CRTLS_s_axi_U->AWADDR(s_axi_CRTLS_AWADDR);
    gravity_CRTLS_s_axi_U->WVALID(s_axi_CRTLS_WVALID);
    gravity_CRTLS_s_axi_U->WREADY(s_axi_CRTLS_WREADY);
    gravity_CRTLS_s_axi_U->WDATA(s_axi_CRTLS_WDATA);
    gravity_CRTLS_s_axi_U->WSTRB(s_axi_CRTLS_WSTRB);
    gravity_CRTLS_s_axi_U->ARVALID(s_axi_CRTLS_ARVALID);
    gravity_CRTLS_s_axi_U->ARREADY(s_axi_CRTLS_ARREADY);
    gravity_CRTLS_s_axi_U->ARADDR(s_axi_CRTLS_ARADDR);
    gravity_CRTLS_s_axi_U->RVALID(s_axi_CRTLS_RVALID);
    gravity_CRTLS_s_axi_U->RREADY(s_axi_CRTLS_RREADY);
    gravity_CRTLS_s_axi_U->RDATA(s_axi_CRTLS_RDATA);
    gravity_CRTLS_s_axi_U->RRESP(s_axi_CRTLS_RRESP);
    gravity_CRTLS_s_axi_U->BVALID(s_axi_CRTLS_BVALID);
    gravity_CRTLS_s_axi_U->BREADY(s_axi_CRTLS_BREADY);
    gravity_CRTLS_s_axi_U->BRESP(s_axi_CRTLS_BRESP);
    gravity_CRTLS_s_axi_U->ACLK(ap_clk);
    gravity_CRTLS_s_axi_U->ARESET(ap_rst_n_inv);
    gravity_CRTLS_s_axi_U->ACLK_EN(ap_var_for_const0);
    gravity_CRTLS_s_axi_U->ap_start(ap_start);
    gravity_CRTLS_s_axi_U->interrupt(interrupt);
    gravity_CRTLS_s_axi_U->ap_ready(ap_ready);
    gravity_CRTLS_s_axi_U->ap_done(ap_done);
    gravity_CRTLS_s_axi_U->ap_idle(ap_idle);
    gravity_CRTLS_s_axi_U->ap_return(grp_fu_58_p2);
    gravity_CRTLS_s_axi_U->m1(m1);
    gravity_CRTLS_s_axi_U->m2(m2);
    gravity_CRTLS_s_axi_U->distance(distance);
    gravity_fadd_32nsbkb_U1 = new gravity_fadd_32nsbkb<1,5,32,32,32>("gravity_fadd_32nsbkb_U1");
    gravity_fadd_32nsbkb_U1->clk(ap_clk);
    gravity_fadd_32nsbkb_U1->reset(ap_rst_n_inv);
    gravity_fadd_32nsbkb_U1->din0(distance);
    gravity_fadd_32nsbkb_U1->din1(ap_var_for_const1);
    gravity_fadd_32nsbkb_U1->ce(ap_var_for_const0);
    gravity_fadd_32nsbkb_U1->dout(grp_fu_46_p2);
    gravity_fmul_32nscud_U2 = new gravity_fmul_32nscud<1,4,32,32,32>("gravity_fmul_32nscud_U2");
    gravity_fmul_32nscud_U2->clk(ap_clk);
    gravity_fmul_32nscud_U2->reset(ap_rst_n_inv);
    gravity_fmul_32nscud_U2->din0(grp_fu_52_p0);
    gravity_fmul_32nscud_U2->din1(grp_fu_52_p1);
    gravity_fmul_32nscud_U2->ce(ap_var_for_const0);
    gravity_fmul_32nscud_U2->dout(grp_fu_52_p2);
    gravity_fdiv_32nsdEe_U3 = new gravity_fdiv_32nsdEe<1,16,32,32,32>("gravity_fdiv_32nsdEe_U3");
    gravity_fdiv_32nsdEe_U3->clk(ap_clk);
    gravity_fdiv_32nsdEe_U3->reset(ap_rst_n_inv);
    gravity_fdiv_32nsdEe_U3->din0(tmp_4_reg_77);
    gravity_fdiv_32nsdEe_U3->din1(dist_square_reg_88);
    gravity_fdiv_32nsdEe_U3->ce(ap_var_for_const0);
    gravity_fdiv_32nsdEe_U3->dout(grp_fu_58_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_52_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m1 );
    sensitive << ( tmp_3_reg_82 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_52_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m2 );
    sensitive << ( tmp_3_reg_82 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gravity_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_CRTLS_AWVALID, "(port)s_axi_CRTLS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTLS_AWREADY, "(port)s_axi_CRTLS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTLS_AWADDR, "(port)s_axi_CRTLS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTLS_WVALID, "(port)s_axi_CRTLS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTLS_WREADY, "(port)s_axi_CRTLS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTLS_WDATA, "(port)s_axi_CRTLS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTLS_WSTRB, "(port)s_axi_CRTLS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTLS_ARVALID, "(port)s_axi_CRTLS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTLS_ARREADY, "(port)s_axi_CRTLS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTLS_ARADDR, "(port)s_axi_CRTLS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTLS_RVALID, "(port)s_axi_CRTLS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTLS_RREADY, "(port)s_axi_CRTLS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTLS_RDATA, "(port)s_axi_CRTLS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTLS_RRESP, "(port)s_axi_CRTLS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTLS_BVALID, "(port)s_axi_CRTLS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTLS_BREADY, "(port)s_axi_CRTLS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTLS_BRESP, "(port)s_axi_CRTLS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, m1, "m1");
    sc_trace(mVcdFile, m2, "m2");
    sc_trace(mVcdFile, distance, "distance");
    sc_trace(mVcdFile, grp_fu_52_p2, "grp_fu_52_p2");
    sc_trace(mVcdFile, tmp_4_reg_77, "tmp_4_reg_77");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_46_p2, "grp_fu_46_p2");
    sc_trace(mVcdFile, tmp_3_reg_82, "tmp_3_reg_82");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, dist_square_reg_88, "dist_square_reg_88");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_52_p0, "grp_fu_52_p0");
    sc_trace(mVcdFile, grp_fu_52_p1, "grp_fu_52_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_58_p2, "grp_fu_58_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_return, "ap_return");
#endif

    }
    mHdltvinHandle.open("gravity.hdltvin.dat");
    mHdltvoutHandle.open("gravity.hdltvout.dat");
}

gravity::~gravity() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete gravity_CRTLS_s_axi_U;
    delete gravity_fadd_32nsbkb_U1;
    delete gravity_fmul_32nscud_U2;
    delete gravity_fdiv_32nsdEe_U3;
}

void gravity::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void gravity::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_38D1B717;
}

void gravity::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dist_square_reg_88 = grp_fu_52_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_3_reg_82 = grp_fu_46_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_4_reg_77 = grp_fu_52_p2.read();
    }
}

void gravity::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void gravity::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void gravity::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void gravity::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void gravity::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void gravity::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void gravity::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void gravity::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gravity::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gravity::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gravity::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void gravity::thread_grp_fu_52_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_52_p0 = tmp_3_reg_82.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_52_p0 = m1.read();
    } else {
        grp_fu_52_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gravity::thread_grp_fu_52_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_52_p1 = tmp_3_reg_82.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_52_p1 = m2.read();
    } else {
        grp_fu_52_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gravity::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void gravity::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_AWVALID\" :  \"" << s_axi_CRTLS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CRTLS_AWREADY\" :  \"" << s_axi_CRTLS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_AWADDR\" :  \"" << s_axi_CRTLS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_WVALID\" :  \"" << s_axi_CRTLS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLS_WREADY\" :  \"" << s_axi_CRTLS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_WDATA\" :  \"" << s_axi_CRTLS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_WSTRB\" :  \"" << s_axi_CRTLS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_ARVALID\" :  \"" << s_axi_CRTLS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLS_ARREADY\" :  \"" << s_axi_CRTLS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_ARADDR\" :  \"" << s_axi_CRTLS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLS_RVALID\" :  \"" << s_axi_CRTLS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_RREADY\" :  \"" << s_axi_CRTLS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLS_RDATA\" :  \"" << s_axi_CRTLS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLS_RRESP\" :  \"" << s_axi_CRTLS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLS_BVALID\" :  \"" << s_axi_CRTLS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLS_BREADY\" :  \"" << s_axi_CRTLS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLS_BRESP\" :  \"" << s_axi_CRTLS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

