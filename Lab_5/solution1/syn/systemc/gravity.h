// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _gravity_HH_
#define _gravity_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "gravity_fadd_32nsbkb.h"
#include "gravity_fmul_32nscud.h"
#include "gravity_fdiv_32nsdEe.h"
#include "gravity_CRTLS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CRTLS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CRTLS_DATA_WIDTH = 32>
struct gravity : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_CRTLS_AWVALID;
    sc_out< sc_logic > s_axi_CRTLS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTLS_ADDR_WIDTH> > s_axi_CRTLS_AWADDR;
    sc_in< sc_logic > s_axi_CRTLS_WVALID;
    sc_out< sc_logic > s_axi_CRTLS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTLS_DATA_WIDTH> > s_axi_CRTLS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTLS_DATA_WIDTH/8> > s_axi_CRTLS_WSTRB;
    sc_in< sc_logic > s_axi_CRTLS_ARVALID;
    sc_out< sc_logic > s_axi_CRTLS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTLS_ADDR_WIDTH> > s_axi_CRTLS_ARADDR;
    sc_out< sc_logic > s_axi_CRTLS_RVALID;
    sc_in< sc_logic > s_axi_CRTLS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTLS_DATA_WIDTH> > s_axi_CRTLS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTLS_RRESP;
    sc_out< sc_logic > s_axi_CRTLS_BVALID;
    sc_in< sc_logic > s_axi_CRTLS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTLS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    gravity(sc_module_name name);
    SC_HAS_PROCESS(gravity);

    ~gravity();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    gravity_CRTLS_s_axi<C_S_AXI_CRTLS_ADDR_WIDTH,C_S_AXI_CRTLS_DATA_WIDTH>* gravity_CRTLS_s_axi_U;
    gravity_fadd_32nsbkb<1,5,32,32,32>* gravity_fadd_32nsbkb_U1;
    gravity_fmul_32nscud<1,4,32,32,32>* gravity_fmul_32nscud_U2;
    gravity_fdiv_32nsdEe<1,16,32,32,32>* gravity_fdiv_32nsdEe_U3;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<25> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > m1;
    sc_signal< sc_lv<32> > m2;
    sc_signal< sc_lv<32> > distance;
    sc_signal< sc_lv<32> > grp_fu_52_p2;
    sc_signal< sc_lv<32> > tmp_4_reg_77;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_46_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_82;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > dist_square_reg_88;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > grp_fu_52_p0;
    sc_signal< sc_lv<32> > grp_fu_52_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > grp_fu_58_p2;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_lv<25> > ap_NS_fsm;
    sc_signal< sc_lv<32> > ap_return;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<25> ap_ST_fsm_state1;
    static const sc_lv<25> ap_ST_fsm_state2;
    static const sc_lv<25> ap_ST_fsm_state3;
    static const sc_lv<25> ap_ST_fsm_state4;
    static const sc_lv<25> ap_ST_fsm_state5;
    static const sc_lv<25> ap_ST_fsm_state6;
    static const sc_lv<25> ap_ST_fsm_state7;
    static const sc_lv<25> ap_ST_fsm_state8;
    static const sc_lv<25> ap_ST_fsm_state9;
    static const sc_lv<25> ap_ST_fsm_state10;
    static const sc_lv<25> ap_ST_fsm_state11;
    static const sc_lv<25> ap_ST_fsm_state12;
    static const sc_lv<25> ap_ST_fsm_state13;
    static const sc_lv<25> ap_ST_fsm_state14;
    static const sc_lv<25> ap_ST_fsm_state15;
    static const sc_lv<25> ap_ST_fsm_state16;
    static const sc_lv<25> ap_ST_fsm_state17;
    static const sc_lv<25> ap_ST_fsm_state18;
    static const sc_lv<25> ap_ST_fsm_state19;
    static const sc_lv<25> ap_ST_fsm_state20;
    static const sc_lv<25> ap_ST_fsm_state21;
    static const sc_lv<25> ap_ST_fsm_state22;
    static const sc_lv<25> ap_ST_fsm_state23;
    static const sc_lv<25> ap_ST_fsm_state24;
    static const sc_lv<25> ap_ST_fsm_state25;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_38D1B717;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_18;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_fu_52_p0();
    void thread_grp_fu_52_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
