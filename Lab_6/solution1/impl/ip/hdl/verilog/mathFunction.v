// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mathFunction,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.665000,HLS_SYN_LAT=3901,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=34,HLS_SYN_FF=2973,HLS_SYN_LUT=5304,HLS_VERSION=2018_2}" *)

module mathFunction (
        ap_clk,
        ap_rst_n,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        res_Addr_A,
        res_EN_A,
        res_WEN_A,
        res_Din_A,
        res_Dout_A,
        res_Clk_A,
        res_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [3:0] x_WEN_A;
output  [31:0] x_Din_A;
input  [31:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] res_Addr_A;
output   res_EN_A;
output  [3:0] res_WEN_A;
output  [31:0] res_Din_A;
input  [31:0] res_Dout_A;
output   res_Clk_A;
output   res_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg x_EN_A;
reg res_EN_A;
reg[3:0] res_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] y;
wire   [3:0] ref_4oPi_table_100_V_address0;
reg    ref_4oPi_table_100_V_ce0;
wire   [99:0] ref_4oPi_table_100_V_q0;
wire   [7:0] second_order_float_2_address0;
reg    second_order_float_2_ce0;
wire   [29:0] second_order_float_2_q0;
wire   [7:0] second_order_float_3_address0;
reg    second_order_float_3_ce0;
wire   [22:0] second_order_float_3_q0;
wire   [7:0] second_order_float_s_address0;
reg    second_order_float_s_ce0;
wire   [14:0] second_order_float_s_q0;
reg   [31:0] y_read_reg_1034;
wire   [6:0] i_2_fu_311_p2;
reg   [6:0] i_2_reg_1042;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_s_fu_317_p1;
reg   [63:0] tmp_s_reg_1047;
wire    ap_CS_fsm_state6;
reg   [31:0] x_load_reg_1057;
wire    ap_CS_fsm_state7;
reg   [0:0] results_sign_V_1_reg_1062;
wire    ap_CS_fsm_state8;
wire   [7:0] loc_V_fu_333_p4;
reg   [7:0] loc_V_reg_1068;
wire   [22:0] loc_V_1_fu_343_p1;
reg   [22:0] loc_V_1_reg_1075;
wire   [0:0] closepath_fu_347_p2;
reg   [0:0] closepath_reg_1081;
wire   [3:0] tmp_22_fu_382_p1;
reg   [3:0] tmp_22_reg_1092;
reg   [79:0] Med_V_reg_1097;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_14_i_fu_425_p2;
reg   [0:0] tmp_14_i_reg_1112;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] x_assign_reg_1118;
reg   [57:0] p_Val2_6_reg_1123;
wire    ap_CS_fsm_state14;
reg   [2:0] tmp_12_i_i_reg_1129;
wire   [2:0] p_Val2_22_fu_450_p3;
reg   [2:0] p_Val2_22_reg_1134;
wire    ap_CS_fsm_state15;
wire   [57:0] p_Val2_8_fu_465_p3;
reg   [57:0] p_Val2_8_reg_1140;
wire   [4:0] Mx_zeros_V_fu_516_p1;
reg   [4:0] Mx_zeros_V_reg_1145;
reg   [28:0] Mx_V_reg_1151;
wire    ap_CS_fsm_state16;
wire  signed [7:0] Ex_V_fu_553_p2;
reg  signed [7:0] Ex_V_reg_1158;
wire   [0:0] isNeg_fu_563_p3;
reg   [0:0] isNeg_reg_1163;
wire  signed [8:0] sh_assign_fu_577_p3;
reg  signed [8:0] sh_assign_reg_1168;
wire   [0:0] tmp_13_i_fu_585_p2;
reg   [0:0] tmp_13_i_reg_1174;
wire   [0:0] tmp_15_i_fu_590_p2;
reg   [0:0] tmp_15_i_reg_1180;
wire   [0:0] cos_basis_fu_626_p10;
reg   [0:0] cos_basis_reg_1187;
wire    ap_CS_fsm_state17;
wire   [21:0] p_Val2_12_fu_657_p1;
reg   [21:0] p_Val2_12_reg_1194;
reg   [14:0] tmp_i1_i_reg_1199;
reg   [14:0] tmp_28_i_i_reg_1219;
wire    ap_CS_fsm_state18;
reg   [28:0] p_Val2_15_reg_1224;
reg   [22:0] second_order_float_6_reg_1229;
reg  signed [14:0] second_order_float_8_reg_1234;
reg   [21:0] tmp_26_i_i_reg_1239;
wire    ap_CS_fsm_state19;
reg   [13:0] tmp_32_i_i_reg_1244;
wire   [28:0] Mx_V_read_assign_fu_751_p3;
reg   [28:0] Mx_V_read_assign_reg_1249;
wire    ap_CS_fsm_state20;
wire   [29:0] r_V_fu_772_p2;
reg   [29:0] r_V_reg_1254;
reg   [28:0] result_V_reg_1259;
wire    ap_CS_fsm_state21;
wire   [8:0] r_V_1_fu_811_p2;
reg   [8:0] r_V_1_reg_1264;
wire   [0:0] or_cond_i_fu_933_p2;
reg   [0:0] or_cond_i_reg_1269;
wire    ap_CS_fsm_state22;
wire    grp_scaled_fixed2ieee_fu_280_ap_idle;
wire    grp_scaled_fixed2ieee_fu_280_ap_ready;
wire    grp_scaled_fixed2ieee_fu_280_ap_done;
wire   [0:0] p_Result_i_fu_947_p3;
reg   [0:0] p_Result_i_reg_1274;
wire   [7:0] ret_V_4_fu_978_p3;
reg   [7:0] ret_V_4_reg_1279;
wire   [22:0] ret_V_5_fu_994_p3;
reg   [22:0] ret_V_5_reg_1284;
wire   [31:0] grp_fu_295_p2;
reg   [31:0] tmp_i_reg_1289;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] tmp_9_reg_1299;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] tmp_1_reg_1304;
wire    ap_CS_fsm_state31;
wire    grp_scaled_fixed2ieee_fu_280_ap_start;
wire   [31:0] grp_scaled_fixed2ieee_fu_280_ap_return;
reg   [6:0] i_reg_268;
wire    ap_CS_fsm_state32;
reg    grp_scaled_fixed2ieee_fu_280_ap_start_reg;
wire   [63:0] tmp_5_i_i_i_fu_377_p1;
wire   [63:0] tmp_29_i_i_fu_685_p1;
wire   [31:0] x_Addr_A_orig;
wire   [31:0] res_Addr_A_orig;
wire   [31:0] grp_fu_286_p0;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state11;
wire   [31:0] p_Val2_s_fu_322_p1;
wire   [7:0] expv_op_i_fu_353_p2;
wire   [7:0] addr_V_fu_359_p3;
wire   [3:0] tmp_14_fu_367_p4;
wire   [99:0] tmp_7_i_i_i_fu_386_p1;
wire   [99:0] r_V_4_fu_389_p2;
wire   [23:0] p_Result_24_fu_405_p3;
wire   [79:0] grp_fu_419_p0;
wire   [23:0] grp_fu_419_p1;
wire   [103:0] grp_fu_419_p2;
wire   [0:0] tmp_23_fu_456_p1;
wire   [57:0] p_Val2_i_i_fu_460_p2;
wire   [28:0] p_Result_i2_i_i_fu_472_p4;
wire   [29:0] p_Result_25_fu_482_p3;
reg   [29:0] p_Result_26_fu_490_p4;
wire   [31:0] p_Result_27_fu_500_p3;
reg   [31:0] val_assign_fu_508_p3;
wire   [7:0] p_i_i_fu_520_p2;
wire   [57:0] tmp_13_i_i_fu_532_p1;
wire   [57:0] p_Val2_11_fu_535_p2;
wire   [7:0] storemerge_i_i_fu_525_p3;
wire   [7:0] tmp_16_i_i_fu_550_p1;
wire  signed [8:0] sh_i_cast_fu_559_p1;
wire   [8:0] tmp_18_i_i_fu_571_p2;
wire  signed [28:0] sh_assign_2_i_cast_fu_598_p1;
wire   [28:0] tmp_20_i_i_fu_604_p2;
wire   [31:0] tmp_19_i_i_fu_601_p1;
wire  signed [31:0] sh_assign_2_i_cast2_fu_595_p1;
wire   [31:0] tmp_20_i_i_cast_fu_609_p1;
wire   [31:0] tmp_21_i_i_fu_613_p2;
wire   [31:0] ssdm_int_V_write_ass_fu_619_p3;
wire   [0:0] sin_basis_fu_671_p2;
wire   [6:0] p_Result_i_i_fu_647_p4;
wire   [7:0] p_Result_28_fu_677_p3;
wire   [29:0] p_Val2_13_fu_1020_p2;
wire  signed [22:0] p_Val2_1_fu_720_p0;
wire   [21:0] p_Val2_1_fu_720_p1;
wire   [44:0] p_Val2_1_fu_720_p2;
wire  signed [29:0] p_Val2_2_fu_1027_p2;
wire  signed [29:0] tmp_33_i_i_fu_757_p1;
wire  signed [29:0] tmp_34_i_i_fu_760_p1;
wire   [29:0] p_Val2_16_fu_763_p2;
wire  signed [29:0] tmp_36_i_i_cast_fu_769_p1;
wire  signed [29:0] p_Val2_17_fu_790_p0;
wire   [28:0] p_Val2_17_fu_790_p1;
wire   [57:0] p_Val2_17_fu_790_p2;
wire   [7:0] p_Ex_V_ret_i_fu_778_p3;
wire  signed [8:0] rhs_V_1_fu_807_p1;
wire   [31:0] p_Val2_18_fu_818_p1;
wire   [3:0] p_Result_30_fu_844_p3;
wire   [0:0] tmp_fu_850_p18;
wire   [0:0] tmp_12_fu_888_p18;
wire   [0:0] tmp_12_i_fu_926_p3;
wire   [0:0] tmp_16_i_fu_942_p2;
wire   [0:0] not_tmp_i_fu_937_p2;
wire   [0:0] p_Result_29_fu_822_p3;
wire   [0:0] not_or_cond_i_demorg_fu_955_p2;
wire   [0:0] not_or_cond_i_fu_959_p2;
wire   [0:0] tmp_13_fu_973_p2;
wire   [7:0] p_Result_i_cast_fu_965_p3;
wire   [7:0] loc_V_2_fu_830_p4;
wire   [22:0] p_Result_1_i_cast_fu_986_p3;
wire   [22:0] loc_V_3_fu_840_p1;
wire   [0:0] p_Result_s_fu_1002_p3;
wire   [31:0] p_Result_31_fu_1007_p4;
wire   [14:0] p_Val2_13_fu_1020_p0;
wire   [29:0] OP1_V_3_fu_692_p1;
wire   [14:0] p_Val2_13_fu_1020_p1;
wire   [14:0] p_Val2_2_fu_1027_p0;
reg    grp_fu_295_ce;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond_fu_305_p2;
reg   [31:0] ap_NS_fsm;
wire   [103:0] grp_fu_419_p00;
wire   [103:0] grp_fu_419_p10;
wire   [57:0] p_Val2_17_fu_790_p10;
wire   [44:0] p_Val2_1_fu_720_p10;
wire   [29:0] p_Val2_2_fu_1027_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 grp_scaled_fixed2ieee_fu_280_ap_start_reg = 1'b0;
end

mathFunction_ref_bkb #(
    .DataWidth( 100 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
ref_4oPi_table_100_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ref_4oPi_table_100_V_address0),
    .ce0(ref_4oPi_table_100_V_ce0),
    .q0(ref_4oPi_table_100_V_q0)
);

mathFunction_secocud #(
    .DataWidth( 30 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
second_order_float_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(second_order_float_2_address0),
    .ce0(second_order_float_2_ce0),
    .q0(second_order_float_2_q0)
);

mathFunction_secodEe #(
    .DataWidth( 23 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
second_order_float_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(second_order_float_3_address0),
    .ce0(second_order_float_3_ce0),
    .q0(second_order_float_3_q0)
);

mathFunction_secoeOg #(
    .DataWidth( 15 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
second_order_float_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(second_order_float_s_address0),
    .ce0(second_order_float_s_ce0),
    .q0(second_order_float_s_q0)
);

mathFunction_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
mathFunction_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .y(y)
);

scaled_fixed2ieee grp_scaled_fixed2ieee_fu_280(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_scaled_fixed2ieee_fu_280_ap_start),
    .ap_done(grp_scaled_fixed2ieee_fu_280_ap_done),
    .ap_idle(grp_scaled_fixed2ieee_fu_280_ap_idle),
    .ap_ready(grp_scaled_fixed2ieee_fu_280_ap_ready),
    .in_V(result_V_reg_1259),
    .prescale(r_V_1_reg_1264),
    .ap_return(grp_scaled_fixed2ieee_fu_280_ap_return)
);

mathFunction_faddfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mathFunction_faddfYi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_286_p0),
    .din1(tmp_i_reg_1289),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

mathFunction_fmulg8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mathFunction_fmulg8j_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_9_reg_1299),
    .din1(32'd1056964608),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

mathFunction_fsqrhbi #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mathFunction_fsqrhbi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(x_assign_reg_1118),
    .ce(grp_fu_295_ce),
    .dout(grp_fu_295_p2)
);

mathFunction_fexpibs #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mathFunction_fexpibs_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(y_read_reg_1034),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

mathFunction_mul_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 80 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 104 ))
mathFunction_mul_jbC_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_419_p0),
    .din1(grp_fu_419_p1),
    .ce(1'b1),
    .dout(grp_fu_419_p2)
);

mathFunction_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mathFunction_mux_kbM_U8(
    .din0(1'd0),
    .din1(1'd1),
    .din2(1'd1),
    .din3(1'd0),
    .din4(1'd0),
    .din5(1'd1),
    .din6(1'd1),
    .din7(1'd0),
    .din8(p_Val2_22_reg_1134),
    .dout(cos_basis_fu_626_p10)
);

mathFunction_mux_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mathFunction_mux_lbW_U9(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd1),
    .din4(1'd1),
    .din5(1'd1),
    .din6(1'd1),
    .din7(1'd0),
    .din8(1'd0),
    .din9(1'd1),
    .din10(1'd1),
    .din11(1'd1),
    .din12(1'd1),
    .din13(1'd0),
    .din14(1'd0),
    .din15(1'd0),
    .din16(p_Result_30_fu_844_p3),
    .dout(tmp_fu_850_p18)
);

mathFunction_mux_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mathFunction_mux_lbW_U10(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd1),
    .din3(1'd0),
    .din4(1'd1),
    .din5(1'd1),
    .din6(1'd0),
    .din7(1'd1),
    .din8(1'd1),
    .din9(1'd0),
    .din10(1'd1),
    .din11(1'd1),
    .din12(1'd0),
    .din13(1'd1),
    .din14(1'd0),
    .din15(1'd0),
    .din16(p_Result_30_fu_844_p3),
    .dout(tmp_12_fu_888_p18)
);

mathFunction_mul_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
mathFunction_mul_mb6_U11(
    .din0(p_Val2_13_fu_1020_p0),
    .din1(p_Val2_13_fu_1020_p1),
    .dout(p_Val2_13_fu_1020_p2)
);

mathFunction_mul_ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
mathFunction_mul_ncg_U12(
    .din0(p_Val2_2_fu_1027_p0),
    .din1(second_order_float_8_reg_1234),
    .dout(p_Val2_2_fu_1027_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_scaled_fixed2ieee_fu_280_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_scaled_fixed2ieee_fu_280_ap_start_reg <= 1'b1;
        end else if ((grp_scaled_fixed2ieee_fu_280_ap_ready == 1'b1)) begin
            grp_scaled_fixed2ieee_fu_280_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_reg_268 <= i_2_reg_1042;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_268 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        Ex_V_reg_1158 <= Ex_V_fu_553_p2;
        Mx_V_reg_1151 <= {{p_Val2_11_fu_535_p2[57:29]}};
        isNeg_reg_1163 <= Ex_V_fu_553_p2[32'd7];
        sh_assign_reg_1168 <= sh_assign_fu_577_p3;
        tmp_13_i_reg_1174 <= tmp_13_i_fu_585_p2;
        tmp_15_i_reg_1180 <= tmp_15_i_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Med_V_reg_1097 <= {{r_V_4_fu_389_p2[99:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Mx_V_read_assign_reg_1249 <= Mx_V_read_assign_fu_751_p3;
        r_V_reg_1254 <= r_V_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Mx_zeros_V_reg_1145 <= Mx_zeros_V_fu_516_p1;
        p_Val2_22_reg_1134 <= p_Val2_22_fu_450_p3;
        p_Val2_8_reg_1140 <= p_Val2_8_fu_465_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        closepath_reg_1081 <= closepath_fu_347_p2;
        loc_V_1_reg_1075 <= loc_V_1_fu_343_p1;
        loc_V_reg_1068 <= {{p_Val2_s_fu_322_p1[30:23]}};
        results_sign_V_1_reg_1062 <= p_Val2_s_fu_322_p1[32'd31];
        tmp_22_reg_1092 <= tmp_22_fu_382_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cos_basis_reg_1187 <= cos_basis_fu_626_p10;
        p_Val2_12_reg_1194 <= p_Val2_12_fu_657_p1;
        tmp_i1_i_reg_1199 <= {{ssdm_int_V_write_ass_fu_619_p3[21:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_1042 <= i_2_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_scaled_fixed2ieee_fu_280_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        or_cond_i_reg_1269 <= or_cond_i_fu_933_p2;
        p_Result_i_reg_1274 <= p_Result_i_fu_947_p3;
        ret_V_4_reg_1279 <= ret_V_4_fu_978_p3;
        ret_V_5_reg_1284 <= ret_V_5_fu_994_p3;
        tmp_i_reg_1289 <= grp_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_Val2_15_reg_1224 <= {{second_order_float_2_q0[29:1]}};
        second_order_float_6_reg_1229 <= second_order_float_3_q0;
        second_order_float_8_reg_1234 <= second_order_float_s_q0;
        tmp_28_i_i_reg_1219 <= {{p_Val2_13_fu_1020_p2[29:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_Val2_6_reg_1123 <= {{grp_fu_419_p2[76:19]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        r_V_1_reg_1264 <= r_V_1_fu_811_p2;
        result_V_reg_1259 <= {{p_Val2_17_fu_790_p2[57:29]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (closepath_reg_1081 == 1'd0))) begin
        tmp_12_i_i_reg_1129 <= {{grp_fu_419_p2[79:77]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_14_i_reg_1112 <= tmp_14_i_fu_425_p2;
        x_assign_reg_1118 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_1_reg_1304 <= grp_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_26_i_i_reg_1239 <= {{p_Val2_1_fu_720_p2[44:23]}};
        tmp_32_i_i_reg_1244 <= {{p_Val2_2_fu_1027_p2[29:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_9_reg_1299 <= grp_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_s_reg_1047[6 : 0] <= tmp_s_fu_317_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_load_reg_1057 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_read_reg_1034 <= y;
    end
end

always @ (*) begin
    if (((exitcond_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | ((grp_scaled_fixed2ieee_fu_280_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        grp_fu_295_ce = 1'b1;
    end else begin
        grp_fu_295_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ref_4oPi_table_100_V_ce0 = 1'b1;
    end else begin
        ref_4oPi_table_100_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        res_EN_A = 1'b1;
    end else begin
        res_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        res_WEN_A = 4'd15;
    end else begin
        res_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        second_order_float_2_ce0 = 1'b1;
    end else begin
        second_order_float_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        second_order_float_3_ce0 = 1'b1;
    end else begin
        second_order_float_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        second_order_float_s_ce0 = 1'b1;
    end else begin
        second_order_float_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_scaled_fixed2ieee_fu_280_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Ex_V_fu_553_p2 = (storemerge_i_i_fu_525_p3 - tmp_16_i_i_fu_550_p1);

assign Mx_V_read_assign_fu_751_p3 = ((cos_basis_reg_1187[0:0] === 1'b1) ? 29'd536870911 : Mx_V_reg_1151);

assign Mx_zeros_V_fu_516_p1 = val_assign_fu_508_p3[4:0];

assign OP1_V_3_fu_692_p1 = tmp_i1_i_reg_1199;

assign addr_V_fu_359_p3 = ((closepath_fu_347_p2[0:0] === 1'b1) ? 8'd63 : expv_op_i_fu_353_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign closepath_fu_347_p2 = ((loc_V_fu_333_p4 < 8'd126) ? 1'b1 : 1'b0);

assign exitcond_fu_305_p2 = ((i_reg_268 == 7'd100) ? 1'b1 : 1'b0);

assign expv_op_i_fu_353_p2 = ($signed(8'd194) + $signed(loc_V_fu_333_p4));

assign grp_fu_286_p0 = p_Result_31_fu_1007_p4;

assign grp_fu_419_p0 = grp_fu_419_p00;

assign grp_fu_419_p00 = Med_V_reg_1097;

assign grp_fu_419_p1 = grp_fu_419_p10;

assign grp_fu_419_p10 = p_Result_24_fu_405_p3;

assign grp_scaled_fixed2ieee_fu_280_ap_start = grp_scaled_fixed2ieee_fu_280_ap_start_reg;

assign i_2_fu_311_p2 = (i_reg_268 + 7'd1);

assign isNeg_fu_563_p3 = Ex_V_fu_553_p2[32'd7];

assign loc_V_1_fu_343_p1 = p_Val2_s_fu_322_p1[22:0];

assign loc_V_2_fu_830_p4 = {{p_Val2_18_fu_818_p1[30:23]}};

assign loc_V_3_fu_840_p1 = p_Val2_18_fu_818_p1[22:0];

assign loc_V_fu_333_p4 = {{p_Val2_s_fu_322_p1[30:23]}};

assign not_or_cond_i_demorg_fu_955_p2 = (tmp_14_i_reg_1112 & tmp_13_i_reg_1174);

assign not_or_cond_i_fu_959_p2 = (not_or_cond_i_demorg_fu_955_p2 ^ 1'd1);

assign not_tmp_i_fu_937_p2 = (tmp_15_i_reg_1180 ^ 1'd1);

assign or_cond_i_fu_933_p2 = (tmp_14_i_reg_1112 & tmp_13_i_reg_1174);

assign p_Ex_V_ret_i_fu_778_p3 = ((cos_basis_reg_1187[0:0] === 1'b1) ? 8'd0 : Ex_V_reg_1158);

assign p_Result_1_i_cast_fu_986_p3 = ((not_or_cond_i_fu_959_p2[0:0] === 1'b1) ? 23'd8388607 : 23'd0);

assign p_Result_24_fu_405_p3 = {{1'd1}, {loc_V_1_reg_1075}};

assign p_Result_25_fu_482_p3 = {{p_Result_i2_i_i_fu_472_p4}, {1'd1}};

integer ap_tvar_int_0;

always @ (p_Result_25_fu_482_p3) begin
    for (ap_tvar_int_0 = 30 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 29 - 0) begin
            p_Result_26_fu_490_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_26_fu_490_p4[ap_tvar_int_0] = p_Result_25_fu_482_p3[29 - ap_tvar_int_0];
        end
    end
end

assign p_Result_27_fu_500_p3 = {{2'd3}, {p_Result_26_fu_490_p4}};

assign p_Result_28_fu_677_p3 = {{sin_basis_fu_671_p2}, {p_Result_i_i_fu_647_p4}};

assign p_Result_29_fu_822_p3 = p_Val2_18_fu_818_p1[32'd31];

assign p_Result_30_fu_844_p3 = {{results_sign_V_1_reg_1062}, {p_Val2_22_reg_1134}};

assign p_Result_31_fu_1007_p4 = {{{p_Result_s_fu_1002_p3}, {ret_V_4_reg_1279}}, {ret_V_5_reg_1284}};

assign p_Result_i2_i_i_fu_472_p4 = {{p_Val2_8_fu_465_p3[57:29]}};

assign p_Result_i_cast_fu_965_p3 = ((not_or_cond_i_fu_959_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_Result_i_fu_947_p3 = ((tmp_16_i_fu_942_p2[0:0] === 1'b1) ? not_tmp_i_fu_937_p2 : p_Result_29_fu_822_p3);

assign p_Result_i_i_fu_647_p4 = {{ssdm_int_V_write_ass_fu_619_p3[28:22]}};

assign p_Result_s_fu_1002_p3 = ((or_cond_i_reg_1269[0:0] === 1'b1) ? results_sign_V_1_reg_1062 : p_Result_i_reg_1274);

assign p_Val2_11_fu_535_p2 = p_Val2_8_reg_1140 << tmp_13_i_i_fu_532_p1;

assign p_Val2_12_fu_657_p1 = ssdm_int_V_write_ass_fu_619_p3[21:0];

assign p_Val2_13_fu_1020_p0 = OP1_V_3_fu_692_p1;

assign p_Val2_13_fu_1020_p1 = OP1_V_3_fu_692_p1;

assign p_Val2_16_fu_763_p2 = ($signed(tmp_33_i_i_fu_757_p1) + $signed(tmp_34_i_i_fu_760_p1));

assign p_Val2_17_fu_790_p0 = r_V_reg_1254;

assign p_Val2_17_fu_790_p1 = p_Val2_17_fu_790_p10;

assign p_Val2_17_fu_790_p10 = Mx_V_read_assign_reg_1249;

assign p_Val2_17_fu_790_p2 = ($signed(p_Val2_17_fu_790_p0) * $signed({{1'b0}, {p_Val2_17_fu_790_p1}}));

assign p_Val2_18_fu_818_p1 = grp_scaled_fixed2ieee_fu_280_ap_return;

assign p_Val2_1_fu_720_p0 = second_order_float_6_reg_1229;

assign p_Val2_1_fu_720_p1 = p_Val2_1_fu_720_p10;

assign p_Val2_1_fu_720_p10 = p_Val2_12_reg_1194;

assign p_Val2_1_fu_720_p2 = ($signed(p_Val2_1_fu_720_p0) * $signed({{1'b0}, {p_Val2_1_fu_720_p1}}));

assign p_Val2_22_fu_450_p3 = ((closepath_reg_1081[0:0] === 1'b1) ? 3'd0 : tmp_12_i_i_reg_1129);

assign p_Val2_2_fu_1027_p0 = p_Val2_2_fu_1027_p00;

assign p_Val2_2_fu_1027_p00 = tmp_28_i_i_reg_1219;

assign p_Val2_8_fu_465_p3 = ((tmp_23_fu_456_p1[0:0] === 1'b1) ? p_Val2_i_i_fu_460_p2 : p_Val2_6_reg_1123);

assign p_Val2_i_i_fu_460_p2 = (58'd0 - p_Val2_6_reg_1123);

assign p_Val2_s_fu_322_p1 = x_load_reg_1057;

assign p_i_i_fu_520_p2 = ($signed(8'd131) + $signed(loc_V_reg_1068));

assign r_V_1_fu_811_p2 = ($signed(9'd0) - $signed(rhs_V_1_fu_807_p1));

assign r_V_4_fu_389_p2 = ref_4oPi_table_100_V_q0 << tmp_7_i_i_i_fu_386_p1;

assign r_V_fu_772_p2 = ($signed(p_Val2_16_fu_763_p2) + $signed(tmp_36_i_i_cast_fu_769_p1));

assign ref_4oPi_table_100_V_address0 = tmp_5_i_i_i_fu_377_p1;

assign res_Addr_A = res_Addr_A_orig << 32'd2;

assign res_Addr_A_orig = tmp_s_reg_1047;

assign res_Clk_A = ap_clk;

assign res_Din_A = tmp_1_reg_1304;

assign res_Rst_A = ap_rst_n_inv;

assign ret_V_4_fu_978_p3 = ((tmp_13_fu_973_p2[0:0] === 1'b1) ? p_Result_i_cast_fu_965_p3 : loc_V_2_fu_830_p4);

assign ret_V_5_fu_994_p3 = ((tmp_13_fu_973_p2[0:0] === 1'b1) ? p_Result_1_i_cast_fu_986_p3 : loc_V_3_fu_840_p1);

assign rhs_V_1_fu_807_p1 = $signed(p_Ex_V_ret_i_fu_778_p3);

assign second_order_float_2_address0 = tmp_29_i_i_fu_685_p1;

assign second_order_float_3_address0 = tmp_29_i_i_fu_685_p1;

assign second_order_float_s_address0 = tmp_29_i_i_fu_685_p1;

assign sh_assign_2_i_cast2_fu_595_p1 = sh_assign_reg_1168;

assign sh_assign_2_i_cast_fu_598_p1 = sh_assign_reg_1168;

assign sh_assign_fu_577_p3 = ((isNeg_fu_563_p3[0:0] === 1'b1) ? tmp_18_i_i_fu_571_p2 : sh_i_cast_fu_559_p1);

assign sh_i_cast_fu_559_p1 = Ex_V_fu_553_p2;

assign sin_basis_fu_671_p2 = (cos_basis_fu_626_p10 ^ 1'd1);

assign ssdm_int_V_write_ass_fu_619_p3 = ((isNeg_reg_1163[0:0] === 1'b1) ? tmp_20_i_i_cast_fu_609_p1 : tmp_21_i_i_fu_613_p2);

assign storemerge_i_i_fu_525_p3 = ((closepath_reg_1081[0:0] === 1'b1) ? p_i_i_fu_520_p2 : 8'd0);

assign tmp_12_i_fu_926_p3 = ((cos_basis_reg_1187[0:0] === 1'b1) ? tmp_fu_850_p18 : tmp_12_fu_888_p18);

assign tmp_13_fu_973_p2 = (tmp_15_i_reg_1180 | or_cond_i_fu_933_p2);

assign tmp_13_i_fu_585_p2 = ((loc_V_reg_1068 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_13_i_i_fu_532_p1 = Mx_zeros_V_reg_1145;

assign tmp_14_fu_367_p4 = {{addr_V_fu_359_p3[7:4]}};

assign tmp_14_i_fu_425_p2 = ((loc_V_1_reg_1075 == 23'd0) ? 1'b1 : 1'b0);

assign tmp_15_i_fu_590_p2 = ((loc_V_reg_1068 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_16_i_fu_942_p2 = (tmp_15_i_reg_1180 | tmp_12_i_fu_926_p3);

assign tmp_16_i_i_fu_550_p1 = Mx_zeros_V_reg_1145;

assign tmp_18_i_i_fu_571_p2 = ($signed(9'd0) - $signed(sh_i_cast_fu_559_p1));

assign tmp_19_i_i_fu_601_p1 = Mx_V_reg_1151;

assign tmp_20_i_i_cast_fu_609_p1 = tmp_20_i_i_fu_604_p2;

assign tmp_20_i_i_fu_604_p2 = Mx_V_reg_1151 >> sh_assign_2_i_cast_fu_598_p1;

assign tmp_21_i_i_fu_613_p2 = tmp_19_i_i_fu_601_p1 << sh_assign_2_i_cast2_fu_595_p1;

assign tmp_22_fu_382_p1 = addr_V_fu_359_p3[3:0];

assign tmp_23_fu_456_p1 = p_Val2_22_fu_450_p3[0:0];

assign tmp_29_i_i_fu_685_p1 = p_Result_28_fu_677_p3;

assign tmp_33_i_i_fu_757_p1 = $signed(p_Val2_15_reg_1224);

assign tmp_34_i_i_fu_760_p1 = $signed(tmp_26_i_i_reg_1239);

assign tmp_36_i_i_cast_fu_769_p1 = $signed(tmp_32_i_i_reg_1244);

assign tmp_5_i_i_i_fu_377_p1 = tmp_14_fu_367_p4;

assign tmp_7_i_i_i_fu_386_p1 = tmp_22_reg_1092;

assign tmp_s_fu_317_p1 = i_reg_268;


always @ (p_Result_27_fu_500_p3) begin
    if (p_Result_27_fu_500_p3[0] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd0;
    end else if (p_Result_27_fu_500_p3[1] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd1;
    end else if (p_Result_27_fu_500_p3[2] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd2;
    end else if (p_Result_27_fu_500_p3[3] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd3;
    end else if (p_Result_27_fu_500_p3[4] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd4;
    end else if (p_Result_27_fu_500_p3[5] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd5;
    end else if (p_Result_27_fu_500_p3[6] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd6;
    end else if (p_Result_27_fu_500_p3[7] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd7;
    end else if (p_Result_27_fu_500_p3[8] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd8;
    end else if (p_Result_27_fu_500_p3[9] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd9;
    end else if (p_Result_27_fu_500_p3[10] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd10;
    end else if (p_Result_27_fu_500_p3[11] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd11;
    end else if (p_Result_27_fu_500_p3[12] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd12;
    end else if (p_Result_27_fu_500_p3[13] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd13;
    end else if (p_Result_27_fu_500_p3[14] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd14;
    end else if (p_Result_27_fu_500_p3[15] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd15;
    end else if (p_Result_27_fu_500_p3[16] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd16;
    end else if (p_Result_27_fu_500_p3[17] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd17;
    end else if (p_Result_27_fu_500_p3[18] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd18;
    end else if (p_Result_27_fu_500_p3[19] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd19;
    end else if (p_Result_27_fu_500_p3[20] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd20;
    end else if (p_Result_27_fu_500_p3[21] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd21;
    end else if (p_Result_27_fu_500_p3[22] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd22;
    end else if (p_Result_27_fu_500_p3[23] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd23;
    end else if (p_Result_27_fu_500_p3[24] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd24;
    end else if (p_Result_27_fu_500_p3[25] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd25;
    end else if (p_Result_27_fu_500_p3[26] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd26;
    end else if (p_Result_27_fu_500_p3[27] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd27;
    end else if (p_Result_27_fu_500_p3[28] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd28;
    end else if (p_Result_27_fu_500_p3[29] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd29;
    end else if (p_Result_27_fu_500_p3[30] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd30;
    end else if (p_Result_27_fu_500_p3[31] == 1'b1) begin
        val_assign_fu_508_p3 = 32'd31;
    end else begin
        val_assign_fu_508_p3 = 32'd32;
    end
end

assign x_Addr_A = x_Addr_A_orig << 32'd2;

assign x_Addr_A_orig = tmp_s_fu_317_p1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 32'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 4'd0;

always @ (posedge ap_clk) begin
    tmp_s_reg_1047[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //mathFunction
