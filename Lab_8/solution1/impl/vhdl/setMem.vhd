-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity setMem is
generic (
    C_M_AXI_MASTER_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MASTER_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MASTER_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MASTER_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MASTER_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MASTER_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MASTER_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MASTER_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MASTER_USER_VALUE : INTEGER := 0;
    C_M_AXI_MASTER_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MASTER_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_MASTER_AWVALID : OUT STD_LOGIC;
    m_axi_MASTER_AWREADY : IN STD_LOGIC;
    m_axi_MASTER_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_ADDR_WIDTH-1 downto 0);
    m_axi_MASTER_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_ID_WIDTH-1 downto 0);
    m_axi_MASTER_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MASTER_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MASTER_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MASTER_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MASTER_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MASTER_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MASTER_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MASTER_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MASTER_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_AWUSER_WIDTH-1 downto 0);
    m_axi_MASTER_WVALID : OUT STD_LOGIC;
    m_axi_MASTER_WREADY : IN STD_LOGIC;
    m_axi_MASTER_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_DATA_WIDTH-1 downto 0);
    m_axi_MASTER_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_DATA_WIDTH/8-1 downto 0);
    m_axi_MASTER_WLAST : OUT STD_LOGIC;
    m_axi_MASTER_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_ID_WIDTH-1 downto 0);
    m_axi_MASTER_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_WUSER_WIDTH-1 downto 0);
    m_axi_MASTER_ARVALID : OUT STD_LOGIC;
    m_axi_MASTER_ARREADY : IN STD_LOGIC;
    m_axi_MASTER_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_ADDR_WIDTH-1 downto 0);
    m_axi_MASTER_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_ID_WIDTH-1 downto 0);
    m_axi_MASTER_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MASTER_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MASTER_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MASTER_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MASTER_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MASTER_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MASTER_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MASTER_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MASTER_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MASTER_ARUSER_WIDTH-1 downto 0);
    m_axi_MASTER_RVALID : IN STD_LOGIC;
    m_axi_MASTER_RREADY : OUT STD_LOGIC;
    m_axi_MASTER_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MASTER_DATA_WIDTH-1 downto 0);
    m_axi_MASTER_RLAST : IN STD_LOGIC;
    m_axi_MASTER_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MASTER_ID_WIDTH-1 downto 0);
    m_axi_MASTER_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MASTER_RUSER_WIDTH-1 downto 0);
    m_axi_MASTER_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MASTER_BVALID : IN STD_LOGIC;
    m_axi_MASTER_BREADY : OUT STD_LOGIC;
    m_axi_MASTER_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MASTER_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MASTER_ID_WIDTH-1 downto 0);
    m_axi_MASTER_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MASTER_BUSER_WIDTH-1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of setMem is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "setMem,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=761,HLS_SYN_LUT=975,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_32000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000110010000000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal value_r : STD_LOGIC_VECTOR (7 downto 0);
    signal address : STD_LOGIC_VECTOR (31 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal MASTER_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal MASTER_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal MASTER_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal MASTER_AWVALID : STD_LOGIC;
    signal MASTER_AWREADY : STD_LOGIC;
    signal MASTER_WVALID : STD_LOGIC;
    signal MASTER_WREADY : STD_LOGIC;
    signal MASTER_ARREADY : STD_LOGIC;
    signal MASTER_RVALID : STD_LOGIC;
    signal MASTER_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MASTER_RLAST : STD_LOGIC;
    signal MASTER_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MASTER_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MASTER_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MASTER_BVALID : STD_LOGIC;
    signal MASTER_BREADY : STD_LOGIC;
    signal MASTER_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MASTER_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MASTER_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal size_read_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal MASTER_addr_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal memAddr_1_fu_169_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_ioackin_MASTER_WREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal memAddr_reg_107 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_ioackin_MASTER_AWREADY : STD_LOGIC;
    signal ap_phi_mux_p_0_phi_fu_122_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_118 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal tmp_4_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_MASTER_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_MASTER_WREADY : STD_LOGIC := '0';
    signal address1_fu_130_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal memAddr_cast_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component setMem_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        address : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component setMem_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        value_r : OUT STD_LOGIC_VECTOR (7 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component setMem_MASTER_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    setMem_AXILiteS_s_axi_U : component setMem_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        address => address);

    setMem_CRTL_BUS_s_axi_U : component setMem_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        value_r => value_r,
        size => size);

    setMem_MASTER_m_axi_U : component setMem_MASTER_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MASTER_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MASTER_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MASTER_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MASTER_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MASTER_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MASTER_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MASTER_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MASTER_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MASTER_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MASTER_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MASTER_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MASTER_AWVALID,
        AWREADY => m_axi_MASTER_AWREADY,
        AWADDR => m_axi_MASTER_AWADDR,
        AWID => m_axi_MASTER_AWID,
        AWLEN => m_axi_MASTER_AWLEN,
        AWSIZE => m_axi_MASTER_AWSIZE,
        AWBURST => m_axi_MASTER_AWBURST,
        AWLOCK => m_axi_MASTER_AWLOCK,
        AWCACHE => m_axi_MASTER_AWCACHE,
        AWPROT => m_axi_MASTER_AWPROT,
        AWQOS => m_axi_MASTER_AWQOS,
        AWREGION => m_axi_MASTER_AWREGION,
        AWUSER => m_axi_MASTER_AWUSER,
        WVALID => m_axi_MASTER_WVALID,
        WREADY => m_axi_MASTER_WREADY,
        WDATA => m_axi_MASTER_WDATA,
        WSTRB => m_axi_MASTER_WSTRB,
        WLAST => m_axi_MASTER_WLAST,
        WID => m_axi_MASTER_WID,
        WUSER => m_axi_MASTER_WUSER,
        ARVALID => m_axi_MASTER_ARVALID,
        ARREADY => m_axi_MASTER_ARREADY,
        ARADDR => m_axi_MASTER_ARADDR,
        ARID => m_axi_MASTER_ARID,
        ARLEN => m_axi_MASTER_ARLEN,
        ARSIZE => m_axi_MASTER_ARSIZE,
        ARBURST => m_axi_MASTER_ARBURST,
        ARLOCK => m_axi_MASTER_ARLOCK,
        ARCACHE => m_axi_MASTER_ARCACHE,
        ARPROT => m_axi_MASTER_ARPROT,
        ARQOS => m_axi_MASTER_ARQOS,
        ARREGION => m_axi_MASTER_ARREGION,
        ARUSER => m_axi_MASTER_ARUSER,
        RVALID => m_axi_MASTER_RVALID,
        RREADY => m_axi_MASTER_RREADY,
        RDATA => m_axi_MASTER_RDATA,
        RLAST => m_axi_MASTER_RLAST,
        RID => m_axi_MASTER_RID,
        RUSER => m_axi_MASTER_RUSER,
        RRESP => m_axi_MASTER_RRESP,
        BVALID => m_axi_MASTER_BVALID,
        BREADY => m_axi_MASTER_BREADY,
        BRESP => m_axi_MASTER_BRESP,
        BID => m_axi_MASTER_BID,
        BUSER => m_axi_MASTER_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => MASTER_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => MASTER_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => MASTER_RDATA,
        I_RID => MASTER_RID,
        I_RUSER => MASTER_RUSER,
        I_RRESP => MASTER_RRESP,
        I_RLAST => MASTER_RLAST,
        I_AWVALID => MASTER_AWVALID,
        I_AWREADY => MASTER_AWREADY,
        I_AWADDR => MASTER_addr_reg_189,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => size_read_reg_183,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => MASTER_WVALID,
        I_WREADY => MASTER_WREADY,
        I_WDATA => tmp_reg_195,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => MASTER_BVALID,
        I_BREADY => MASTER_BREADY,
        I_BRESP => MASTER_BRESP,
        I_BID => MASTER_BID,
        I_BUSER => MASTER_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_MASTER_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MASTER_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_MASTER_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_MASTER_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MASTER_AWREADY)) then 
                        ap_reg_ioackin_MASTER_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_MASTER_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_MASTER_WREADY <= ap_const_logic_0;
            else
                if (((tmp_2_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    if ((ap_const_boolean_0 = ap_block_state3_io)) then 
                        ap_reg_ioackin_MASTER_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = MASTER_WREADY)) then 
                        ap_reg_ioackin_MASTER_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    memAddr_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_MASTER_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                memAddr_reg_107 <= ap_const_lv18_0;
            elsif (((tmp_2_fu_164_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                memAddr_reg_107 <= memAddr_1_fu_169_p2;
            end if; 
        end if;
    end process;

    p_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_0 = MASTER_BVALID))) and (tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_reg_118 <= ap_const_lv1_0;
            elsif (((tmp_1_fu_154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_118 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    MASTER_addr_reg_189(29 downto 0) <= tmp_4_fu_140_p1(32 - 1 downto 0)(29 downto 0);
                size_read_reg_183 <= size;
                tmp_1_reg_200 <= tmp_1_fu_154_p2;
                    tmp_reg_195(7 downto 0) <= tmp_fu_150_p1(7 downto 0);
            end if;
        end if;
    end process;
    MASTER_addr_reg_189(31 downto 30) <= "00";
    tmp_reg_195(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_2_fu_164_p2, ap_CS_fsm_state7, tmp_1_reg_200, MASTER_BVALID, tmp_1_fu_154_p2, ap_block_state3_io, ap_sig_ioackin_MASTER_AWREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_1_fu_154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((tmp_1_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_MASTER_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_fu_164_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((tmp_2_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if ((not(((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_0 = MASTER_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    MASTER_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_MASTER_AWREADY)
    begin
        if (((ap_reg_ioackin_MASTER_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            MASTER_AWVALID <= ap_const_logic_1;
        else 
            MASTER_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    MASTER_BREADY_assign_proc : process(ap_CS_fsm_state7, tmp_1_reg_200, MASTER_BVALID)
    begin
        if ((not(((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_0 = MASTER_BVALID))) and (tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            MASTER_BREADY <= ap_const_logic_1;
        else 
            MASTER_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    MASTER_WVALID_assign_proc : process(ap_CS_fsm_state3, tmp_2_fu_164_p2, ap_reg_ioackin_MASTER_WREADY)
    begin
        if (((tmp_2_fu_164_p2 = ap_const_lv1_1) and (ap_reg_ioackin_MASTER_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MASTER_WVALID <= ap_const_logic_1;
        else 
            MASTER_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    MASTER_blk_n_AW_assign_proc : process(m_axi_MASTER_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MASTER_blk_n_AW <= m_axi_MASTER_AWREADY;
        else 
            MASTER_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    MASTER_blk_n_B_assign_proc : process(m_axi_MASTER_BVALID, ap_CS_fsm_state7, tmp_1_reg_200)
    begin
        if (((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            MASTER_blk_n_B <= m_axi_MASTER_BVALID;
        else 
            MASTER_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    MASTER_blk_n_W_assign_proc : process(m_axi_MASTER_WREADY, ap_CS_fsm_state3, tmp_2_fu_164_p2)
    begin
        if (((tmp_2_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MASTER_blk_n_W <= m_axi_MASTER_WREADY;
        else 
            MASTER_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    address1_fu_130_p4 <= address(31 downto 2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state3_io_assign_proc : process(tmp_2_fu_164_p2, ap_sig_ioackin_MASTER_WREADY)
    begin
                ap_block_state3_io <= ((tmp_2_fu_164_p2 = ap_const_lv1_1) and (ap_sig_ioackin_MASTER_WREADY = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(tmp_1_reg_200, MASTER_BVALID)
    begin
                ap_block_state7 <= ((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_0 = MASTER_BVALID));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, tmp_1_reg_200, MASTER_BVALID)
    begin
        if ((not(((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_0 = MASTER_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_122_p4_assign_proc : process(ap_CS_fsm_state7, tmp_1_reg_200, p_0_reg_118)
    begin
        if (((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_p_0_phi_fu_122_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_p_0_phi_fu_122_p4 <= p_0_reg_118;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, tmp_1_reg_200, MASTER_BVALID)
    begin
        if ((not(((tmp_1_reg_200 = ap_const_lv1_1) and (ap_const_logic_0 = MASTER_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_FFFFFFFF when (ap_phi_mux_p_0_phi_fu_122_p4(0) = '1') else 
        ap_const_lv32_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_MASTER_AWREADY_assign_proc : process(MASTER_AWREADY, ap_reg_ioackin_MASTER_AWREADY)
    begin
        if ((ap_reg_ioackin_MASTER_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MASTER_AWREADY <= MASTER_AWREADY;
        else 
            ap_sig_ioackin_MASTER_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_MASTER_WREADY_assign_proc : process(MASTER_WREADY, ap_reg_ioackin_MASTER_WREADY)
    begin
        if ((ap_reg_ioackin_MASTER_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_MASTER_WREADY <= MASTER_WREADY;
        else 
            ap_sig_ioackin_MASTER_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    memAddr_1_fu_169_p2 <= std_logic_vector(unsigned(memAddr_reg_107) + unsigned(ap_const_lv18_1));
    memAddr_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(memAddr_reg_107),32));
    tmp_1_fu_154_p2 <= "1" when (signed(size) < signed(ap_const_lv32_32000)) else "0";
    tmp_2_fu_164_p2 <= "1" when (signed(memAddr_cast_fu_160_p1) < signed(size_read_reg_183)) else "0";
    tmp_4_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(address1_fu_130_p4),64));
    tmp_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(value_r),32));
end behav;
