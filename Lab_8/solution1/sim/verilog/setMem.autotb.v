// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      setMem
`define AUTOTB_DUT_INST AESL_inst_setMem
`define AUTOTB_TOP      apatb_setMem_top
`define AUTOTB_LAT_RESULT_FILE "setMem.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "setMem.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_setMem_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00

`define AESL_DEPTH_MASTER 1
`define AESL_DEPTH_value_r 1
`define AESL_DEPTH_address 1
`define AESL_DEPTH_size 1
`define AUTOTB_TVIN_value_r  "../tv/cdatafile/c.setMem.autotvin_value_r.dat"
`define AUTOTB_TVIN_address  "../tv/cdatafile/c.setMem.autotvin_address.dat"
`define AUTOTB_TVIN_size  "../tv/cdatafile/c.setMem.autotvin_size.dat"
`define AUTOTB_TVIN_value_r_out_wrapc  "../tv/rtldatafile/rtl.setMem.autotvin_value_r.dat"
`define AUTOTB_TVIN_address_out_wrapc  "../tv/rtldatafile/rtl.setMem.autotvin_address.dat"
`define AUTOTB_TVIN_size_out_wrapc  "../tv/rtldatafile/rtl.setMem.autotvin_size.dat"
`define AUTOTB_TVOUT_MASTER  "../tv/cdatafile/c.setMem.autotvout_MASTER.dat"
`define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.setMem.autotvout_ap_return.dat"
`define AUTOTB_TVOUT_MASTER_out_wrapc  "../tv/rtldatafile/rtl.setMem.autotvout_MASTER.dat"
`define AUTOTB_TVOUT_ap_return_out_wrapc  "../tv/rtldatafile/rtl.setMem.autotvout_ap_return.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 1;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = 204805;
parameter LENGTH_MASTER = 100;
parameter LENGTH_value_r = 1;
parameter LENGTH_address = 1;
parameter LENGTH_size = 1;
parameter LENGTH_ap_return = 1;

task read_token;
    input integer fp;
    output reg [199 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg tb_continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire [4 : 0] AXILiteS_AWADDR;
wire  AXILiteS_AWVALID;
wire  AXILiteS_AWREADY;
wire  AXILiteS_WVALID;
wire  AXILiteS_WREADY;
wire [31 : 0] AXILiteS_WDATA;
wire [3 : 0] AXILiteS_WSTRB;
wire [4 : 0] AXILiteS_ARADDR;
wire  AXILiteS_ARVALID;
wire  AXILiteS_ARREADY;
wire  AXILiteS_RVALID;
wire  AXILiteS_RREADY;
wire [31 : 0] AXILiteS_RDATA;
wire [1 : 0] AXILiteS_RRESP;
wire  AXILiteS_BVALID;
wire  AXILiteS_BREADY;
wire [1 : 0] AXILiteS_BRESP;
wire [4 : 0] CRTL_BUS_AWADDR;
wire  CRTL_BUS_AWVALID;
wire  CRTL_BUS_AWREADY;
wire  CRTL_BUS_WVALID;
wire  CRTL_BUS_WREADY;
wire [31 : 0] CRTL_BUS_WDATA;
wire [3 : 0] CRTL_BUS_WSTRB;
wire [4 : 0] CRTL_BUS_ARADDR;
wire  CRTL_BUS_ARVALID;
wire  CRTL_BUS_ARREADY;
wire  CRTL_BUS_RVALID;
wire  CRTL_BUS_RREADY;
wire [31 : 0] CRTL_BUS_RDATA;
wire [1 : 0] CRTL_BUS_RRESP;
wire  CRTL_BUS_BVALID;
wire  CRTL_BUS_BREADY;
wire [1 : 0] CRTL_BUS_BRESP;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire  MASTER_AWVALID;
wire  MASTER_AWREADY;
wire [31 : 0] MASTER_AWADDR;
wire [0 : 0] MASTER_AWID;
wire [7 : 0] MASTER_AWLEN;
wire [2 : 0] MASTER_AWSIZE;
wire [1 : 0] MASTER_AWBURST;
wire [1 : 0] MASTER_AWLOCK;
wire [3 : 0] MASTER_AWCACHE;
wire [2 : 0] MASTER_AWPROT;
wire [3 : 0] MASTER_AWQOS;
wire [3 : 0] MASTER_AWREGION;
wire [0 : 0] MASTER_AWUSER;
wire  MASTER_WVALID;
wire  MASTER_WREADY;
wire [31 : 0] MASTER_WDATA;
wire [3 : 0] MASTER_WSTRB;
wire  MASTER_WLAST;
wire [0 : 0] MASTER_WID;
wire [0 : 0] MASTER_WUSER;
wire  MASTER_ARVALID;
wire  MASTER_ARREADY;
wire [31 : 0] MASTER_ARADDR;
wire [0 : 0] MASTER_ARID;
wire [7 : 0] MASTER_ARLEN;
wire [2 : 0] MASTER_ARSIZE;
wire [1 : 0] MASTER_ARBURST;
wire [1 : 0] MASTER_ARLOCK;
wire [3 : 0] MASTER_ARCACHE;
wire [2 : 0] MASTER_ARPROT;
wire [3 : 0] MASTER_ARQOS;
wire [3 : 0] MASTER_ARREGION;
wire [0 : 0] MASTER_ARUSER;
wire  MASTER_RVALID;
wire  MASTER_RREADY;
wire [31 : 0] MASTER_RDATA;
wire  MASTER_RLAST;
wire [0 : 0] MASTER_RID;
wire [0 : 0] MASTER_RUSER;
wire [1 : 0] MASTER_RRESP;
wire  MASTER_BVALID;
wire  MASTER_BREADY;
wire [1 : 0] MASTER_BRESP;
wire [0 : 0] MASTER_BID;
wire [0 : 0] MASTER_BUSER;
wire [31 : 0] ap_return;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire CRTL_BUS_write_data_finish;
wire AXILiteS_write_data_finish;
wire AESL_slave_start;
reg AESL_slave_start_lock = 0;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
wire AESL_slave_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;
reg ap_done_lock = 0;

wire ap_clk;
wire ap_rst_n;
wire ap_rst_n_n;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .s_axi_AXILiteS_AWADDR(AXILiteS_AWADDR),
    .s_axi_AXILiteS_AWVALID(AXILiteS_AWVALID),
    .s_axi_AXILiteS_AWREADY(AXILiteS_AWREADY),
    .s_axi_AXILiteS_WVALID(AXILiteS_WVALID),
    .s_axi_AXILiteS_WREADY(AXILiteS_WREADY),
    .s_axi_AXILiteS_WDATA(AXILiteS_WDATA),
    .s_axi_AXILiteS_WSTRB(AXILiteS_WSTRB),
    .s_axi_AXILiteS_ARADDR(AXILiteS_ARADDR),
    .s_axi_AXILiteS_ARVALID(AXILiteS_ARVALID),
    .s_axi_AXILiteS_ARREADY(AXILiteS_ARREADY),
    .s_axi_AXILiteS_RVALID(AXILiteS_RVALID),
    .s_axi_AXILiteS_RREADY(AXILiteS_RREADY),
    .s_axi_AXILiteS_RDATA(AXILiteS_RDATA),
    .s_axi_AXILiteS_RRESP(AXILiteS_RRESP),
    .s_axi_AXILiteS_BVALID(AXILiteS_BVALID),
    .s_axi_AXILiteS_BREADY(AXILiteS_BREADY),
    .s_axi_AXILiteS_BRESP(AXILiteS_BRESP),
    .s_axi_CRTL_BUS_AWADDR(CRTL_BUS_AWADDR),
    .s_axi_CRTL_BUS_AWVALID(CRTL_BUS_AWVALID),
    .s_axi_CRTL_BUS_AWREADY(CRTL_BUS_AWREADY),
    .s_axi_CRTL_BUS_WVALID(CRTL_BUS_WVALID),
    .s_axi_CRTL_BUS_WREADY(CRTL_BUS_WREADY),
    .s_axi_CRTL_BUS_WDATA(CRTL_BUS_WDATA),
    .s_axi_CRTL_BUS_WSTRB(CRTL_BUS_WSTRB),
    .s_axi_CRTL_BUS_ARADDR(CRTL_BUS_ARADDR),
    .s_axi_CRTL_BUS_ARVALID(CRTL_BUS_ARVALID),
    .s_axi_CRTL_BUS_ARREADY(CRTL_BUS_ARREADY),
    .s_axi_CRTL_BUS_RVALID(CRTL_BUS_RVALID),
    .s_axi_CRTL_BUS_RREADY(CRTL_BUS_RREADY),
    .s_axi_CRTL_BUS_RDATA(CRTL_BUS_RDATA),
    .s_axi_CRTL_BUS_RRESP(CRTL_BUS_RRESP),
    .s_axi_CRTL_BUS_BVALID(CRTL_BUS_BVALID),
    .s_axi_CRTL_BUS_BREADY(CRTL_BUS_BREADY),
    .s_axi_CRTL_BUS_BRESP(CRTL_BUS_BRESP),
    .ap_clk(ap_clk),
    .ap_rst_n(ap_rst_n),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .m_axi_MASTER_AWVALID(MASTER_AWVALID),
    .m_axi_MASTER_AWREADY(MASTER_AWREADY),
    .m_axi_MASTER_AWADDR(MASTER_AWADDR),
    .m_axi_MASTER_AWID(MASTER_AWID),
    .m_axi_MASTER_AWLEN(MASTER_AWLEN),
    .m_axi_MASTER_AWSIZE(MASTER_AWSIZE),
    .m_axi_MASTER_AWBURST(MASTER_AWBURST),
    .m_axi_MASTER_AWLOCK(MASTER_AWLOCK),
    .m_axi_MASTER_AWCACHE(MASTER_AWCACHE),
    .m_axi_MASTER_AWPROT(MASTER_AWPROT),
    .m_axi_MASTER_AWQOS(MASTER_AWQOS),
    .m_axi_MASTER_AWREGION(MASTER_AWREGION),
    .m_axi_MASTER_AWUSER(MASTER_AWUSER),
    .m_axi_MASTER_WVALID(MASTER_WVALID),
    .m_axi_MASTER_WREADY(MASTER_WREADY),
    .m_axi_MASTER_WDATA(MASTER_WDATA),
    .m_axi_MASTER_WSTRB(MASTER_WSTRB),
    .m_axi_MASTER_WLAST(MASTER_WLAST),
    .m_axi_MASTER_WID(MASTER_WID),
    .m_axi_MASTER_WUSER(MASTER_WUSER),
    .m_axi_MASTER_ARVALID(MASTER_ARVALID),
    .m_axi_MASTER_ARREADY(MASTER_ARREADY),
    .m_axi_MASTER_ARADDR(MASTER_ARADDR),
    .m_axi_MASTER_ARID(MASTER_ARID),
    .m_axi_MASTER_ARLEN(MASTER_ARLEN),
    .m_axi_MASTER_ARSIZE(MASTER_ARSIZE),
    .m_axi_MASTER_ARBURST(MASTER_ARBURST),
    .m_axi_MASTER_ARLOCK(MASTER_ARLOCK),
    .m_axi_MASTER_ARCACHE(MASTER_ARCACHE),
    .m_axi_MASTER_ARPROT(MASTER_ARPROT),
    .m_axi_MASTER_ARQOS(MASTER_ARQOS),
    .m_axi_MASTER_ARREGION(MASTER_ARREGION),
    .m_axi_MASTER_ARUSER(MASTER_ARUSER),
    .m_axi_MASTER_RVALID(MASTER_RVALID),
    .m_axi_MASTER_RREADY(MASTER_RREADY),
    .m_axi_MASTER_RDATA(MASTER_RDATA),
    .m_axi_MASTER_RLAST(MASTER_RLAST),
    .m_axi_MASTER_RID(MASTER_RID),
    .m_axi_MASTER_RUSER(MASTER_RUSER),
    .m_axi_MASTER_RRESP(MASTER_RRESP),
    .m_axi_MASTER_BVALID(MASTER_BVALID),
    .m_axi_MASTER_BREADY(MASTER_BREADY),
    .m_axi_MASTER_BRESP(MASTER_BRESP),
    .m_axi_MASTER_BID(MASTER_BID),
    .m_axi_MASTER_BUSER(MASTER_BUSER),
    .ap_return(ap_return));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst_n = AESL_reset;
assign ap_rst_n_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_slave_start | AESL_slave_start_lock;
assign AESL_start = start;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = tb_continue;
  assign AESL_slave_write_start_in = slave_start_status  & CRTL_BUS_write_data_finish & AXILiteS_write_data_finish;
  assign AESL_slave_write_start_finish = AESL_slave_write_start_in;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_slave_done =  1 ;
  assign AESL_done = (ap_done_lock | ap_done) & AESL_slave_done & slave_done_status;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_start_lock <= 0;
    end
    else begin
        if (AESL_ready == 1) begin
            AESL_slave_start_lock <= 0;
        end
        else if (AESL_slave_start == 1) begin
            AESL_slave_start_lock <= 1;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        ap_done_lock <= 0;
    end
    else begin
        if (AESL_done == 1) begin
            ap_done_lock <= 0;
        end
        else if (ap_done == 1) begin
            ap_done_lock <= 1;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1 && AESL_done == 0) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_done == 1 ) begin
        slave_done_status <= 1;
    end
end
    always @(posedge AESL_clock) begin
        if (AESL_reset === 0) begin
        end else begin
            if (AESL_done !== 1 && AESL_done !== 0) begin
                $display("ERROR: Control signal AESL_done is invalid!");
                $finish;
            end
        end
    end
    always @(posedge AESL_clock) begin
        if (AESL_reset === 0) begin
        end else begin
            if (AESL_ready !== 1 && AESL_ready !== 0) begin
                $display("ERROR: Control signal AESL_ready is invalid!");
                $finish;
            end
        end
    end




wire    AESL_axi_master_MASTER_ready;
wire    AESL_axi_master_MASTER_done;
wire [32 - 1:0] address;
AESL_axi_master_MASTER AESL_AXI_MASTER_MASTER(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_MASTER_AWVALID (MASTER_AWVALID),
    .TRAN_MASTER_AWREADY (MASTER_AWREADY),
    .TRAN_MASTER_AWADDR (MASTER_AWADDR),
    .TRAN_MASTER_AWID (MASTER_AWID),
    .TRAN_MASTER_AWLEN (MASTER_AWLEN),
    .TRAN_MASTER_AWSIZE (MASTER_AWSIZE),
    .TRAN_MASTER_AWBURST (MASTER_AWBURST),
    .TRAN_MASTER_AWLOCK (MASTER_AWLOCK),
    .TRAN_MASTER_AWCACHE (MASTER_AWCACHE),
    .TRAN_MASTER_AWPROT (MASTER_AWPROT),
    .TRAN_MASTER_AWQOS (MASTER_AWQOS),
    .TRAN_MASTER_AWREGION (MASTER_AWREGION),
    .TRAN_MASTER_AWUSER (MASTER_AWUSER),
    .TRAN_MASTER_WVALID (MASTER_WVALID),
    .TRAN_MASTER_WREADY (MASTER_WREADY),
    .TRAN_MASTER_WDATA (MASTER_WDATA),
    .TRAN_MASTER_WSTRB (MASTER_WSTRB),
    .TRAN_MASTER_WLAST (MASTER_WLAST),
    .TRAN_MASTER_WID (MASTER_WID),
    .TRAN_MASTER_WUSER (MASTER_WUSER),
    .TRAN_MASTER_ARVALID (MASTER_ARVALID),
    .TRAN_MASTER_ARREADY (MASTER_ARREADY),
    .TRAN_MASTER_ARADDR (MASTER_ARADDR),
    .TRAN_MASTER_ARID (MASTER_ARID),
    .TRAN_MASTER_ARLEN (MASTER_ARLEN),
    .TRAN_MASTER_ARSIZE (MASTER_ARSIZE),
    .TRAN_MASTER_ARBURST (MASTER_ARBURST),
    .TRAN_MASTER_ARLOCK (MASTER_ARLOCK),
    .TRAN_MASTER_ARCACHE (MASTER_ARCACHE),
    .TRAN_MASTER_ARPROT (MASTER_ARPROT),
    .TRAN_MASTER_ARQOS (MASTER_ARQOS),
    .TRAN_MASTER_ARREGION (MASTER_ARREGION),
    .TRAN_MASTER_ARUSER (MASTER_ARUSER),
    .TRAN_MASTER_RVALID (MASTER_RVALID),
    .TRAN_MASTER_RREADY (MASTER_RREADY),
    .TRAN_MASTER_RDATA (MASTER_RDATA),
    .TRAN_MASTER_RLAST (MASTER_RLAST),
    .TRAN_MASTER_RID (MASTER_RID),
    .TRAN_MASTER_RUSER (MASTER_RUSER),
    .TRAN_MASTER_RRESP (MASTER_RRESP),
    .TRAN_MASTER_BVALID (MASTER_BVALID),
    .TRAN_MASTER_BREADY (MASTER_BREADY),
    .TRAN_MASTER_BRESP (MASTER_BRESP),
    .TRAN_MASTER_BID (MASTER_BID),
    .TRAN_MASTER_BUSER (MASTER_BUSER),
    .TRAN_MASTER_address (address),
    .ready (AESL_axi_master_MASTER_ready),
    .done  (AESL_axi_master_MASTER_done)
);
assign    AESL_axi_master_MASTER_ready    =   ready;
assign    AESL_axi_master_MASTER_done    =   AESL_done_delay;

AESL_axi_slave_CRTL_BUS AESL_AXI_SLAVE_CRTL_BUS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_CRTL_BUS_AWADDR (CRTL_BUS_AWADDR),
    .TRAN_s_axi_CRTL_BUS_AWVALID (CRTL_BUS_AWVALID),
    .TRAN_s_axi_CRTL_BUS_AWREADY (CRTL_BUS_AWREADY),
    .TRAN_s_axi_CRTL_BUS_WVALID (CRTL_BUS_WVALID),
    .TRAN_s_axi_CRTL_BUS_WREADY (CRTL_BUS_WREADY),
    .TRAN_s_axi_CRTL_BUS_WDATA (CRTL_BUS_WDATA),
    .TRAN_s_axi_CRTL_BUS_WSTRB (CRTL_BUS_WSTRB),
    .TRAN_s_axi_CRTL_BUS_ARADDR (CRTL_BUS_ARADDR),
    .TRAN_s_axi_CRTL_BUS_ARVALID (CRTL_BUS_ARVALID),
    .TRAN_s_axi_CRTL_BUS_ARREADY (CRTL_BUS_ARREADY),
    .TRAN_s_axi_CRTL_BUS_RVALID (CRTL_BUS_RVALID),
    .TRAN_s_axi_CRTL_BUS_RREADY (CRTL_BUS_RREADY),
    .TRAN_s_axi_CRTL_BUS_RDATA (CRTL_BUS_RDATA),
    .TRAN_s_axi_CRTL_BUS_RRESP (CRTL_BUS_RRESP),
    .TRAN_s_axi_CRTL_BUS_BVALID (CRTL_BUS_BVALID),
    .TRAN_s_axi_CRTL_BUS_BREADY (CRTL_BUS_BREADY),
    .TRAN_s_axi_CRTL_BUS_BRESP (CRTL_BUS_BRESP),
    .TRAN_CRTL_BUS_write_data_finish(CRTL_BUS_write_data_finish),
    .TRAN_CRTL_BUS_ready_in (AESL_slave_ready),
    .TRAN_CRTL_BUS_done_in (AESL_slave_output_done),
    .TRAN_CRTL_BUS_idle_in (AESL_idle),
    .TRAN_CRTL_BUS_transaction_done_in (AESL_done_delay),
    .TRAN_CRTL_BUS_start_in  (AESL_slave_start)
);
AESL_axi_slave_AXILiteS AESL_AXI_SLAVE_AXILiteS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_AXILiteS_AWADDR (AXILiteS_AWADDR),
    .TRAN_s_axi_AXILiteS_AWVALID (AXILiteS_AWVALID),
    .TRAN_s_axi_AXILiteS_AWREADY (AXILiteS_AWREADY),
    .TRAN_s_axi_AXILiteS_WVALID (AXILiteS_WVALID),
    .TRAN_s_axi_AXILiteS_WREADY (AXILiteS_WREADY),
    .TRAN_s_axi_AXILiteS_WDATA (AXILiteS_WDATA),
    .TRAN_s_axi_AXILiteS_WSTRB (AXILiteS_WSTRB),
    .TRAN_s_axi_AXILiteS_ARADDR (AXILiteS_ARADDR),
    .TRAN_s_axi_AXILiteS_ARVALID (AXILiteS_ARVALID),
    .TRAN_s_axi_AXILiteS_ARREADY (AXILiteS_ARREADY),
    .TRAN_s_axi_AXILiteS_RVALID (AXILiteS_RVALID),
    .TRAN_s_axi_AXILiteS_RREADY (AXILiteS_RREADY),
    .TRAN_s_axi_AXILiteS_RDATA (AXILiteS_RDATA),
    .TRAN_s_axi_AXILiteS_RRESP (AXILiteS_RRESP),
    .TRAN_s_axi_AXILiteS_BVALID (AXILiteS_BVALID),
    .TRAN_s_axi_AXILiteS_BREADY (AXILiteS_BREADY),
    .TRAN_s_axi_AXILiteS_BRESP (AXILiteS_BRESP),
    .TRAN_address (address),
    .TRAN_AXILiteS_write_data_finish(AXILiteS_write_data_finish),
    .TRAN_AXILiteS_ready_in (AESL_slave_ready),
    .TRAN_AXILiteS_done_in (AESL_slave_output_done),
    .TRAN_AXILiteS_idle_in (AESL_idle),
    .TRAN_AXILiteS_transaction_done_in (AESL_done_delay),
    .TRAN_AXILiteS_start_in  (AESL_slave_start)
);

initial begin : write_file_process_ap_return
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer ap_return_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 1);
    fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
          $fdisplay(fp,"0x%x", ap_return);
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 1);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (~AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_value_r;
reg [31:0] size_value_r;
reg [31:0] size_value_r_backup;
reg end_address;
reg [31:0] size_address;
reg [31:0] size_address_backup;
reg end_size;
reg [31:0] size_size;
reg [31:0] size_size_backup;
reg end_MASTER;
reg [31:0] size_MASTER;
reg [31:0] size_MASTER_backup;
reg end_ap_return;
reg [31:0] size_ap_return;
reg [31:0] size_ap_return_backup;

initial begin : initial_process
    integer proc_rand;
    rst = 0;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 1;
end
initial begin : start_process
    integer proc_rand;
    reg [31:0] start_cnt;
    ce = 1;
    start = 0;
    start_cnt = 0;
    wait (AESL_reset === 1);
    @ (posedge AESL_clock);
    #0 start = 1;
    start_cnt = start_cnt + 1;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt >= AUTOTB_TRANSACTION_NUM) begin
            // keep pushing garbage in
            #0 start = 1;
        end
        if (AESL_ready) begin
            start_cnt = start_cnt + 1;
        end
    end
end

always @(AESL_done)
begin
    tb_continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_MASTER;

initial begin : dump_tvout_runtime_sign_MASTER
    integer fp;
    dump_tvout_finish_MASTER = 0;
    fp = $fopen(`AUTOTB_TVOUT_MASTER_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_MASTER_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_MASTER_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_MASTER_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_MASTER = 1;
end


////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;
reg AESL_start_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
    AESL_start_p1 <= AESL_start;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] ready_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] ap_ready_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    ap_ready_cnt = 0;
    wait (AESL_reset == 1);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if ((AESL_start && AESL_ready_p1)||(AESL_start && ~AESL_start_p1)) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (ap_ready_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start_p1 && AESL_ready_p1) begin
                ready_timestamp[ap_ready_cnt] = clk_cnt;
                ap_ready_cnt = ap_ready_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin : simulation_progress
    real intra_progress;
    wait (AESL_reset == 1);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("//");
    $display("// RTL Simulation : \"Inter-Transaction Progress\" [\"Intra-Transaction Progress\"] @ \"Simulation Time\"");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                print_progress();
                progress_timeout = PROGRESS_TIMEOUT;
            end else begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
            end
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task get_intra_progress(output real intra_progress);
    begin
        if (start_cnt > finish_cnt) begin
            intra_progress = clk_cnt - start_timestamp[finish_cnt];
        end else if(finish_cnt > 0) begin
            intra_progress = LATENCY_ESTIMATION;
        end else begin
            intra_progress = 0;
        end
        intra_progress = intra_progress / LATENCY_ESTIMATION;
    end
endtask

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            get_intra_progress(intra_progress);
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress * 100, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [n/a] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = finish_timestamp[i] - start_timestamp[i]+1;
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            interval_average = 0;
        end else begin
            interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);
        end

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


////////////////////////////////////////////
// Dependence Check
////////////////////////////////////////////

`ifndef POST_SYN

`endif

endmodule
