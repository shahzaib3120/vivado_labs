// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "setMem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic setMem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic setMem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> setMem::ap_ST_fsm_state1 = "1";
const sc_lv<7> setMem::ap_ST_fsm_state2 = "10";
const sc_lv<7> setMem::ap_ST_fsm_state3 = "100";
const sc_lv<7> setMem::ap_ST_fsm_state4 = "1000";
const sc_lv<7> setMem::ap_ST_fsm_state5 = "10000";
const sc_lv<7> setMem::ap_ST_fsm_state6 = "100000";
const sc_lv<7> setMem::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> setMem::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> setMem::ap_const_lv32_1 = "1";
const sc_lv<32> setMem::ap_const_lv32_2 = "10";
const sc_lv<1> setMem::ap_const_lv1_1 = "1";
const sc_lv<32> setMem::ap_const_lv32_6 = "110";
const int setMem::C_S_AXI_DATA_WIDTH = "100000";
const int setMem::C_M_AXI_MASTER_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int setMem::C_M_AXI_MASTER_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int setMem::C_M_AXI_MASTER_CACHE_VALUE = "11";
const int setMem::C_M_AXI_DATA_WIDTH = "100000";
const bool setMem::ap_const_boolean_0 = false;
const sc_lv<18> setMem::ap_const_lv18_0 = "000000000000000000";
const sc_lv<1> setMem::ap_const_lv1_0 = "0";
const sc_lv<3> setMem::ap_const_lv3_0 = "000";
const sc_lv<2> setMem::ap_const_lv2_0 = "00";
const sc_lv<4> setMem::ap_const_lv4_0 = "0000";
const sc_lv<4> setMem::ap_const_lv4_F = "1111";
const sc_lv<32> setMem::ap_const_lv32_1F = "11111";
const sc_lv<32> setMem::ap_const_lv32_32000 = "110010000000000000";
const sc_lv<18> setMem::ap_const_lv18_1 = "1";
const sc_lv<32> setMem::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool setMem::ap_const_boolean_1 = true;

setMem::setMem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    setMem_AXILiteS_s_axi_U = new setMem_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("setMem_AXILiteS_s_axi_U");
    setMem_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    setMem_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    setMem_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    setMem_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    setMem_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    setMem_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    setMem_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    setMem_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    setMem_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    setMem_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    setMem_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    setMem_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    setMem_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    setMem_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    setMem_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    setMem_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    setMem_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    setMem_AXILiteS_s_axi_U->ACLK(ap_clk);
    setMem_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    setMem_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    setMem_AXILiteS_s_axi_U->address(address);
    setMem_CRTL_BUS_s_axi_U = new setMem_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("setMem_CRTL_BUS_s_axi_U");
    setMem_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    setMem_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    setMem_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    setMem_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    setMem_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    setMem_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    setMem_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    setMem_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    setMem_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    setMem_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    setMem_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    setMem_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    setMem_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    setMem_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    setMem_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    setMem_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    setMem_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    setMem_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    setMem_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    setMem_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    setMem_CRTL_BUS_s_axi_U->value_r(value_r);
    setMem_CRTL_BUS_s_axi_U->size(size);
    setMem_MASTER_m_axi_U = new setMem_MASTER_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_MASTER_ID_WIDTH,C_M_AXI_MASTER_ADDR_WIDTH,C_M_AXI_MASTER_DATA_WIDTH,C_M_AXI_MASTER_AWUSER_WIDTH,C_M_AXI_MASTER_ARUSER_WIDTH,C_M_AXI_MASTER_WUSER_WIDTH,C_M_AXI_MASTER_RUSER_WIDTH,C_M_AXI_MASTER_BUSER_WIDTH,C_M_AXI_MASTER_USER_VALUE,C_M_AXI_MASTER_PROT_VALUE,C_M_AXI_MASTER_CACHE_VALUE>("setMem_MASTER_m_axi_U");
    setMem_MASTER_m_axi_U->AWVALID(m_axi_MASTER_AWVALID);
    setMem_MASTER_m_axi_U->AWREADY(m_axi_MASTER_AWREADY);
    setMem_MASTER_m_axi_U->AWADDR(m_axi_MASTER_AWADDR);
    setMem_MASTER_m_axi_U->AWID(m_axi_MASTER_AWID);
    setMem_MASTER_m_axi_U->AWLEN(m_axi_MASTER_AWLEN);
    setMem_MASTER_m_axi_U->AWSIZE(m_axi_MASTER_AWSIZE);
    setMem_MASTER_m_axi_U->AWBURST(m_axi_MASTER_AWBURST);
    setMem_MASTER_m_axi_U->AWLOCK(m_axi_MASTER_AWLOCK);
    setMem_MASTER_m_axi_U->AWCACHE(m_axi_MASTER_AWCACHE);
    setMem_MASTER_m_axi_U->AWPROT(m_axi_MASTER_AWPROT);
    setMem_MASTER_m_axi_U->AWQOS(m_axi_MASTER_AWQOS);
    setMem_MASTER_m_axi_U->AWREGION(m_axi_MASTER_AWREGION);
    setMem_MASTER_m_axi_U->AWUSER(m_axi_MASTER_AWUSER);
    setMem_MASTER_m_axi_U->WVALID(m_axi_MASTER_WVALID);
    setMem_MASTER_m_axi_U->WREADY(m_axi_MASTER_WREADY);
    setMem_MASTER_m_axi_U->WDATA(m_axi_MASTER_WDATA);
    setMem_MASTER_m_axi_U->WSTRB(m_axi_MASTER_WSTRB);
    setMem_MASTER_m_axi_U->WLAST(m_axi_MASTER_WLAST);
    setMem_MASTER_m_axi_U->WID(m_axi_MASTER_WID);
    setMem_MASTER_m_axi_U->WUSER(m_axi_MASTER_WUSER);
    setMem_MASTER_m_axi_U->ARVALID(m_axi_MASTER_ARVALID);
    setMem_MASTER_m_axi_U->ARREADY(m_axi_MASTER_ARREADY);
    setMem_MASTER_m_axi_U->ARADDR(m_axi_MASTER_ARADDR);
    setMem_MASTER_m_axi_U->ARID(m_axi_MASTER_ARID);
    setMem_MASTER_m_axi_U->ARLEN(m_axi_MASTER_ARLEN);
    setMem_MASTER_m_axi_U->ARSIZE(m_axi_MASTER_ARSIZE);
    setMem_MASTER_m_axi_U->ARBURST(m_axi_MASTER_ARBURST);
    setMem_MASTER_m_axi_U->ARLOCK(m_axi_MASTER_ARLOCK);
    setMem_MASTER_m_axi_U->ARCACHE(m_axi_MASTER_ARCACHE);
    setMem_MASTER_m_axi_U->ARPROT(m_axi_MASTER_ARPROT);
    setMem_MASTER_m_axi_U->ARQOS(m_axi_MASTER_ARQOS);
    setMem_MASTER_m_axi_U->ARREGION(m_axi_MASTER_ARREGION);
    setMem_MASTER_m_axi_U->ARUSER(m_axi_MASTER_ARUSER);
    setMem_MASTER_m_axi_U->RVALID(m_axi_MASTER_RVALID);
    setMem_MASTER_m_axi_U->RREADY(m_axi_MASTER_RREADY);
    setMem_MASTER_m_axi_U->RDATA(m_axi_MASTER_RDATA);
    setMem_MASTER_m_axi_U->RLAST(m_axi_MASTER_RLAST);
    setMem_MASTER_m_axi_U->RID(m_axi_MASTER_RID);
    setMem_MASTER_m_axi_U->RUSER(m_axi_MASTER_RUSER);
    setMem_MASTER_m_axi_U->RRESP(m_axi_MASTER_RRESP);
    setMem_MASTER_m_axi_U->BVALID(m_axi_MASTER_BVALID);
    setMem_MASTER_m_axi_U->BREADY(m_axi_MASTER_BREADY);
    setMem_MASTER_m_axi_U->BRESP(m_axi_MASTER_BRESP);
    setMem_MASTER_m_axi_U->BID(m_axi_MASTER_BID);
    setMem_MASTER_m_axi_U->BUSER(m_axi_MASTER_BUSER);
    setMem_MASTER_m_axi_U->ACLK(ap_clk);
    setMem_MASTER_m_axi_U->ARESET(ap_rst_n_inv);
    setMem_MASTER_m_axi_U->ACLK_EN(ap_var_for_const0);
    setMem_MASTER_m_axi_U->I_ARVALID(ap_var_for_const1);
    setMem_MASTER_m_axi_U->I_ARREADY(MASTER_ARREADY);
    setMem_MASTER_m_axi_U->I_ARADDR(ap_var_for_const2);
    setMem_MASTER_m_axi_U->I_ARID(ap_var_for_const3);
    setMem_MASTER_m_axi_U->I_ARLEN(ap_var_for_const2);
    setMem_MASTER_m_axi_U->I_ARSIZE(ap_var_for_const4);
    setMem_MASTER_m_axi_U->I_ARLOCK(ap_var_for_const5);
    setMem_MASTER_m_axi_U->I_ARCACHE(ap_var_for_const6);
    setMem_MASTER_m_axi_U->I_ARQOS(ap_var_for_const6);
    setMem_MASTER_m_axi_U->I_ARPROT(ap_var_for_const4);
    setMem_MASTER_m_axi_U->I_ARUSER(ap_var_for_const3);
    setMem_MASTER_m_axi_U->I_ARBURST(ap_var_for_const5);
    setMem_MASTER_m_axi_U->I_ARREGION(ap_var_for_const6);
    setMem_MASTER_m_axi_U->I_RVALID(MASTER_RVALID);
    setMem_MASTER_m_axi_U->I_RREADY(ap_var_for_const1);
    setMem_MASTER_m_axi_U->I_RDATA(MASTER_RDATA);
    setMem_MASTER_m_axi_U->I_RID(MASTER_RID);
    setMem_MASTER_m_axi_U->I_RUSER(MASTER_RUSER);
    setMem_MASTER_m_axi_U->I_RRESP(MASTER_RRESP);
    setMem_MASTER_m_axi_U->I_RLAST(MASTER_RLAST);
    setMem_MASTER_m_axi_U->I_AWVALID(MASTER_AWVALID);
    setMem_MASTER_m_axi_U->I_AWREADY(MASTER_AWREADY);
    setMem_MASTER_m_axi_U->I_AWADDR(MASTER_addr_reg_189);
    setMem_MASTER_m_axi_U->I_AWID(ap_var_for_const3);
    setMem_MASTER_m_axi_U->I_AWLEN(size_read_reg_183);
    setMem_MASTER_m_axi_U->I_AWSIZE(ap_var_for_const4);
    setMem_MASTER_m_axi_U->I_AWLOCK(ap_var_for_const5);
    setMem_MASTER_m_axi_U->I_AWCACHE(ap_var_for_const6);
    setMem_MASTER_m_axi_U->I_AWQOS(ap_var_for_const6);
    setMem_MASTER_m_axi_U->I_AWPROT(ap_var_for_const4);
    setMem_MASTER_m_axi_U->I_AWUSER(ap_var_for_const3);
    setMem_MASTER_m_axi_U->I_AWBURST(ap_var_for_const5);
    setMem_MASTER_m_axi_U->I_AWREGION(ap_var_for_const6);
    setMem_MASTER_m_axi_U->I_WVALID(MASTER_WVALID);
    setMem_MASTER_m_axi_U->I_WREADY(MASTER_WREADY);
    setMem_MASTER_m_axi_U->I_WDATA(tmp_reg_195);
    setMem_MASTER_m_axi_U->I_WID(ap_var_for_const3);
    setMem_MASTER_m_axi_U->I_WUSER(ap_var_for_const3);
    setMem_MASTER_m_axi_U->I_WLAST(ap_var_for_const1);
    setMem_MASTER_m_axi_U->I_WSTRB(ap_var_for_const7);
    setMem_MASTER_m_axi_U->I_BVALID(MASTER_BVALID);
    setMem_MASTER_m_axi_U->I_BREADY(MASTER_BREADY);
    setMem_MASTER_m_axi_U->I_BRESP(MASTER_BRESP);
    setMem_MASTER_m_axi_U->I_BID(MASTER_BID);
    setMem_MASTER_m_axi_U->I_BUSER(MASTER_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_MASTER_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_MASTER_AWREADY );

    SC_METHOD(thread_MASTER_BREADY);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( MASTER_BVALID );

    SC_METHOD(thread_MASTER_WVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_164_p2 );
    sensitive << ( ap_reg_ioackin_MASTER_WREADY );

    SC_METHOD(thread_MASTER_blk_n_AW);
    sensitive << ( m_axi_MASTER_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MASTER_blk_n_B);
    sensitive << ( m_axi_MASTER_BVALID );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_reg_200 );

    SC_METHOD(thread_MASTER_blk_n_W);
    sensitive << ( m_axi_MASTER_WREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_164_p2 );

    SC_METHOD(thread_address1_fu_130_p4);
    sensitive << ( address );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( tmp_2_fu_164_p2 );
    sensitive << ( ap_sig_ioackin_MASTER_WREADY );

    SC_METHOD(thread_ap_block_state7);
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( MASTER_BVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( MASTER_BVALID );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_phi_fu_122_p4);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( p_0_reg_118 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( MASTER_BVALID );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( MASTER_BVALID );
    sensitive << ( ap_phi_mux_p_0_phi_fu_122_p4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_MASTER_AWREADY);
    sensitive << ( MASTER_AWREADY );
    sensitive << ( ap_reg_ioackin_MASTER_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_MASTER_WREADY);
    sensitive << ( MASTER_WREADY );
    sensitive << ( ap_reg_ioackin_MASTER_WREADY );

    SC_METHOD(thread_memAddr_1_fu_169_p2);
    sensitive << ( memAddr_reg_107 );

    SC_METHOD(thread_memAddr_cast_fu_160_p1);
    sensitive << ( memAddr_reg_107 );

    SC_METHOD(thread_tmp_1_fu_154_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( size );

    SC_METHOD(thread_tmp_2_fu_164_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( size_read_reg_183 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( memAddr_cast_fu_160_p1 );

    SC_METHOD(thread_tmp_4_fu_140_p1);
    sensitive << ( address1_fu_130_p4 );

    SC_METHOD(thread_tmp_fu_150_p1);
    sensitive << ( value_r );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_164_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_reg_200 );
    sensitive << ( MASTER_BVALID );
    sensitive << ( tmp_1_fu_154_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_sig_ioackin_MASTER_AWREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "0000001";
    ap_reg_ioackin_MASTER_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_MASTER_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "setMem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_MASTER_AWVALID, "(port)m_axi_MASTER_AWVALID");
    sc_trace(mVcdFile, m_axi_MASTER_AWREADY, "(port)m_axi_MASTER_AWREADY");
    sc_trace(mVcdFile, m_axi_MASTER_AWADDR, "(port)m_axi_MASTER_AWADDR");
    sc_trace(mVcdFile, m_axi_MASTER_AWID, "(port)m_axi_MASTER_AWID");
    sc_trace(mVcdFile, m_axi_MASTER_AWLEN, "(port)m_axi_MASTER_AWLEN");
    sc_trace(mVcdFile, m_axi_MASTER_AWSIZE, "(port)m_axi_MASTER_AWSIZE");
    sc_trace(mVcdFile, m_axi_MASTER_AWBURST, "(port)m_axi_MASTER_AWBURST");
    sc_trace(mVcdFile, m_axi_MASTER_AWLOCK, "(port)m_axi_MASTER_AWLOCK");
    sc_trace(mVcdFile, m_axi_MASTER_AWCACHE, "(port)m_axi_MASTER_AWCACHE");
    sc_trace(mVcdFile, m_axi_MASTER_AWPROT, "(port)m_axi_MASTER_AWPROT");
    sc_trace(mVcdFile, m_axi_MASTER_AWQOS, "(port)m_axi_MASTER_AWQOS");
    sc_trace(mVcdFile, m_axi_MASTER_AWREGION, "(port)m_axi_MASTER_AWREGION");
    sc_trace(mVcdFile, m_axi_MASTER_AWUSER, "(port)m_axi_MASTER_AWUSER");
    sc_trace(mVcdFile, m_axi_MASTER_WVALID, "(port)m_axi_MASTER_WVALID");
    sc_trace(mVcdFile, m_axi_MASTER_WREADY, "(port)m_axi_MASTER_WREADY");
    sc_trace(mVcdFile, m_axi_MASTER_WDATA, "(port)m_axi_MASTER_WDATA");
    sc_trace(mVcdFile, m_axi_MASTER_WSTRB, "(port)m_axi_MASTER_WSTRB");
    sc_trace(mVcdFile, m_axi_MASTER_WLAST, "(port)m_axi_MASTER_WLAST");
    sc_trace(mVcdFile, m_axi_MASTER_WID, "(port)m_axi_MASTER_WID");
    sc_trace(mVcdFile, m_axi_MASTER_WUSER, "(port)m_axi_MASTER_WUSER");
    sc_trace(mVcdFile, m_axi_MASTER_ARVALID, "(port)m_axi_MASTER_ARVALID");
    sc_trace(mVcdFile, m_axi_MASTER_ARREADY, "(port)m_axi_MASTER_ARREADY");
    sc_trace(mVcdFile, m_axi_MASTER_ARADDR, "(port)m_axi_MASTER_ARADDR");
    sc_trace(mVcdFile, m_axi_MASTER_ARID, "(port)m_axi_MASTER_ARID");
    sc_trace(mVcdFile, m_axi_MASTER_ARLEN, "(port)m_axi_MASTER_ARLEN");
    sc_trace(mVcdFile, m_axi_MASTER_ARSIZE, "(port)m_axi_MASTER_ARSIZE");
    sc_trace(mVcdFile, m_axi_MASTER_ARBURST, "(port)m_axi_MASTER_ARBURST");
    sc_trace(mVcdFile, m_axi_MASTER_ARLOCK, "(port)m_axi_MASTER_ARLOCK");
    sc_trace(mVcdFile, m_axi_MASTER_ARCACHE, "(port)m_axi_MASTER_ARCACHE");
    sc_trace(mVcdFile, m_axi_MASTER_ARPROT, "(port)m_axi_MASTER_ARPROT");
    sc_trace(mVcdFile, m_axi_MASTER_ARQOS, "(port)m_axi_MASTER_ARQOS");
    sc_trace(mVcdFile, m_axi_MASTER_ARREGION, "(port)m_axi_MASTER_ARREGION");
    sc_trace(mVcdFile, m_axi_MASTER_ARUSER, "(port)m_axi_MASTER_ARUSER");
    sc_trace(mVcdFile, m_axi_MASTER_RVALID, "(port)m_axi_MASTER_RVALID");
    sc_trace(mVcdFile, m_axi_MASTER_RREADY, "(port)m_axi_MASTER_RREADY");
    sc_trace(mVcdFile, m_axi_MASTER_RDATA, "(port)m_axi_MASTER_RDATA");
    sc_trace(mVcdFile, m_axi_MASTER_RLAST, "(port)m_axi_MASTER_RLAST");
    sc_trace(mVcdFile, m_axi_MASTER_RID, "(port)m_axi_MASTER_RID");
    sc_trace(mVcdFile, m_axi_MASTER_RUSER, "(port)m_axi_MASTER_RUSER");
    sc_trace(mVcdFile, m_axi_MASTER_RRESP, "(port)m_axi_MASTER_RRESP");
    sc_trace(mVcdFile, m_axi_MASTER_BVALID, "(port)m_axi_MASTER_BVALID");
    sc_trace(mVcdFile, m_axi_MASTER_BREADY, "(port)m_axi_MASTER_BREADY");
    sc_trace(mVcdFile, m_axi_MASTER_BRESP, "(port)m_axi_MASTER_BRESP");
    sc_trace(mVcdFile, m_axi_MASTER_BID, "(port)m_axi_MASTER_BID");
    sc_trace(mVcdFile, m_axi_MASTER_BUSER, "(port)m_axi_MASTER_BUSER");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, value_r, "value_r");
    sc_trace(mVcdFile, address, "address");
    sc_trace(mVcdFile, size, "size");
    sc_trace(mVcdFile, MASTER_blk_n_AW, "MASTER_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, MASTER_blk_n_W, "MASTER_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_164_p2, "tmp_2_fu_164_p2");
    sc_trace(mVcdFile, MASTER_blk_n_B, "MASTER_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_1_reg_200, "tmp_1_reg_200");
    sc_trace(mVcdFile, MASTER_AWVALID, "MASTER_AWVALID");
    sc_trace(mVcdFile, MASTER_AWREADY, "MASTER_AWREADY");
    sc_trace(mVcdFile, MASTER_WVALID, "MASTER_WVALID");
    sc_trace(mVcdFile, MASTER_WREADY, "MASTER_WREADY");
    sc_trace(mVcdFile, MASTER_ARREADY, "MASTER_ARREADY");
    sc_trace(mVcdFile, MASTER_RVALID, "MASTER_RVALID");
    sc_trace(mVcdFile, MASTER_RDATA, "MASTER_RDATA");
    sc_trace(mVcdFile, MASTER_RLAST, "MASTER_RLAST");
    sc_trace(mVcdFile, MASTER_RID, "MASTER_RID");
    sc_trace(mVcdFile, MASTER_RUSER, "MASTER_RUSER");
    sc_trace(mVcdFile, MASTER_RRESP, "MASTER_RRESP");
    sc_trace(mVcdFile, MASTER_BVALID, "MASTER_BVALID");
    sc_trace(mVcdFile, MASTER_BREADY, "MASTER_BREADY");
    sc_trace(mVcdFile, MASTER_BRESP, "MASTER_BRESP");
    sc_trace(mVcdFile, MASTER_BID, "MASTER_BID");
    sc_trace(mVcdFile, MASTER_BUSER, "MASTER_BUSER");
    sc_trace(mVcdFile, size_read_reg_183, "size_read_reg_183");
    sc_trace(mVcdFile, MASTER_addr_reg_189, "MASTER_addr_reg_189");
    sc_trace(mVcdFile, tmp_fu_150_p1, "tmp_fu_150_p1");
    sc_trace(mVcdFile, tmp_reg_195, "tmp_reg_195");
    sc_trace(mVcdFile, tmp_1_fu_154_p2, "tmp_1_fu_154_p2");
    sc_trace(mVcdFile, memAddr_1_fu_169_p2, "memAddr_1_fu_169_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_MASTER_WREADY, "ap_sig_ioackin_MASTER_WREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, memAddr_reg_107, "memAddr_reg_107");
    sc_trace(mVcdFile, ap_sig_ioackin_MASTER_AWREADY, "ap_sig_ioackin_MASTER_AWREADY");
    sc_trace(mVcdFile, ap_phi_mux_p_0_phi_fu_122_p4, "ap_phi_mux_p_0_phi_fu_122_p4");
    sc_trace(mVcdFile, p_0_reg_118, "p_0_reg_118");
    sc_trace(mVcdFile, ap_block_state7, "ap_block_state7");
    sc_trace(mVcdFile, tmp_4_fu_140_p1, "tmp_4_fu_140_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_MASTER_AWREADY, "ap_reg_ioackin_MASTER_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_MASTER_WREADY, "ap_reg_ioackin_MASTER_WREADY");
    sc_trace(mVcdFile, address1_fu_130_p4, "address1_fu_130_p4");
    sc_trace(mVcdFile, memAddr_cast_fu_160_p1, "memAddr_cast_fu_160_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("setMem.hdltvin.dat");
    mHdltvoutHandle.open("setMem.hdltvout.dat");
}

setMem::~setMem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete setMem_AXILiteS_s_axi_U;
    delete setMem_CRTL_BUS_s_axi_U;
    delete setMem_MASTER_m_axi_U;
}

void setMem::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void setMem::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void setMem::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void setMem::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void setMem::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void setMem::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void setMem::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void setMem::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void setMem::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_MASTER_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_MASTER_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_MASTER_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, MASTER_AWREADY.read())) {
                ap_reg_ioackin_MASTER_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_MASTER_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_2_fu_164_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read())) {
                ap_reg_ioackin_MASTER_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, MASTER_WREADY.read())) {
                ap_reg_ioackin_MASTER_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_sig_ioackin_MASTER_AWREADY.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        memAddr_reg_107 = ap_const_lv18_0;
    } else if ((esl_seteq<1,1,1>(tmp_2_fu_164_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        memAddr_reg_107 = memAddr_1_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, MASTER_BVALID.read())))) {
        p_0_reg_118 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(tmp_1_fu_154_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_118 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        MASTER_addr_reg_189 =  (sc_lv<32>) (tmp_4_fu_140_p1.read());
        size_read_reg_183 = size.read();
        tmp_1_reg_200 = tmp_1_fu_154_p2.read();
        tmp_reg_195 = tmp_fu_150_p1.read();
    }
}

void setMem::thread_MASTER_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_MASTER_AWREADY.read()))) {
        MASTER_AWVALID = ap_const_logic_1;
    } else {
        MASTER_AWVALID = ap_const_logic_0;
    }
}

void setMem::thread_MASTER_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, MASTER_BVALID.read())))) {
        MASTER_BREADY = ap_const_logic_1;
    } else {
        MASTER_BREADY = ap_const_logic_0;
    }
}

void setMem::thread_MASTER_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_164_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_MASTER_WREADY.read()))) {
        MASTER_WVALID = ap_const_logic_1;
    } else {
        MASTER_WVALID = ap_const_logic_0;
    }
}

void setMem::thread_MASTER_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MASTER_blk_n_AW = m_axi_MASTER_AWREADY.read();
    } else {
        MASTER_blk_n_AW = ap_const_logic_1;
    }
}

void setMem::thread_MASTER_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1))) {
        MASTER_blk_n_B = m_axi_MASTER_BVALID.read();
    } else {
        MASTER_blk_n_B = ap_const_logic_1;
    }
}

void setMem::thread_MASTER_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_164_p2.read(), ap_const_lv1_1))) {
        MASTER_blk_n_W = m_axi_MASTER_WREADY.read();
    } else {
        MASTER_blk_n_W = ap_const_logic_1;
    }
}

void setMem::thread_address1_fu_130_p4() {
    address1_fu_130_p4 = address.read().range(31, 2);
}

void setMem::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void setMem::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void setMem::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void setMem::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void setMem::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(tmp_2_fu_164_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_MASTER_WREADY.read()));
}

void setMem::thread_ap_block_state7() {
    ap_block_state7 = (esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, MASTER_BVALID.read()));
}

void setMem::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, MASTER_BVALID.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void setMem::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void setMem::thread_ap_phi_mux_p_0_phi_fu_122_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1))) {
        ap_phi_mux_p_0_phi_fu_122_p4 = ap_const_lv1_0;
    } else {
        ap_phi_mux_p_0_phi_fu_122_p4 = p_0_reg_118.read();
    }
}

void setMem::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, MASTER_BVALID.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void setMem::thread_ap_return() {
    ap_return = (!ap_phi_mux_p_0_phi_fu_122_p4.read()[0].is_01())? sc_lv<32>(): ((ap_phi_mux_p_0_phi_fu_122_p4.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_0);
}

void setMem::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void setMem::thread_ap_sig_ioackin_MASTER_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_MASTER_AWREADY.read())) {
        ap_sig_ioackin_MASTER_AWREADY = MASTER_AWREADY.read();
    } else {
        ap_sig_ioackin_MASTER_AWREADY = ap_const_logic_1;
    }
}

void setMem::thread_ap_sig_ioackin_MASTER_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_MASTER_WREADY.read())) {
        ap_sig_ioackin_MASTER_WREADY = MASTER_WREADY.read();
    } else {
        ap_sig_ioackin_MASTER_WREADY = ap_const_logic_1;
    }
}

void setMem::thread_memAddr_1_fu_169_p2() {
    memAddr_1_fu_169_p2 = (!memAddr_reg_107.read().is_01() || !ap_const_lv18_1.is_01())? sc_lv<18>(): (sc_biguint<18>(memAddr_reg_107.read()) + sc_biguint<18>(ap_const_lv18_1));
}

void setMem::thread_memAddr_cast_fu_160_p1() {
    memAddr_cast_fu_160_p1 = esl_zext<32,18>(memAddr_reg_107.read());
}

void setMem::thread_tmp_1_fu_154_p2() {
    tmp_1_fu_154_p2 = (!size.read().is_01() || !ap_const_lv32_32000.is_01())? sc_lv<1>(): (sc_bigint<32>(size.read()) < sc_bigint<32>(ap_const_lv32_32000));
}

void setMem::thread_tmp_2_fu_164_p2() {
    tmp_2_fu_164_p2 = (!memAddr_cast_fu_160_p1.read().is_01() || !size_read_reg_183.read().is_01())? sc_lv<1>(): (sc_bigint<32>(memAddr_cast_fu_160_p1.read()) < sc_bigint<32>(size_read_reg_183.read()));
}

void setMem::thread_tmp_4_fu_140_p1() {
    tmp_4_fu_140_p1 = esl_zext<64,30>(address1_fu_130_p4.read());
}

void setMem::thread_tmp_fu_150_p1() {
    tmp_fu_150_p1 = esl_zext<32,8>(value_r.read());
}

void setMem::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(tmp_1_fu_154_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else if ((esl_seteq<1,1,1>(tmp_1_fu_154_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_MASTER_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_2_fu_164_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(tmp_2_fu_164_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((!(esl_seteq<1,1,1>(tmp_1_reg_200.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, MASTER_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void setMem::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWVALID\" :  \"" << m_axi_MASTER_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_AWREADY\" :  \"" << m_axi_MASTER_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWADDR\" :  \"" << m_axi_MASTER_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWID\" :  \"" << m_axi_MASTER_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWLEN\" :  \"" << m_axi_MASTER_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWSIZE\" :  \"" << m_axi_MASTER_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWBURST\" :  \"" << m_axi_MASTER_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWLOCK\" :  \"" << m_axi_MASTER_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWCACHE\" :  \"" << m_axi_MASTER_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWPROT\" :  \"" << m_axi_MASTER_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWQOS\" :  \"" << m_axi_MASTER_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWREGION\" :  \"" << m_axi_MASTER_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_AWUSER\" :  \"" << m_axi_MASTER_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_WVALID\" :  \"" << m_axi_MASTER_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_WREADY\" :  \"" << m_axi_MASTER_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_WDATA\" :  \"" << m_axi_MASTER_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_WSTRB\" :  \"" << m_axi_MASTER_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_WLAST\" :  \"" << m_axi_MASTER_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_WID\" :  \"" << m_axi_MASTER_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_WUSER\" :  \"" << m_axi_MASTER_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARVALID\" :  \"" << m_axi_MASTER_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_ARREADY\" :  \"" << m_axi_MASTER_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARADDR\" :  \"" << m_axi_MASTER_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARID\" :  \"" << m_axi_MASTER_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARLEN\" :  \"" << m_axi_MASTER_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARSIZE\" :  \"" << m_axi_MASTER_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARBURST\" :  \"" << m_axi_MASTER_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARLOCK\" :  \"" << m_axi_MASTER_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARCACHE\" :  \"" << m_axi_MASTER_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARPROT\" :  \"" << m_axi_MASTER_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARQOS\" :  \"" << m_axi_MASTER_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARREGION\" :  \"" << m_axi_MASTER_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_ARUSER\" :  \"" << m_axi_MASTER_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_RVALID\" :  \"" << m_axi_MASTER_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_RREADY\" :  \"" << m_axi_MASTER_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_RDATA\" :  \"" << m_axi_MASTER_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_RLAST\" :  \"" << m_axi_MASTER_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_RID\" :  \"" << m_axi_MASTER_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_RUSER\" :  \"" << m_axi_MASTER_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_RRESP\" :  \"" << m_axi_MASTER_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BVALID\" :  \"" << m_axi_MASTER_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BREADY\" :  \"" << m_axi_MASTER_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BRESP\" :  \"" << m_axi_MASTER_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BID\" :  \"" << m_axi_MASTER_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUSER\" :  \"" << m_axi_MASTER_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

