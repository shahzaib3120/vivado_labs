// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _setMem_HH_
#define _setMem_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "setMem_AXILiteS_s_axi.h"
#include "setMem_CRTL_BUS_s_axi.h"
#include "setMem_MASTER_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_MASTER_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_MASTER_ID_WIDTH = 1,
         unsigned int C_M_AXI_MASTER_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_MASTER_DATA_WIDTH = 32,
         unsigned int C_M_AXI_MASTER_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_MASTER_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_MASTER_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_MASTER_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32,
         unsigned int C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CRTL_BUS_DATA_WIDTH = 32>
struct setMem : public sc_module {
    // Port declarations 86
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_MASTER_AWVALID;
    sc_in< sc_logic > m_axi_MASTER_AWREADY;
    sc_out< sc_uint<C_M_AXI_MASTER_ADDR_WIDTH> > m_axi_MASTER_AWADDR;
    sc_out< sc_uint<C_M_AXI_MASTER_ID_WIDTH> > m_axi_MASTER_AWID;
    sc_out< sc_lv<8> > m_axi_MASTER_AWLEN;
    sc_out< sc_lv<3> > m_axi_MASTER_AWSIZE;
    sc_out< sc_lv<2> > m_axi_MASTER_AWBURST;
    sc_out< sc_lv<2> > m_axi_MASTER_AWLOCK;
    sc_out< sc_lv<4> > m_axi_MASTER_AWCACHE;
    sc_out< sc_lv<3> > m_axi_MASTER_AWPROT;
    sc_out< sc_lv<4> > m_axi_MASTER_AWQOS;
    sc_out< sc_lv<4> > m_axi_MASTER_AWREGION;
    sc_out< sc_uint<C_M_AXI_MASTER_AWUSER_WIDTH> > m_axi_MASTER_AWUSER;
    sc_out< sc_logic > m_axi_MASTER_WVALID;
    sc_in< sc_logic > m_axi_MASTER_WREADY;
    sc_out< sc_uint<C_M_AXI_MASTER_DATA_WIDTH> > m_axi_MASTER_WDATA;
    sc_out< sc_uint<C_M_AXI_MASTER_DATA_WIDTH/8> > m_axi_MASTER_WSTRB;
    sc_out< sc_logic > m_axi_MASTER_WLAST;
    sc_out< sc_uint<C_M_AXI_MASTER_ID_WIDTH> > m_axi_MASTER_WID;
    sc_out< sc_uint<C_M_AXI_MASTER_WUSER_WIDTH> > m_axi_MASTER_WUSER;
    sc_out< sc_logic > m_axi_MASTER_ARVALID;
    sc_in< sc_logic > m_axi_MASTER_ARREADY;
    sc_out< sc_uint<C_M_AXI_MASTER_ADDR_WIDTH> > m_axi_MASTER_ARADDR;
    sc_out< sc_uint<C_M_AXI_MASTER_ID_WIDTH> > m_axi_MASTER_ARID;
    sc_out< sc_lv<8> > m_axi_MASTER_ARLEN;
    sc_out< sc_lv<3> > m_axi_MASTER_ARSIZE;
    sc_out< sc_lv<2> > m_axi_MASTER_ARBURST;
    sc_out< sc_lv<2> > m_axi_MASTER_ARLOCK;
    sc_out< sc_lv<4> > m_axi_MASTER_ARCACHE;
    sc_out< sc_lv<3> > m_axi_MASTER_ARPROT;
    sc_out< sc_lv<4> > m_axi_MASTER_ARQOS;
    sc_out< sc_lv<4> > m_axi_MASTER_ARREGION;
    sc_out< sc_uint<C_M_AXI_MASTER_ARUSER_WIDTH> > m_axi_MASTER_ARUSER;
    sc_in< sc_logic > m_axi_MASTER_RVALID;
    sc_out< sc_logic > m_axi_MASTER_RREADY;
    sc_in< sc_uint<C_M_AXI_MASTER_DATA_WIDTH> > m_axi_MASTER_RDATA;
    sc_in< sc_logic > m_axi_MASTER_RLAST;
    sc_in< sc_uint<C_M_AXI_MASTER_ID_WIDTH> > m_axi_MASTER_RID;
    sc_in< sc_uint<C_M_AXI_MASTER_RUSER_WIDTH> > m_axi_MASTER_RUSER;
    sc_in< sc_lv<2> > m_axi_MASTER_RRESP;
    sc_in< sc_logic > m_axi_MASTER_BVALID;
    sc_out< sc_logic > m_axi_MASTER_BREADY;
    sc_in< sc_lv<2> > m_axi_MASTER_BRESP;
    sc_in< sc_uint<C_M_AXI_MASTER_ID_WIDTH> > m_axi_MASTER_BID;
    sc_in< sc_uint<C_M_AXI_MASTER_BUSER_WIDTH> > m_axi_MASTER_BUSER;
    sc_out< sc_lv<32> > ap_return;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in< sc_logic > s_axi_CRTL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CRTL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH/8> > s_axi_CRTL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CRTL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CRTL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CRTL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<4> > ap_var_for_const7;


    // Module declarations
    setMem(sc_module_name name);
    SC_HAS_PROCESS(setMem);

    ~setMem();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    setMem_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* setMem_AXILiteS_s_axi_U;
    setMem_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>* setMem_CRTL_BUS_s_axi_U;
    setMem_MASTER_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_MASTER_ID_WIDTH,C_M_AXI_MASTER_ADDR_WIDTH,C_M_AXI_MASTER_DATA_WIDTH,C_M_AXI_MASTER_AWUSER_WIDTH,C_M_AXI_MASTER_ARUSER_WIDTH,C_M_AXI_MASTER_WUSER_WIDTH,C_M_AXI_MASTER_RUSER_WIDTH,C_M_AXI_MASTER_BUSER_WIDTH,C_M_AXI_MASTER_USER_VALUE,C_M_AXI_MASTER_PROT_VALUE,C_M_AXI_MASTER_CACHE_VALUE>* setMem_MASTER_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > value_r;
    sc_signal< sc_lv<32> > address;
    sc_signal< sc_lv<32> > size;
    sc_signal< sc_logic > MASTER_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > MASTER_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_2_fu_164_p2;
    sc_signal< sc_logic > MASTER_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > tmp_1_reg_200;
    sc_signal< sc_logic > MASTER_AWVALID;
    sc_signal< sc_logic > MASTER_AWREADY;
    sc_signal< sc_logic > MASTER_WVALID;
    sc_signal< sc_logic > MASTER_WREADY;
    sc_signal< sc_logic > MASTER_ARREADY;
    sc_signal< sc_logic > MASTER_RVALID;
    sc_signal< sc_lv<32> > MASTER_RDATA;
    sc_signal< sc_logic > MASTER_RLAST;
    sc_signal< sc_lv<1> > MASTER_RID;
    sc_signal< sc_lv<1> > MASTER_RUSER;
    sc_signal< sc_lv<2> > MASTER_RRESP;
    sc_signal< sc_logic > MASTER_BVALID;
    sc_signal< sc_logic > MASTER_BREADY;
    sc_signal< sc_lv<2> > MASTER_BRESP;
    sc_signal< sc_lv<1> > MASTER_BID;
    sc_signal< sc_lv<1> > MASTER_BUSER;
    sc_signal< sc_lv<32> > size_read_reg_183;
    sc_signal< sc_lv<32> > MASTER_addr_reg_189;
    sc_signal< sc_lv<32> > tmp_fu_150_p1;
    sc_signal< sc_lv<32> > tmp_reg_195;
    sc_signal< sc_lv<1> > tmp_1_fu_154_p2;
    sc_signal< sc_lv<18> > memAddr_1_fu_169_p2;
    sc_signal< sc_logic > ap_sig_ioackin_MASTER_WREADY;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<18> > memAddr_reg_107;
    sc_signal< sc_logic > ap_sig_ioackin_MASTER_AWREADY;
    sc_signal< sc_lv<1> > ap_phi_mux_p_0_phi_fu_122_p4;
    sc_signal< sc_lv<1> > p_0_reg_118;
    sc_signal< bool > ap_block_state7;
    sc_signal< sc_lv<64> > tmp_4_fu_140_p1;
    sc_signal< sc_logic > ap_reg_ioackin_MASTER_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_MASTER_WREADY;
    sc_signal< sc_lv<30> > address1_fu_130_p4;
    sc_signal< sc_lv<32> > memAddr_cast_fu_160_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_MASTER_USER_VALUE;
    static const int C_M_AXI_MASTER_PROT_VALUE;
    static const int C_M_AXI_MASTER_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const bool ap_const_boolean_0;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_32000;
    static const sc_lv<18> ap_const_lv18_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_MASTER_AWVALID();
    void thread_MASTER_BREADY();
    void thread_MASTER_WVALID();
    void thread_MASTER_blk_n_AW();
    void thread_MASTER_blk_n_B();
    void thread_MASTER_blk_n_W();
    void thread_address1_fu_130_p4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state3_io();
    void thread_ap_block_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_0_phi_fu_122_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_MASTER_AWREADY();
    void thread_ap_sig_ioackin_MASTER_WREADY();
    void thread_memAddr_1_fu_169_p2();
    void thread_memAddr_cast_fu_160_p1();
    void thread_tmp_1_fu_154_p2();
    void thread_tmp_2_fu_164_p2();
    void thread_tmp_4_fu_140_p1();
    void thread_tmp_fu_150_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
