// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="setMem,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=761,HLS_SYN_LUT=975,HLS_VERSION=2018_2}" *)

module setMem (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_MASTER_AWVALID,
        m_axi_MASTER_AWREADY,
        m_axi_MASTER_AWADDR,
        m_axi_MASTER_AWID,
        m_axi_MASTER_AWLEN,
        m_axi_MASTER_AWSIZE,
        m_axi_MASTER_AWBURST,
        m_axi_MASTER_AWLOCK,
        m_axi_MASTER_AWCACHE,
        m_axi_MASTER_AWPROT,
        m_axi_MASTER_AWQOS,
        m_axi_MASTER_AWREGION,
        m_axi_MASTER_AWUSER,
        m_axi_MASTER_WVALID,
        m_axi_MASTER_WREADY,
        m_axi_MASTER_WDATA,
        m_axi_MASTER_WSTRB,
        m_axi_MASTER_WLAST,
        m_axi_MASTER_WID,
        m_axi_MASTER_WUSER,
        m_axi_MASTER_ARVALID,
        m_axi_MASTER_ARREADY,
        m_axi_MASTER_ARADDR,
        m_axi_MASTER_ARID,
        m_axi_MASTER_ARLEN,
        m_axi_MASTER_ARSIZE,
        m_axi_MASTER_ARBURST,
        m_axi_MASTER_ARLOCK,
        m_axi_MASTER_ARCACHE,
        m_axi_MASTER_ARPROT,
        m_axi_MASTER_ARQOS,
        m_axi_MASTER_ARREGION,
        m_axi_MASTER_ARUSER,
        m_axi_MASTER_RVALID,
        m_axi_MASTER_RREADY,
        m_axi_MASTER_RDATA,
        m_axi_MASTER_RLAST,
        m_axi_MASTER_RID,
        m_axi_MASTER_RUSER,
        m_axi_MASTER_RRESP,
        m_axi_MASTER_BVALID,
        m_axi_MASTER_BREADY,
        m_axi_MASTER_BRESP,
        m_axi_MASTER_BID,
        m_axi_MASTER_BUSER,
        ap_return,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_M_AXI_MASTER_ID_WIDTH = 1;
parameter    C_M_AXI_MASTER_ADDR_WIDTH = 32;
parameter    C_M_AXI_MASTER_DATA_WIDTH = 32;
parameter    C_M_AXI_MASTER_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_WUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_RUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_BUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_USER_VALUE = 0;
parameter    C_M_AXI_MASTER_PROT_VALUE = 0;
parameter    C_M_AXI_MASTER_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MASTER_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_MASTER_AWVALID;
input   m_axi_MASTER_AWREADY;
output  [C_M_AXI_MASTER_ADDR_WIDTH - 1:0] m_axi_MASTER_AWADDR;
output  [C_M_AXI_MASTER_ID_WIDTH - 1:0] m_axi_MASTER_AWID;
output  [7:0] m_axi_MASTER_AWLEN;
output  [2:0] m_axi_MASTER_AWSIZE;
output  [1:0] m_axi_MASTER_AWBURST;
output  [1:0] m_axi_MASTER_AWLOCK;
output  [3:0] m_axi_MASTER_AWCACHE;
output  [2:0] m_axi_MASTER_AWPROT;
output  [3:0] m_axi_MASTER_AWQOS;
output  [3:0] m_axi_MASTER_AWREGION;
output  [C_M_AXI_MASTER_AWUSER_WIDTH - 1:0] m_axi_MASTER_AWUSER;
output   m_axi_MASTER_WVALID;
input   m_axi_MASTER_WREADY;
output  [C_M_AXI_MASTER_DATA_WIDTH - 1:0] m_axi_MASTER_WDATA;
output  [C_M_AXI_MASTER_WSTRB_WIDTH - 1:0] m_axi_MASTER_WSTRB;
output   m_axi_MASTER_WLAST;
output  [C_M_AXI_MASTER_ID_WIDTH - 1:0] m_axi_MASTER_WID;
output  [C_M_AXI_MASTER_WUSER_WIDTH - 1:0] m_axi_MASTER_WUSER;
output   m_axi_MASTER_ARVALID;
input   m_axi_MASTER_ARREADY;
output  [C_M_AXI_MASTER_ADDR_WIDTH - 1:0] m_axi_MASTER_ARADDR;
output  [C_M_AXI_MASTER_ID_WIDTH - 1:0] m_axi_MASTER_ARID;
output  [7:0] m_axi_MASTER_ARLEN;
output  [2:0] m_axi_MASTER_ARSIZE;
output  [1:0] m_axi_MASTER_ARBURST;
output  [1:0] m_axi_MASTER_ARLOCK;
output  [3:0] m_axi_MASTER_ARCACHE;
output  [2:0] m_axi_MASTER_ARPROT;
output  [3:0] m_axi_MASTER_ARQOS;
output  [3:0] m_axi_MASTER_ARREGION;
output  [C_M_AXI_MASTER_ARUSER_WIDTH - 1:0] m_axi_MASTER_ARUSER;
input   m_axi_MASTER_RVALID;
output   m_axi_MASTER_RREADY;
input  [C_M_AXI_MASTER_DATA_WIDTH - 1:0] m_axi_MASTER_RDATA;
input   m_axi_MASTER_RLAST;
input  [C_M_AXI_MASTER_ID_WIDTH - 1:0] m_axi_MASTER_RID;
input  [C_M_AXI_MASTER_RUSER_WIDTH - 1:0] m_axi_MASTER_RUSER;
input  [1:0] m_axi_MASTER_RRESP;
input   m_axi_MASTER_BVALID;
output   m_axi_MASTER_BREADY;
input  [1:0] m_axi_MASTER_BRESP;
input  [C_M_AXI_MASTER_ID_WIDTH - 1:0] m_axi_MASTER_BID;
input  [C_M_AXI_MASTER_BUSER_WIDTH - 1:0] m_axi_MASTER_BUSER;
output  [31:0] ap_return;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] value_r;
wire   [31:0] address;
wire   [31:0] size;
reg    MASTER_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    MASTER_blk_n_W;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_164_p2;
reg    MASTER_blk_n_B;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_1_reg_200;
reg    MASTER_AWVALID;
wire    MASTER_AWREADY;
reg    MASTER_WVALID;
wire    MASTER_WREADY;
wire    MASTER_ARREADY;
wire    MASTER_RVALID;
wire   [31:0] MASTER_RDATA;
wire    MASTER_RLAST;
wire   [0:0] MASTER_RID;
wire   [0:0] MASTER_RUSER;
wire   [1:0] MASTER_RRESP;
wire    MASTER_BVALID;
reg    MASTER_BREADY;
wire   [1:0] MASTER_BRESP;
wire   [0:0] MASTER_BID;
wire   [0:0] MASTER_BUSER;
reg   [31:0] size_read_reg_183;
reg   [31:0] MASTER_addr_reg_189;
wire   [31:0] tmp_fu_150_p1;
reg   [31:0] tmp_reg_195;
wire   [0:0] tmp_1_fu_154_p2;
wire   [17:0] memAddr_1_fu_169_p2;
reg    ap_sig_ioackin_MASTER_WREADY;
reg    ap_block_state3_io;
reg   [17:0] memAddr_reg_107;
reg    ap_sig_ioackin_MASTER_AWREADY;
reg   [0:0] ap_phi_mux_p_0_phi_fu_122_p4;
reg   [0:0] p_0_reg_118;
reg    ap_block_state7;
wire   [63:0] tmp_4_fu_140_p1;
reg    ap_reg_ioackin_MASTER_AWREADY;
reg    ap_reg_ioackin_MASTER_WREADY;
wire   [29:0] address1_fu_130_p4;
wire   [31:0] memAddr_cast_fu_160_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_reg_ioackin_MASTER_AWREADY = 1'b0;
#0 ap_reg_ioackin_MASTER_WREADY = 1'b0;
end

setMem_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
setMem_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .address(address)
);

setMem_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
setMem_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .value_r(value_r),
    .size(size)
);

setMem_MASTER_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MASTER_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MASTER_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MASTER_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MASTER_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MASTER_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MASTER_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MASTER_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MASTER_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MASTER_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MASTER_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MASTER_CACHE_VALUE ))
setMem_MASTER_m_axi_U(
    .AWVALID(m_axi_MASTER_AWVALID),
    .AWREADY(m_axi_MASTER_AWREADY),
    .AWADDR(m_axi_MASTER_AWADDR),
    .AWID(m_axi_MASTER_AWID),
    .AWLEN(m_axi_MASTER_AWLEN),
    .AWSIZE(m_axi_MASTER_AWSIZE),
    .AWBURST(m_axi_MASTER_AWBURST),
    .AWLOCK(m_axi_MASTER_AWLOCK),
    .AWCACHE(m_axi_MASTER_AWCACHE),
    .AWPROT(m_axi_MASTER_AWPROT),
    .AWQOS(m_axi_MASTER_AWQOS),
    .AWREGION(m_axi_MASTER_AWREGION),
    .AWUSER(m_axi_MASTER_AWUSER),
    .WVALID(m_axi_MASTER_WVALID),
    .WREADY(m_axi_MASTER_WREADY),
    .WDATA(m_axi_MASTER_WDATA),
    .WSTRB(m_axi_MASTER_WSTRB),
    .WLAST(m_axi_MASTER_WLAST),
    .WID(m_axi_MASTER_WID),
    .WUSER(m_axi_MASTER_WUSER),
    .ARVALID(m_axi_MASTER_ARVALID),
    .ARREADY(m_axi_MASTER_ARREADY),
    .ARADDR(m_axi_MASTER_ARADDR),
    .ARID(m_axi_MASTER_ARID),
    .ARLEN(m_axi_MASTER_ARLEN),
    .ARSIZE(m_axi_MASTER_ARSIZE),
    .ARBURST(m_axi_MASTER_ARBURST),
    .ARLOCK(m_axi_MASTER_ARLOCK),
    .ARCACHE(m_axi_MASTER_ARCACHE),
    .ARPROT(m_axi_MASTER_ARPROT),
    .ARQOS(m_axi_MASTER_ARQOS),
    .ARREGION(m_axi_MASTER_ARREGION),
    .ARUSER(m_axi_MASTER_ARUSER),
    .RVALID(m_axi_MASTER_RVALID),
    .RREADY(m_axi_MASTER_RREADY),
    .RDATA(m_axi_MASTER_RDATA),
    .RLAST(m_axi_MASTER_RLAST),
    .RID(m_axi_MASTER_RID),
    .RUSER(m_axi_MASTER_RUSER),
    .RRESP(m_axi_MASTER_RRESP),
    .BVALID(m_axi_MASTER_BVALID),
    .BREADY(m_axi_MASTER_BREADY),
    .BRESP(m_axi_MASTER_BRESP),
    .BID(m_axi_MASTER_BID),
    .BUSER(m_axi_MASTER_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(MASTER_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MASTER_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(MASTER_RDATA),
    .I_RID(MASTER_RID),
    .I_RUSER(MASTER_RUSER),
    .I_RRESP(MASTER_RRESP),
    .I_RLAST(MASTER_RLAST),
    .I_AWVALID(MASTER_AWVALID),
    .I_AWREADY(MASTER_AWREADY),
    .I_AWADDR(MASTER_addr_reg_189),
    .I_AWID(1'd0),
    .I_AWLEN(size_read_reg_183),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(MASTER_WVALID),
    .I_WREADY(MASTER_WREADY),
    .I_WDATA(tmp_reg_195),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(MASTER_BVALID),
    .I_BREADY(MASTER_BREADY),
    .I_BRESP(MASTER_BRESP),
    .I_BID(MASTER_BID),
    .I_BUSER(MASTER_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MASTER_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_MASTER_AWREADY == 1'b1)) begin
                ap_reg_ioackin_MASTER_AWREADY <= 1'b0;
            end else if ((1'b1 == MASTER_AWREADY)) begin
                ap_reg_ioackin_MASTER_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MASTER_WREADY <= 1'b0;
    end else begin
        if (((tmp_2_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            if ((1'b0 == ap_block_state3_io)) begin
                ap_reg_ioackin_MASTER_WREADY <= 1'b0;
            end else if ((1'b1 == MASTER_WREADY)) begin
                ap_reg_ioackin_MASTER_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_MASTER_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        memAddr_reg_107 <= 18'd0;
    end else if (((tmp_2_fu_164_p2 == 1'd1) & (1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        memAddr_reg_107 <= memAddr_1_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_1_reg_200 == 1'd1) & (1'b0 == MASTER_BVALID)) & (tmp_1_reg_200 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_0_reg_118 <= 1'd0;
    end else if (((tmp_1_fu_154_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_reg_118 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        MASTER_addr_reg_189[29 : 0] <= tmp_4_fu_140_p1[29 : 0];
        size_read_reg_183 <= size;
        tmp_1_reg_200 <= tmp_1_fu_154_p2;
        tmp_reg_195[7 : 0] <= tmp_fu_150_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_MASTER_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        MASTER_AWVALID = 1'b1;
    end else begin
        MASTER_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_1_reg_200 == 1'd1) & (1'b0 == MASTER_BVALID)) & (tmp_1_reg_200 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        MASTER_BREADY = 1'b1;
    end else begin
        MASTER_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_164_p2 == 1'd1) & (ap_reg_ioackin_MASTER_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        MASTER_WVALID = 1'b1;
    end else begin
        MASTER_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        MASTER_blk_n_AW = m_axi_MASTER_AWREADY;
    end else begin
        MASTER_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_1_reg_200 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        MASTER_blk_n_B = m_axi_MASTER_BVALID;
    end else begin
        MASTER_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        MASTER_blk_n_W = m_axi_MASTER_WREADY;
    end else begin
        MASTER_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_1_reg_200 == 1'd1) & (1'b0 == MASTER_BVALID)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_200 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_p_0_phi_fu_122_p4 = 1'd0;
    end else begin
        ap_phi_mux_p_0_phi_fu_122_p4 = p_0_reg_118;
    end
end

always @ (*) begin
    if ((~((tmp_1_reg_200 == 1'd1) & (1'b0 == MASTER_BVALID)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MASTER_AWREADY == 1'b0)) begin
        ap_sig_ioackin_MASTER_AWREADY = MASTER_AWREADY;
    end else begin
        ap_sig_ioackin_MASTER_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MASTER_WREADY == 1'b0)) begin
        ap_sig_ioackin_MASTER_WREADY = MASTER_WREADY;
    end else begin
        ap_sig_ioackin_MASTER_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_1_fu_154_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((tmp_1_fu_154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_MASTER_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_2_fu_164_p2 == 1'd1) & (1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((tmp_2_fu_164_p2 == 1'd0) & (1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((~((tmp_1_reg_200 == 1'd1) & (1'b0 == MASTER_BVALID)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign address1_fu_130_p4 = {{address[31:2]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state3_io = ((tmp_2_fu_164_p2 == 1'd1) & (ap_sig_ioackin_MASTER_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((tmp_1_reg_200 == 1'd1) & (1'b0 == MASTER_BVALID));
end

assign ap_return = ((ap_phi_mux_p_0_phi_fu_122_p4[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign memAddr_1_fu_169_p2 = (memAddr_reg_107 + 18'd1);

assign memAddr_cast_fu_160_p1 = memAddr_reg_107;

assign tmp_1_fu_154_p2 = (($signed(size) < $signed(32'd204800)) ? 1'b1 : 1'b0);

assign tmp_2_fu_164_p2 = (($signed(memAddr_cast_fu_160_p1) < $signed(size_read_reg_183)) ? 1'b1 : 1'b0);

assign tmp_4_fu_140_p1 = address1_fu_130_p4;

assign tmp_fu_150_p1 = value_r;

always @ (posedge ap_clk) begin
    MASTER_addr_reg_189[31:30] <= 2'b00;
    tmp_reg_195[31:8] <= 24'b000000000000000000000000;
end

endmodule //setMem
